{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/placement.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/throttle.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/position.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection-registery.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/charts/chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/visibility-observer.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/base-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axis-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/trim-label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/ticks.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/shape.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/style.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/alignment.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/show.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axes.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/id.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-linear-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-radial-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/events.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip-area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/timeline/timeline.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend-entry.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/scale-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/advanced-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/chart-common.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/view-dimensions.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-sets.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/color.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/domain.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/sort.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/types.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/advanced-pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-layout.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/linear-gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/ngx-charts.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polyfills.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","PlacementTypes","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","component","element","nativeElement","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","componentRef","attach","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","target","key","descriptor","configurable","enumerable","get","defineProperty","Injectable","ApplicationRef","ComponentFactoryResolver","Injector","verticalPosition","elDimensions","popoverDimensions","alignment","top","height","horizontalPosition","left","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","right","bottom","positionContent","determinePlacement","TooltipContentComponent","renderer","clz","type","cssClass","ngAfterViewInit","position","bind","_this","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","Component","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Input","ViewChild","HostBinding","HostListener","decorators","desc","c","getOwnPropertyDescriptor","Reflect","decorate","__decorate","InjectionRegisteryService","injectionService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","assign","has","set","TooltipService","_super","ChartComponent","showLegend","animations","legendLabelClick","EventEmitter","legendLabelActivate","legendLabelDeactivate","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","providers","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","Output","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","runOutsideAngular","Directive","NgZone","BaseChartComponent","chartElement","cd","scheme","schemeType","select","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","markForCheck","hostElem","parentNode","formatDates","g","label","name","toLocaleDateString","series","j","resizeSubscription","subscription","observableFromEvent","pipe","debounceTime","data","data_1","data_1_1","item","copy","_c","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","ChangeDetectorRef","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","trimLabel","max","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","toLocaleString","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","activeTime","setActiveTime","activeVal","tick","toString","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","getMaxTicks","maxScaleTicks","tickValues","domain","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","w","h","_b","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","StyleTypes","AlignmentTypes","ShowTypes","NgModule","imports","CommonModule","declarations","exports","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","center","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","focus","mouseover","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","navigator","userAgent","match","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","document","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","formatLabel","escapeLabel","replace","&","'","`","\"","<",">","entryComponents","cache","id","newId","random","pow","CircleSeriesComponent","activate","deactivate","barVisible","ngOnInit","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","findIndex","visibleValue","mapDataPointToCircle","cx","seriesName","tooltipLabel","xScale","Number","color","cy","yScale","d1","range","colors","getColor","classNames","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","onClick","isActive","entry","activeEntries","find","activateCircle","deactivateCircle","CircleComponent","isArray","join","GridPanelSeriesComponent","gridPanels","getGridPanels","className","step","paddingInner","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","gradient","initialized","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","t","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","requestAnimationFrame","timestamp","runCount","frameVal","progress","round","finished","val","decimalChecker","abs","root","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","global","MouseEvent","createMouseEvent","bubbles","cancelable","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","_e","_f","includes","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","d3event","selection","invert","LegendComponent","horizontal","labelClick","labelActivate","labelDeactivate","legendEntries","getLegendEntries","items","formattedLabel","this_1","trackBy","index","LegendEntryComponent","toggle","ScaleLegendComponent","sanitizer","gradientValues","gradientString","direction","bypassSecurityTrustStyle","splits","pairs","reverse","forEach","DomSanitizer","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","GridPanelComponent","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","AxesModule","TooltipModule","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","AreaChartComponent","legendTitle","baseValue","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","xAxis","yAxis","showXAxisLabel","showYAxisLabel","legend","timeline","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","sort","a","aDate","getTime","bDate","autoScale","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","isDate","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","ChartCommonModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valuesDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","valueDomain","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","D0Types","BarVerticalStackedComponent","SeriesVerticalComponent","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","d0Type","bars","getLabel","bar","offset1","offset0","ariaLabel","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","SeriesHorizontal","dataLabelWidthChanged","click","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","circles","getCircles","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","clickCallback","hasRange","onXClick","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","sin","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","isIE","test","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","textX","textY","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","PieChartModule","LineChartModule","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","invertColor","d3_color.rgb","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","valueType","TreeMapComponent","treemap","stratify","parentId","isRoot","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","text","getTickPath","smallAngle","lineGenerator","BarChartModule","SVGElement","HTMLDivElement","AreaChartModule","BubbleChartModule","HeatMapModule","PolarChartModule","NumberCardModule","TreeMapModule","GaugeModule","fieldType","groupByType","timeFormat","formatter"],"mappings":"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rB,CACE9b,KAAM,QACN+b,YAAY,EACZlH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,UACN+b,YAAY,EACZlH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,OACN+b,YAAY,EACZlH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,OACN+b,YAAY,EACZlH,MAAO,UACPvP,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAExF,CACEtF,KAAM,QACN+b,YAAY,EACZlH,MAAO,aACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,MACN+b,YAAY,EACZlH,MAAO,aACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,OACN+b,YAAY,EACZlH,MAAO,aACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN+b,YAAY,EACZlH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN+b,YAAY,EACZlH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,SACN+b,YAAY,EACZlH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,UACN+b,YAAY,EACZlH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN+b,YAAY,EACZlH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum PlacementTypes {\r\n  top = 'top' as any,\r\n  bottom = 'bottom' as any,\r\n  left = 'left' as any,\r\n  right = 'right' as any\r\n}\r\n","import {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Injectable,\r\n  Injector,\r\n  ViewContainerRef,\r\n  EmbeddedViewRef,\r\n  Type\r\n} from '@angular/core';\r\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\r\n\r\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\r\n  return x.element;\r\n}\r\n\r\n/**\r\n * Injection service is a helper to append components\r\n * dynamically to a known location in the DOM, most\r\n * noteably for dialogs/tooltips appending to body.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class InjectionService {\r\n  static globalRootViewContainer: ViewContainerRef = null;\r\n\r\n  /**\r\n   * Sets a default global root view container. This is useful for\r\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\r\n   *\r\n   * @param container\r\n   */\r\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\r\n    InjectionService.globalRootViewContainer = container;\r\n  }\r\n\r\n  private _container: ViewContainerRef;\r\n\r\n  constructor(\r\n    private applicationRef: ApplicationRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  /**\r\n   * Gets the root view container to inject the component to.\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\r\n    if (this._container) return this._container;\r\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\r\n\r\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\r\n\r\n    throw new Error(\r\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Overrides the default root view container. This is useful for\r\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\r\n   *\r\n   * @param container\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  setRootViewContainer(container: ViewContainerRef): void {\r\n    this._container = container;\r\n  }\r\n\r\n  /**\r\n   * Gets the html element for a component ref.\r\n   *\r\n   * @param componentRef\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\r\n    if (isViewContainerRef(component)) {\r\n      return component.element.nativeElement;\r\n    }\r\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\r\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n    }\r\n\r\n    // the top most component root node has no `hostView`\r\n    return component.location.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Gets the root component container html element.\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\r\n    return this.getComponentRootNode(component);\r\n  }\r\n\r\n  /**\r\n   * Projects the bindings onto the component\r\n   *\r\n   * @param component\r\n   * @param options\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\r\n    if (bindings) {\r\n      if (bindings.inputs !== undefined) {\r\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\r\n        for (const bindingName of bindingKeys) {\r\n          component.instance[bindingName] = bindings.inputs[bindingName];\r\n        }\r\n      }\r\n\r\n      if (bindings.outputs !== undefined) {\r\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\r\n        for (const eventName of eventKeys) {\r\n          component.instance[eventName] = bindings.outputs[eventName];\r\n        }\r\n      }\r\n    }\r\n\r\n    return component;\r\n  }\r\n\r\n  /**\r\n   * Appends a component to a adjacent location\r\n   *\r\n   * @param componentClass\r\n   * @param [options={}]\r\n   * @param [location]\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\r\n    if (!location) location = this.getRootViewContainer();\r\n    const appendLocation = this.getComponentRootNode(location);\r\n\r\n    const portalHost = new DomPortalHost(\r\n      appendLocation,\r\n      this.componentFactoryResolver,\r\n      this.applicationRef,\r\n      this.injector\r\n    );\r\n\r\n    const portal = new ComponentPortal(componentClass);\r\n\r\n    const componentRef = portalHost.attach(portal);\r\n    this.projectComponentBindings(componentRef, bindings);\r\n    return componentRef;\r\n  }\r\n}\r\n","/**\r\n * Throttle a function\r\n *\r\n */\r\nexport function throttle(func: any, wait: number, options?: any) {\r\n  options = options || {};\r\n  let context;\r\n  let args;\r\n  let result;\r\n  let timeout = null;\r\n  let previous = 0;\r\n\r\n  function later() {\r\n    previous = options.leading === false ? 0 : +new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  }\r\n\r\n  return function () {\r\n    const now = +new Date();\r\n\r\n    if (!previous && options.leading === false) {\r\n      previous = now;\r\n    }\r\n\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nexport function throttleable(duration: number, options?: any) {\r\n  return function innerDecorator(target, key, descriptor) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: descriptor.enumerable,\r\n      get: function getter() {\r\n        Object.defineProperty(this, key, {\r\n          configurable: true,\r\n          enumerable: descriptor.enumerable,\r\n          value: throttle(descriptor.value, duration, options)\r\n        });\r\n\r\n        return this[key];\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { PlacementTypes } from './placement.type';\r\n\r\nconst caretOffset = 7;\r\n\r\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\r\n  if (alignment === 'top') {\r\n    return elDimensions.top - caretOffset;\r\n  }\r\n\r\n  if (alignment === 'bottom') {\r\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\r\n  }\r\n\r\n  if (alignment === 'center') {\r\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\r\n  if (alignment === 'left') {\r\n    return elDimensions.left - caretOffset;\r\n  }\r\n\r\n  if (alignment === 'right') {\r\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\r\n  }\r\n\r\n  if (alignment === 'center') {\r\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Position helper for the popover directive.\r\n *\r\n * @export\r\n */\r\nexport class PositionHelper {\r\n  /**\r\n   * Calculate vertical alignment position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\r\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n\r\n    if (result + popoverDimensions.height > window.innerHeight) {\r\n      result = window.innerHeight - popoverDimensions.height;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate vertical caret position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\r\n    let result;\r\n\r\n    if (alignment === 'top') {\r\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\r\n    }\r\n\r\n    if (alignment === 'bottom') {\r\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\r\n    }\r\n\r\n    if (alignment === 'center') {\r\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\r\n    }\r\n\r\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\r\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate horz alignment position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\r\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n\r\n    if (result + popoverDimensions.width > window.innerWidth) {\r\n      result = window.innerWidth - popoverDimensions.width;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate horz caret position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\r\n    let result;\r\n\r\n    if (alignment === 'left') {\r\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\r\n    }\r\n\r\n    if (alignment === 'right') {\r\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\r\n    }\r\n\r\n    if (alignment === 'center') {\r\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\r\n    }\r\n\r\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\r\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Checks if the element's position should be flipped\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\r\n    let flip = false;\r\n\r\n    if (placement === 'right') {\r\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'left') {\r\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'top') {\r\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'bottom') {\r\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    return flip;\r\n  }\r\n\r\n  /**\r\n   * Position caret\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\r\n    let top = 0;\r\n    let left = 0;\r\n\r\n    if (placement === PlacementTypes.right) {\r\n      left = -7;\r\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.left) {\r\n      left = elmDim.width;\r\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.top) {\r\n      top = elmDim.height;\r\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.bottom) {\r\n      top = -7;\r\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    }\r\n\r\n    return { top, left };\r\n  }\r\n\r\n  /**\r\n   * Position content\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\r\n    let top = 0;\r\n    let left = 0;\r\n\r\n    if (placement === PlacementTypes.right) {\r\n      left = hostDim.left + hostDim.width + spacing;\r\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.left) {\r\n      left = hostDim.left - elmDim.width - spacing;\r\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.top) {\r\n      top = hostDim.top - elmDim.height - spacing;\r\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.bottom) {\r\n      top = hostDim.top + hostDim.height + spacing;\r\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n    }\r\n\r\n    return { top, left };\r\n  }\r\n\r\n  /**\r\n   * Determine placement based on flip\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\r\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\r\n\r\n    if (shouldFlip) {\r\n      if (placement === PlacementTypes.right) {\r\n        return PlacementTypes.left;\r\n      } else if (placement === PlacementTypes.left) {\r\n        return PlacementTypes.right;\r\n      } else if (placement === PlacementTypes.top) {\r\n        return PlacementTypes.bottom;\r\n      } else if (placement === PlacementTypes.bottom) {\r\n        return PlacementTypes.top;\r\n      }\r\n    }\r\n\r\n    return placement;\r\n  }\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ViewChild,\r\n  HostBinding,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\nimport { throttleable } from '../../utils/throttle';\r\nimport { PositionHelper, PlacementTypes } from './position';\r\n\r\nimport { StyleTypes } from './style.type';\r\nimport { AlignmentTypes } from './alignment.type';\r\n\r\n@Component({\r\n  selector: 'ngx-tooltip-content',\r\n  template: `\r\n    <div>\r\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\r\n      <div class=\"tooltip-content\">\r\n        <span *ngIf=\"!title\">\r\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\r\n        </span>\r\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\r\n      </div>\r\n    </div>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./tooltip.component.scss']\r\n})\r\nexport class TooltipContentComponent implements AfterViewInit {\r\n  @Input() host: any;\r\n  @Input() showCaret: boolean;\r\n  @Input() type: StyleTypes;\r\n  @Input() placement: PlacementTypes;\r\n  @Input() alignment: AlignmentTypes;\r\n  @Input() spacing: number;\r\n  @Input() cssClass: string;\r\n  @Input() title: string;\r\n  @Input() template: any;\r\n  @Input() context: any;\r\n\r\n  @ViewChild('caretElm') caretElm;\r\n\r\n  @HostBinding('class')\r\n  get cssClasses(): string {\r\n    let clz = 'ngx-charts-tooltip-content';\r\n    clz += ` position-${this.placement}`;\r\n    clz += ` type-${this.type}`;\r\n    clz += ` ${this.cssClass}`;\r\n    return clz;\r\n  }\r\n\r\n  constructor(public element: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(this.position.bind(this));\r\n  }\r\n\r\n  position(): void {\r\n    const nativeElm = this.element.nativeElement;\r\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\r\n\r\n    // if no dims were found, never show\r\n    if (!hostDim.height && !hostDim.width) return;\r\n\r\n    const elmDim = nativeElm.getBoundingClientRect();\r\n    this.checkFlip(hostDim, elmDim);\r\n    this.positionContent(nativeElm, hostDim, elmDim);\r\n\r\n    if (this.showCaret) {\r\n      this.positionCaret(hostDim, elmDim);\r\n    }\r\n\r\n    // animate its entry\r\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\r\n  }\r\n\r\n  positionContent(nativeElm, hostDim, elmDim): void {\r\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\r\n\r\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\r\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\r\n  }\r\n\r\n  positionCaret(hostDim, elmDim): void {\r\n    const caretElm = this.caretElm.nativeElement;\r\n    const caretDimensions = caretElm.getBoundingClientRect();\r\n    const { top, left } = PositionHelper.positionCaret(\r\n      this.placement,\r\n      elmDim,\r\n      hostDim,\r\n      caretDimensions,\r\n      this.alignment\r\n    );\r\n\r\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\r\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\r\n  }\r\n\r\n  checkFlip(hostDim, elmDim): void {\r\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\r\n  }\r\n\r\n  @HostListener('window:resize')\r\n  @throttleable(100)\r\n  onWindowResize(): void {\r\n    this.position();\r\n  }\r\n}\r\n","import { ComponentRef, Type } from '@angular/core';\r\nimport { InjectionService } from './injection.service';\r\n\r\nexport interface PartialBindings {\r\n  inputs?: object;\r\n  outputs?: object;\r\n}\r\n\r\nexport abstract class InjectionRegisteryService<T = any> {\r\n  protected abstract type: Type<T>;\r\n\r\n  protected defaults: PartialBindings = {};\r\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\r\n\r\n  constructor(public injectionService: InjectionService) {}\r\n\r\n  getByType(type: Type<T> = this.type) {\r\n    return this.components.get(type);\r\n  }\r\n\r\n  create(bindings: object): ComponentRef<T> {\r\n    return this.createByType(this.type, bindings);\r\n  }\r\n\r\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\r\n    bindings = this.assignDefaults(bindings);\r\n\r\n    const component = this.injectComponent(type, bindings);\r\n    this.register(type, component);\r\n\r\n    return component;\r\n  }\r\n\r\n  destroy(instance: ComponentRef<T>): void {\r\n    const compsByType = this.components.get(instance.componentType);\r\n\r\n    if (compsByType && compsByType.length) {\r\n      const idx = compsByType.indexOf(instance);\r\n\r\n      if (idx > -1) {\r\n        const component = compsByType[idx];\r\n        component.destroy();\r\n        compsByType.splice(idx, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  destroyAll(): void {\r\n    this.destroyByType(this.type);\r\n  }\r\n\r\n  destroyByType(type: Type<T>): void {\r\n    const comps = this.components.get(type);\r\n\r\n    if (comps && comps.length) {\r\n      let i = comps.length - 1;\r\n      while (i >= 0) {\r\n        this.destroy(comps[i--]);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\r\n    return this.injectionService.appendComponent(type, bindings);\r\n  }\r\n\r\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\r\n    const inputs = { ...this.defaults.inputs };\r\n    const outputs = { ...this.defaults.outputs };\r\n\r\n    if (!bindings.inputs && !bindings.outputs) {\r\n      bindings = { inputs: bindings };\r\n    }\r\n\r\n    if (inputs) {\r\n      bindings.inputs = { ...inputs, ...bindings.inputs };\r\n    }\r\n\r\n    if (outputs) {\r\n      bindings.outputs = { ...outputs, ...bindings.outputs };\r\n    }\r\n\r\n    return bindings;\r\n  }\r\n\r\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\r\n    if (!this.components.has(type)) {\r\n      this.components.set(type, []);\r\n    }\r\n\r\n    const types = this.components.get(type);\r\n    types.push(component);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { InjectionService } from './injection.service';\r\nimport { TooltipContentComponent } from './tooltip.component';\r\nimport { InjectionRegisteryService } from './injection-registery.service';\r\n@Injectable()\r\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\r\n  type: any = TooltipContentComponent;\r\n\r\n  constructor(injectionService: InjectionService) {\r\n    super(injectionService);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { TooltipService } from '../tooltip/tooltip.service';\r\n\r\n@Component({\r\n  providers: [TooltipService],\r\n  selector: 'ngx-charts-chart',\r\n  template: `\r\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\r\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\r\n        <ng-content></ng-content>\r\n      </svg>\r\n      <ngx-charts-scale-legend\r\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\r\n        class=\"chart-legend\"\r\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\r\n        [valueRange]=\"legendOptions.domain\"\r\n        [colors]=\"legendOptions.colors\"\r\n        [height]=\"view[1]\"\r\n        [width]=\"legendWidth\"\r\n      >\r\n      </ngx-charts-scale-legend>\r\n      <ngx-charts-legend\r\n        *ngIf=\"showLegend && legendType === 'legend'\"\r\n        class=\"chart-legend\"\r\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\r\n        [data]=\"legendOptions.domain\"\r\n        [title]=\"legendOptions.title\"\r\n        [colors]=\"legendOptions.colors\"\r\n        [height]=\"view[1]\"\r\n        [width]=\"legendWidth\"\r\n        [activeEntries]=\"activeEntries\"\r\n        (labelClick)=\"legendLabelClick.emit($event)\"\r\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\r\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\r\n      >\r\n      </ngx-charts-legend>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\r\n    ])\r\n  ]\r\n})\r\nexport class ChartComponent implements OnChanges {\r\n  @Input() view;\r\n  @Input() showLegend = false;\r\n  @Input() legendOptions: any;\r\n\r\n  // remove\r\n  @Input() data;\r\n  @Input() legendData;\r\n  @Input() legendType: any;\r\n  @Input() colors: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  chartWidth: any;\r\n  title: any;\r\n  legendWidth: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    let legendColumns = 0;\r\n    if (this.showLegend) {\r\n      this.legendType = this.getLegendType();\r\n\r\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\r\n        if (this.legendType === 'scaleLegend') {\r\n          legendColumns = 1;\r\n        } else {\r\n          legendColumns = 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    const chartColumns = 12 - legendColumns;\r\n\r\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\r\n    this.legendWidth =\r\n      !this.legendOptions || this.legendOptions.position === 'right'\r\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\r\n        : this.chartWidth;\r\n  }\r\n\r\n  getLegendType(): string {\r\n    if (this.legendOptions.scaleType === 'linear') {\r\n      return 'scaleLegend';\r\n    } else {\r\n      return 'legend';\r\n    }\r\n  }\r\n}\r\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\r\n\r\n/**\r\n * Visibility Observer\r\n */\r\n@Directive({\r\n  selector: 'visibility-observer'\r\n})\r\nexport class VisibilityObserver {\r\n  @Output() visible: EventEmitter<any> = new EventEmitter();\r\n\r\n  timeout: any;\r\n  isVisible: boolean = false;\r\n\r\n  constructor(private element: ElementRef, private zone: NgZone) {\r\n    this.runCheck();\r\n  }\r\n\r\n  destroy(): void {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  onVisibilityChange(): void {\r\n    // trigger zone recalc for columns\r\n    this.zone.run(() => {\r\n      this.isVisible = true;\r\n      this.visible.emit(true);\r\n    });\r\n  }\r\n\r\n  runCheck(): void {\r\n    const check = () => {\r\n      if (!this.element) {\r\n        return;\r\n      }\r\n\r\n      // https://davidwalsh.name/offsetheight-visibility\r\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n\r\n      if (offsetHeight && offsetWidth) {\r\n        clearTimeout(this.timeout);\r\n        this.onVisibilityChange();\r\n      } else {\r\n        clearTimeout(this.timeout);\r\n        this.zone.runOutsideAngular(() => {\r\n          this.timeout = setTimeout(() => check(), 100);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.zone.runOutsideAngular(() => {\r\n      this.timeout = setTimeout(() => check());\r\n    });\r\n  }\r\n}\r\n","import {\r\n  ElementRef,\r\n  NgZone,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { fromEvent as observableFromEvent } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { VisibilityObserver } from '../utils/visibility-observer';\r\n\r\n@Component({\r\n  selector: 'base-chart',\r\n  template: ` <div></div> `\r\n})\r\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\r\n  @Input() results: any;\r\n  @Input() view: [number, number];\r\n  @Input() scheme: any = 'cool';\r\n  @Input() schemeType: string = 'ordinal';\r\n  @Input() customColors: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  width: number;\r\n  height: number;\r\n  resizeSubscription: any;\r\n  visibilityObserver: VisibilityObserver;\r\n\r\n  constructor(protected chartElement: ElementRef, protected zone: NgZone, protected cd: ChangeDetectorRef) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.bindWindowResizeEvent();\r\n\r\n    // listen for visibility of the element for hidden by default scenario\r\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\r\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unbindEvents();\r\n    if (this.visibilityObserver) {\r\n      this.visibilityObserver.visible.unsubscribe();\r\n      this.visibilityObserver.destroy();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.results) {\r\n      this.results = this.cloneData(this.results);\r\n    } else {\r\n      this.results = [];\r\n    }\r\n\r\n    if (this.view) {\r\n      this.width = this.view[0];\r\n      this.height = this.view[1];\r\n    } else {\r\n      const dims = this.getContainerDims();\r\n      if (dims) {\r\n        this.width = dims.width;\r\n        this.height = dims.height;\r\n      }\r\n    }\r\n\r\n    // default values if width or height are 0 or undefined\r\n    if (!this.width) {\r\n      this.width = 600;\r\n    }\r\n\r\n    if (!this.height) {\r\n      this.height = 400;\r\n    }\r\n\r\n    this.width = Math.floor(this.width);\r\n    this.height = Math.floor(this.height);\r\n\r\n    if (this.cd) {\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  getContainerDims(): any {\r\n    let width;\r\n    let height;\r\n    const hostElem = this.chartElement.nativeElement;\r\n\r\n    if (hostElem.parentNode !== null) {\r\n      // Get the container dimensions\r\n      const dims = hostElem.parentNode.getBoundingClientRect();\r\n      width = dims.width;\r\n      height = dims.height;\r\n    }\r\n\r\n    if (width && height) {\r\n      return { width, height };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Converts all date objects that appear as name\r\n   * into formatted date strings\r\n   */\r\n  formatDates(): void {\r\n    for (let i = 0; i < this.results.length; i++) {\r\n      const g = this.results[i];\r\n      g.label = g.name;\r\n      if (g.label instanceof Date) {\r\n        g.label = g.label.toLocaleDateString();\r\n      }\r\n\r\n      if (g.series) {\r\n        for (let j = 0; j < g.series.length; j++) {\r\n          const d = g.series[j];\r\n          d.label = d.name;\r\n          if (d.label instanceof Date) {\r\n            d.label = d.label.toLocaleDateString();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected unbindEvents(): void {\r\n    if (this.resizeSubscription) {\r\n      this.resizeSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private bindWindowResizeEvent(): void {\r\n    const source = observableFromEvent(window, 'resize');\r\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\r\n      this.update();\r\n      if (this.cd) {\r\n        this.cd.markForCheck();\r\n      }\r\n    });\r\n    this.resizeSubscription = subscription;\r\n  }\r\n\r\n  /**\r\n   * Clones the data into a new object\r\n   *\r\n   * @memberOf BaseChart\r\n   */\r\n  private cloneData(data): any {\r\n    const results = [];\r\n\r\n    for (const item of data) {\r\n      const copy = {\r\n        name: item['name']\r\n      };\r\n\r\n      if (item['value'] !== undefined) {\r\n        copy['value'] = item['value'];\r\n      }\r\n\r\n      if (item['series'] !== undefined) {\r\n        copy['series'] = [];\r\n        for (const seriesItem of item['series']) {\r\n          const seriesItemCopy = Object.assign({}, seriesItem);\r\n          copy['series'].push(seriesItemCopy);\r\n        }\r\n      }\r\n\r\n      if (item['extra'] !== undefined) {\r\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\r\n      }\r\n\r\n      results.push(copy);\r\n    }\r\n\r\n    return results;\r\n  }\r\n}\r\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-axis-label]',\r\n  template: `\r\n    <svg:text\r\n      [attr.stroke-width]=\"strokeWidth\"\r\n      [attr.x]=\"x\"\r\n      [attr.y]=\"y\"\r\n      [attr.text-anchor]=\"textAnchor\"\r\n      [attr.transform]=\"transform\"\r\n    >\r\n      {{ label }}\r\n    </svg:text>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AxisLabelComponent implements OnChanges {\r\n  @Input() orient;\r\n  @Input() label;\r\n  @Input() offset;\r\n  @Input() width;\r\n  @Input() height;\r\n\r\n  x: any;\r\n  y: any;\r\n  transform: any;\r\n  strokeWidth: any;\r\n  textAnchor: any;\r\n  element: ElementRef;\r\n  textHeight = 25;\r\n  margin = 5;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.strokeWidth = '0.01';\r\n    this.textAnchor = 'middle';\r\n    this.transform = '';\r\n\r\n    switch (this.orient) {\r\n      case 'top':\r\n        this.y = this.offset;\r\n        this.x = this.width / 2;\r\n        break;\r\n      case 'bottom':\r\n        this.y = this.offset;\r\n        this.x = this.width / 2;\r\n        break;\r\n      case 'left':\r\n        this.y = -(this.offset + this.textHeight + this.margin);\r\n        this.x = -this.height / 2;\r\n        this.transform = 'rotate(270)';\r\n        break;\r\n      case 'right':\r\n        this.y = this.offset + this.margin;\r\n        this.x = -this.height / 2;\r\n        this.transform = 'rotate(270)';\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n}\r\n","export function trimLabel(s, max = 16): string {\r\n  if (typeof s !== 'string') {\r\n    if (typeof s === 'number') {\r\n      return s + '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  s = s.trim();\r\n  if (s.length <= max) {\r\n    return s;\r\n  } else {\r\n    return `${s.slice(0, max)}...`;\r\n  }\r\n}\r\n","export function reduceTicks(ticks, maxTicks) {\r\n  if (ticks.length > maxTicks) {\r\n    const reduced = [];\r\n    const modulus = Math.floor(ticks.length / maxTicks);\r\n    for (let i = 0; i < ticks.length; i++) {\r\n      if (i % modulus === 0) {\r\n        reduced.push(ticks[i]);\r\n      }\r\n    }\r\n    ticks = reduced;\r\n  }\r\n\r\n  return ticks;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ElementRef,\r\n  ViewChild,\r\n  SimpleChanges,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { reduceTicks } from './ticks.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-x-axis-ticks]',\r\n  template: `\r\n    <svg:g #ticksel>\r\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\r\n        <title>{{ tickFormat(tick) }}</title>\r\n        <svg:text\r\n          stroke-width=\"0.01\"\r\n          [attr.text-anchor]=\"textAnchor\"\r\n          [attr.transform]=\"textTransform\"\r\n          [style.font-size]=\"'12px'\"\r\n        >\r\n          {{ tickTrim(tickFormat(tick)) }}\r\n        </svg:text>\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n\r\n    <svg:g *ngIf=\"activeTime\">\r\n      <svg:line\r\n        class=\"refline-path gridline-path-horizontal\"\r\n        [attr.x1]=\"activeVal\"\r\n        y1=\"0\"\r\n        style=\"stroke: #000;stroke-dasharray:none;\"\r\n        [attr.x2]=\"activeVal\"\r\n        [attr.y2]=\"gridLineHeight+6\"\r\n        [attr.transform]=\"gridLineTransform()\"\r\n      />\r\n      <svg:text\r\n        class=\"refline-label\"\r\n        [attr.y]=\"-gridLineHeight-8\"\r\n        [attr.x]=\"activeVal\"\r\n        text-anchor={{this.activeVal>(this.width-70):'end':'middle'}}\r\n      >\r\n        {{ activeTime.toLocaleString() }}\r\n      </svg:text>\r\n    </svg:g>\r\n\r\n\r\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\r\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\r\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\r\n  @Input() scale;\r\n  @Input() orient;\r\n  @Input() tickArguments = [5];\r\n  @Input() tickValues: any[];\r\n  @Input() tickStroke = '#ccc';\r\n  @Input() trimTicks: boolean = true;\r\n  @Input() maxTickLength: number = 16;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() gridLineHeight;\r\n  @Input() width;\r\n  @Input() activeTime;\r\n  @Input() rotateTicks: boolean = true;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  verticalSpacing: number = 20;\r\n  rotateLabels: boolean = false;\r\n  innerTickSize: number = 6;\r\n  outerTickSize: number = 6;\r\n  tickPadding: number = 3;\r\n  textAnchor: string = 'middle';\r\n  maxTicksLength: number = 0;\r\n  maxAllowedLength: number = 16;\r\n  adjustedScale: any;\r\n  textTransform: any;\r\n  ticks: any;\r\n  tickFormat: (o: any) => any;\r\n  height: number = 0;\r\n  activeVal;\r\n\r\n  @ViewChild('ticksel') ticksElement: ElementRef;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  updateDims(): void {\r\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\r\n    if (height !== this.height) {\r\n      this.height = height;\r\n      this.dimensionsChanged.emit({ height });\r\n      setTimeout(() => this.updateDims());\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    const scale = this.scale;\r\n    this.ticks = this.getTicks();\r\n\r\n    if (this.tickFormatting) {\r\n      this.tickFormat = this.tickFormatting;\r\n    } else if (scale.tickFormat) {\r\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\r\n    } else {\r\n      this.tickFormat = function (d) {\r\n        if (d.constructor.name === 'Date') {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\r\n\r\n    this.adjustedScale = this.scale.bandwidth\r\n      ? function (d) {\r\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\r\n        }\r\n      : this.scale;\r\n\r\n    this.textTransform = '';\r\n    if (angle && angle !== 0) {\r\n      this.textTransform = `rotate(${angle})`;\r\n      this.textAnchor = 'end';\r\n      this.verticalSpacing = 10;\r\n    } else {\r\n      this.textAnchor = 'middle';\r\n    }\r\n\r\n    if(this.activeTime){\r\n      this.setActiveTime();\r\n    }\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  setActiveTime(): void {\r\n    this.activeVal = this.adjustedScale(this.activeTime);\r\n    /*this.activeTimePath = roundedRect(activeVal, this.height+6, 1, 0, 0, [\r\n      false,\r\n      false,\r\n      false,\r\n      false\r\n    ]);*/\r\n  }\r\n  getRotationAngle(ticks): number {\r\n    let angle = 0;\r\n    this.maxTicksLength = 0;\r\n    for (let i = 0; i < ticks.length; i++) {\r\n      const tick = this.tickFormat(ticks[i]).toString();\r\n      let tickLength = tick.length;\r\n      if (this.trimTicks) {\r\n        tickLength = this.tickTrim(tick).length;\r\n      }\r\n\r\n      if (tickLength > this.maxTicksLength) {\r\n        this.maxTicksLength = tickLength;\r\n      }\r\n    }\r\n\r\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\r\n    const charWidth = 8; // need to measure this\r\n    const wordWidth = len * charWidth;\r\n\r\n    let baseWidth = wordWidth;\r\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\r\n\r\n    // calculate optimal angle\r\n    while (baseWidth > maxBaseWidth && angle > -90) {\r\n      angle -= 30;\r\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n  getTicks() {\r\n    let ticks;\r\n    const maxTicks = this.getMaxTicks(20);\r\n    const maxScaleTicks = this.getMaxTicks(100);\r\n\r\n    if (this.tickValues) {\r\n      ticks = this.tickValues;\r\n    } else if (this.scale.ticks) {\r\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\r\n    } else {\r\n      ticks = this.scale.domain();\r\n      ticks = reduceTicks(ticks, maxTicks);\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getMaxTicks(tickWidth: number): number {\r\n    return Math.floor(this.width / tickWidth);\r\n  }\r\n\r\n  tickTransform(tick): string {\r\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\r\n  }\r\n\r\n  gridLineTransform(): string {\r\n    return `translate(0,${-this.verticalSpacing - 5})`;\r\n  }\r\n\r\n  tickTrim(label: string): string {\r\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ViewChild,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-x-axis]',\r\n  template: `\r\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\r\n      <svg:g\r\n        ngx-charts-x-axis-ticks\r\n        *ngIf=\"xScale\"\r\n        [trimTicks]=\"trimTicks\"\r\n        [rotateTicks]=\"rotateTicks\"\r\n        [maxTickLength]=\"maxTickLength\"\r\n        [tickFormatting]=\"tickFormatting\"\r\n        [tickArguments]=\"tickArguments\"\r\n        [tickStroke]=\"tickStroke\"\r\n        [scale]=\"xScale\"\r\n        [orient]=\"xOrient\"\r\n        [showGridLines]=\"showGridLines\"\r\n        [gridLineHeight]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n        [tickValues]=\"ticks\"\r\n        [activeTime]=\"activeTime\"\r\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-axis-label\r\n        *ngIf=\"showLabel\"\r\n        [label]=\"labelText\"\r\n        [offset]=\"labelOffset\"\r\n        [orient]=\"'bottom'\"\r\n        [height]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class XAxisComponent implements OnChanges {\r\n  @Input() xScale;\r\n  @Input() dims;\r\n  @Input() trimTicks: boolean;\r\n  @Input() rotateTicks: boolean = true;\r\n  @Input() maxTickLength: number;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() showLabel;\r\n  @Input() labelText;\r\n  @Input() ticks: any[];\r\n  @Input() xAxisTickInterval;\r\n  @Input() xAxisTickCount: any;\r\n  @Input() xOrient: string = 'bottom';\r\n  @Input() xAxisOffset: number = 0;\r\n  @Input() activeTime;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  xAxisClassName: string = 'x axis';\r\n\r\n  tickArguments: any;\r\n  transform: any;\r\n  labelOffset: number = 0;\r\n  fill: string = 'none';\r\n  stroke: string = 'stroke';\r\n  tickStroke: string = '#ccc';\r\n  strokeWidth: string = 'none';\r\n  padding: number = 5;\r\n\r\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\r\n\r\n    if (typeof this.xAxisTickCount !== 'undefined') {\r\n      this.tickArguments = [this.xAxisTickCount];\r\n    }\r\n  }\r\n\r\n  emitTicksHeight({ height }): void {\r\n    const newLabelOffset = height + 25 + 5;\r\n    if (newLabelOffset !== this.labelOffset) {\r\n      this.labelOffset = newLabelOffset;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ height });\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Generates a rounded rectanglar path\r\n *\r\n * @export\r\n * @param x, y, w, h, r, tl, tr, bl, br\r\n */\r\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\r\n  let retval = '';\r\n\r\n  w = Math.floor(w);\r\n  h = Math.floor(h);\r\n\r\n  w = w === 0 ? 1 : w;\r\n  h = h === 0 ? 1 : h;\r\n\r\n  retval = `M${[x + r, y]}`;\r\n  retval += `h${w - 2 * r}`;\r\n\r\n  if (tr) {\r\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\r\n  } else {\r\n    retval += `h${r}v${r}`;\r\n  }\r\n\r\n  retval += `v${h - 2 * r}`;\r\n\r\n  if (br) {\r\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\r\n  } else {\r\n    retval += `v${r}h${-r}`;\r\n  }\r\n\r\n  retval += `h${2 * r - w}`;\r\n\r\n  if (bl) {\r\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\r\n  } else {\r\n    retval += `h${-r}v${-r}`;\r\n  }\r\n\r\n  retval += `v${2 * r - h}`;\r\n\r\n  if (tl) {\r\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\r\n  } else {\r\n    retval += `v${-r}h${r}`;\r\n  }\r\n\r\n  retval += `z`;\r\n\r\n  return retval;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  ElementRef,\r\n  ViewChild,\r\n  EventEmitter,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { reduceTicks } from './ticks.helper';\r\nimport { roundedRect } from '../../common/shape.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-y-axis-ticks]',\r\n  template: `\r\n    <svg:g #ticksel>\r\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\r\n        <title>{{ tickFormat(tick) }}</title>\r\n        <svg:text\r\n          stroke-width=\"0.01\"\r\n          [attr.dy]=\"dy\"\r\n          [attr.x]=\"x1\"\r\n          [attr.y]=\"y1\"\r\n          [attr.text-anchor]=\"textAnchor\"\r\n          [style.font-size]=\"'12px'\"\r\n        >\r\n          {{ tickTrim(tickFormat(tick)) }}\r\n        </svg:text>\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:path\r\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\r\n      class=\"reference-area\"\r\n      [attr.d]=\"referenceAreaPath\"\r\n      [attr.transform]=\"gridLineTransform()\"\r\n    />\r\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\r\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\r\n        <svg:line\r\n          *ngIf=\"orient === 'left'\"\r\n          class=\"gridline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"gridLineWidth\"\r\n        />\r\n        <svg:line\r\n          *ngIf=\"orient === 'right'\"\r\n          class=\"gridline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"-gridLineWidth\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:g *ngFor=\"let refLine of referenceLines\">\r\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\r\n        <svg:line\r\n          class=\"refline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"gridLineWidth\"\r\n          [attr.transform]=\"gridLineTransform()\"\r\n        />\r\n        <svg:g *ngIf=\"showRefLabels\">\r\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\r\n          <svg:text\r\n            class=\"refline-label\"\r\n            [attr.dy]=\"dy\"\r\n            [attr.y]=\"-6\"\r\n            [attr.x]=\"gridLineWidth\"\r\n            [attr.text-anchor]=\"textAnchor\"\r\n          >\r\n            {{ refLine.name }}\r\n          </svg:text>\r\n        </svg:g>\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\r\n  @Input() scale;\r\n  @Input() orient;\r\n  @Input() tickArguments = [5];\r\n  @Input() tickValues: any[];\r\n  @Input() tickStroke = '#ccc';\r\n  @Input() trimTicks: boolean = true;\r\n  @Input() maxTickLength: number = 16;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() gridLineWidth;\r\n  @Input() height;\r\n  @Input() referenceLines;\r\n  @Input() showRefLabels: boolean = false;\r\n  @Input() showRefLines: boolean = false;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  innerTickSize: any = 6;\r\n  tickPadding: any = 3;\r\n  tickSpacing: any;\r\n  verticalSpacing: number = 20;\r\n  textAnchor: any = 'middle';\r\n  dy: any;\r\n  x1: any;\r\n  x2: any;\r\n  y1: any;\r\n  y2: any;\r\n  adjustedScale: any;\r\n  transform: (o: any) => string;\r\n  tickFormat: (o: any) => string;\r\n  ticks: any;\r\n  width: number = 0;\r\n  outerTickSize: number = 6;\r\n  rotateLabels: boolean = false;\r\n  refMax: number;\r\n  refMin: number;\r\n  referenceLineLength: number = 0;\r\n  referenceAreaPath: string;\r\n\r\n  @ViewChild('ticksel') ticksElement: ElementRef;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  updateDims(): void {\r\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\r\n    if (width !== this.width) {\r\n      this.width = width;\r\n      this.dimensionsChanged.emit({ width });\r\n      setTimeout(() => this.updateDims());\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    let scale;\r\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\r\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\r\n\r\n    scale = this.scale;\r\n    this.ticks = this.getTicks();\r\n\r\n    if (this.tickFormatting) {\r\n      this.tickFormat = this.tickFormatting;\r\n    } else if (scale.tickFormat) {\r\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\r\n    } else {\r\n      this.tickFormat = function (d) {\r\n        if (d.constructor.name === 'Date') {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    this.adjustedScale = scale.bandwidth\r\n      ? function (d) {\r\n          return scale(d) + scale.bandwidth() * 0.5;\r\n        }\r\n      : scale;\r\n\r\n    if (this.showRefLines && this.referenceLines) {\r\n      this.setReferencelines();\r\n    }\r\n\r\n    switch (this.orient) {\r\n      case 'top':\r\n        this.transform = function (tick) {\r\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\r\n        };\r\n        this.textAnchor = 'middle';\r\n        this.y2 = this.innerTickSize * sign;\r\n        this.y1 = this.tickSpacing * sign;\r\n        this.dy = sign < 0 ? '0em' : '.71em';\r\n        break;\r\n      case 'bottom':\r\n        this.transform = function (tick) {\r\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\r\n        };\r\n        this.textAnchor = 'middle';\r\n        this.y2 = this.innerTickSize * sign;\r\n        this.y1 = this.tickSpacing * sign;\r\n        this.dy = sign < 0 ? '0em' : '.71em';\r\n        break;\r\n      case 'left':\r\n        this.transform = function (tick) {\r\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\r\n        };\r\n        this.textAnchor = 'end';\r\n        this.x2 = this.innerTickSize * -sign;\r\n        this.x1 = this.tickSpacing * -sign;\r\n        this.dy = '.32em';\r\n        break;\r\n      case 'right':\r\n        this.transform = function (tick) {\r\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\r\n        };\r\n        this.textAnchor = 'start';\r\n        this.x2 = this.innerTickSize * -sign;\r\n        this.x1 = this.tickSpacing * -sign;\r\n        this.dy = '.32em';\r\n        break;\r\n      default:\r\n    }\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  setReferencelines(): void {\r\n    this.refMin = this.adjustedScale(\r\n      Math.min.apply(\r\n        null,\r\n        this.referenceLines.map(item => item.value)\r\n      )\r\n    );\r\n    this.refMax = this.adjustedScale(\r\n      Math.max.apply(\r\n        null,\r\n        this.referenceLines.map(item => item.value)\r\n      )\r\n    );\r\n    this.referenceLineLength = this.referenceLines.length;\r\n\r\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\r\n      false,\r\n      false,\r\n      false,\r\n      false\r\n    ]);\r\n  }\r\n\r\n  getTicks(): any {\r\n    let ticks;\r\n    const maxTicks = this.getMaxTicks(20);\r\n    const maxScaleTicks = this.getMaxTicks(50);\r\n\r\n    if (this.tickValues) {\r\n      ticks = this.tickValues;\r\n    } else if (this.scale.ticks) {\r\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\r\n    } else {\r\n      ticks = this.scale.domain();\r\n      ticks = reduceTicks(ticks, maxTicks);\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getMaxTicks(tickHeight: number): number {\r\n    return Math.floor(this.height / tickHeight);\r\n  }\r\n\r\n  tickTransform(tick): string {\r\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\r\n  }\r\n\r\n  gridLineTransform(): string {\r\n    return `translate(5,0)`;\r\n  }\r\n\r\n  tickTrim(label: string): string {\r\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ViewChild,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-y-axis]',\r\n  template: `\r\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\r\n      <svg:g\r\n        ngx-charts-y-axis-ticks\r\n        *ngIf=\"yScale\"\r\n        [trimTicks]=\"trimTicks\"\r\n        [maxTickLength]=\"maxTickLength\"\r\n        [tickFormatting]=\"tickFormatting\"\r\n        [tickArguments]=\"tickArguments\"\r\n        [tickValues]=\"ticks\"\r\n        [tickStroke]=\"tickStroke\"\r\n        [scale]=\"yScale\"\r\n        [orient]=\"yOrient\"\r\n        [showGridLines]=\"showGridLines\"\r\n        [gridLineWidth]=\"dims.width\"\r\n        [referenceLines]=\"referenceLines\"\r\n        [showRefLines]=\"showRefLines\"\r\n        [showRefLabels]=\"showRefLabels\"\r\n        [height]=\"dims.height\"\r\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\r\n      />\r\n\r\n      <svg:g\r\n        ngx-charts-axis-label\r\n        *ngIf=\"showLabel\"\r\n        [label]=\"labelText\"\r\n        [offset]=\"labelOffset\"\r\n        [orient]=\"yOrient\"\r\n        [height]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YAxisComponent implements OnChanges {\r\n  @Input() yScale;\r\n  @Input() dims;\r\n  @Input() trimTicks: boolean;\r\n  @Input() maxTickLength: number;\r\n  @Input() tickFormatting;\r\n  @Input() ticks: any[];\r\n  @Input() showGridLines = false;\r\n  @Input() showLabel;\r\n  @Input() labelText;\r\n  @Input() yAxisTickInterval;\r\n  @Input() yAxisTickCount: any;\r\n  @Input() yOrient: string = 'left';\r\n  @Input() referenceLines;\r\n  @Input() showRefLines;\r\n  @Input() showRefLabels;\r\n  @Input() yAxisOffset: number = 0;\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  yAxisClassName: string = 'y axis';\r\n  tickArguments: any;\r\n  offset: any;\r\n  transform: any;\r\n  labelOffset: number = 15;\r\n  fill: string = 'none';\r\n  stroke: string = '#CCC';\r\n  tickStroke: string = '#CCC';\r\n  strokeWidth: number = 1;\r\n  padding: number = 5;\r\n\r\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.offset = -(this.yAxisOffset + this.padding);\r\n    if (this.yOrient === 'right') {\r\n      this.labelOffset = 65;\r\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\r\n    } else {\r\n      this.offset = this.offset;\r\n      this.transform = `translate(${this.offset} , 0)`;\r\n    }\r\n\r\n    if (this.yAxisTickCount !== undefined) {\r\n      this.tickArguments = [this.yAxisTickCount];\r\n    }\r\n  }\r\n\r\n  emitTicksWidth({ width }): void {\r\n    if (width !== this.labelOffset && this.yOrient === 'right') {\r\n      this.labelOffset = width + this.labelOffset;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ width });\r\n      }, 0);\r\n    } else if (width !== this.labelOffset) {\r\n      this.labelOffset = width;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ width });\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","export enum StyleTypes {\r\n  popover = 'popover' as any,\r\n  tooltip = 'tooltip' as any\r\n}\r\n","export enum AlignmentTypes {\r\n  left = 'left' as any,\r\n  center = 'center' as any,\r\n  right = 'right' as any\r\n}\r\n","export enum ShowTypes {\r\n  all = 'all' as any,\r\n  focus = 'focus' as any,\r\n  mouseover = 'mouseover' as any\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AxisLabelComponent } from './axis-label.component';\r\nimport { XAxisComponent } from './x-axis.component';\r\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\r\nimport { YAxisComponent } from './y-axis.component';\r\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\r\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\r\n})\r\nexport class AxesModule {}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewContainerRef,\r\n  Renderer2,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { PlacementTypes } from './position';\r\nimport { StyleTypes } from './style.type';\r\nimport { AlignmentTypes } from './alignment.type';\r\nimport { ShowTypes } from './show.type';\r\n\r\nimport { TooltipService } from './tooltip.service';\r\n\r\n@Directive({ selector: '[ngx-tooltip]' })\r\nexport class TooltipDirective implements OnDestroy {\r\n  @Input() tooltipCssClass: string = '';\r\n  @Input() tooltipTitle: string = '';\r\n  @Input() tooltipAppendToBody: boolean = true;\r\n  @Input() tooltipSpacing: number = 10;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipShowCaret: boolean = true;\r\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\r\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\r\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\r\n  @Input() tooltipCloseOnClickOutside: boolean = true;\r\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\r\n  @Input() tooltipHideTimeout: number = 300;\r\n  @Input() tooltipShowTimeout: number = 100;\r\n  @Input() tooltipTemplate: any;\r\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\r\n  @Input() tooltipContext: any;\r\n  @Input() tooltipImmediateExit: boolean = false;\r\n\r\n  @Output() show = new EventEmitter();\r\n  @Output() hide = new EventEmitter();\r\n\r\n  private get listensForFocus(): boolean {\r\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\r\n  }\r\n\r\n  private get listensForHover(): boolean {\r\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\r\n  }\r\n\r\n  private component: any;\r\n  private timeout: any;\r\n  private mouseLeaveContentEvent: any;\r\n  private mouseEnterContentEvent: any;\r\n  private documentClickEvent: any;\r\n\r\n  constructor(\r\n    private tooltipService: TooltipService,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.hideTooltip(true);\r\n  }\r\n\r\n  @HostListener('focusin')\r\n  onFocus(): void {\r\n    if (this.listensForFocus) {\r\n      this.showTooltip();\r\n    }\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur(): void {\r\n    if (this.listensForFocus) {\r\n      this.hideTooltip(true);\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    if (this.listensForHover) {\r\n      this.showTooltip();\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave', ['$event.target'])\r\n  onMouseLeave(target): void {\r\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\r\n      clearTimeout(this.timeout);\r\n\r\n      if (this.component) {\r\n        const contentDom = this.component.instance.element.nativeElement;\r\n        const contains = contentDom.contains(target);\r\n        if (contains) return;\r\n      }\r\n\r\n      this.hideTooltip(this.tooltipImmediateExit);\r\n    }\r\n  }\r\n\r\n  @HostListener('click')\r\n  onMouseClick() {\r\n    if (this.listensForHover) {\r\n      this.hideTooltip(true);\r\n    }\r\n  }\r\n\r\n  showTooltip(immediate?: boolean): void {\r\n    if (this.component || this.tooltipDisabled) return;\r\n\r\n    const time = immediate\r\n      ? 0\r\n      : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\r\n\r\n    clearTimeout(this.timeout);\r\n    this.timeout = setTimeout(() => {\r\n      this.tooltipService.destroyAll();\r\n\r\n      const options = this.createBoundOptions();\r\n      this.component = this.tooltipService.create(options);\r\n\r\n      // add a tiny timeout to avoid event re-triggers\r\n      setTimeout(() => {\r\n        if (this.component) {\r\n          this.addHideListeners(this.component.instance.element.nativeElement);\r\n        }\r\n      }, 10);\r\n\r\n      this.show.emit(true);\r\n    }, time);\r\n  }\r\n\r\n  addHideListeners(tooltip): void {\r\n    // on mouse enter, cancel the hide triggered by the leave\r\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\r\n      clearTimeout(this.timeout);\r\n    });\r\n\r\n    // content mouse leave listener\r\n    if (this.tooltipCloseOnMouseLeave) {\r\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\r\n        this.hideTooltip(this.tooltipImmediateExit);\r\n      });\r\n    }\r\n\r\n    // content close on click outside\r\n    if (this.tooltipCloseOnClickOutside) {\r\n      this.documentClickEvent = this.renderer.listen(document, 'click', event => {\r\n        const contains = tooltip.contains(event.target);\r\n        if (!contains) this.hideTooltip();\r\n      });\r\n    }\r\n  }\r\n\r\n  hideTooltip(immediate: boolean = false): void {\r\n    if (!this.component) return;\r\n\r\n    const destroyFn = () => {\r\n      // remove events\r\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\r\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\r\n      if (this.documentClickEvent) this.documentClickEvent();\r\n\r\n      // emit events\r\n      this.hide.emit(true);\r\n\r\n      // destroy component\r\n      this.tooltipService.destroy(this.component);\r\n      this.component = undefined;\r\n    };\r\n\r\n    clearTimeout(this.timeout);\r\n    if (!immediate) {\r\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\r\n    } else {\r\n      destroyFn();\r\n    }\r\n  }\r\n\r\n  private createBoundOptions(): any {\r\n    return {\r\n      title: this.tooltipTitle,\r\n      template: this.tooltipTemplate,\r\n      host: this.viewContainerRef.element,\r\n      placement: this.tooltipPlacement,\r\n      alignment: this.tooltipAlignment,\r\n      type: this.tooltipType,\r\n      showCaret: this.tooltipShowCaret,\r\n      cssClass: this.tooltipCssClass,\r\n      spacing: this.tooltipSpacing,\r\n      context: this.tooltipContext\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TooltipDirective } from './tooltip.directive';\r\nimport { TooltipContentComponent } from './tooltip.component';\r\nimport { TooltipService } from './tooltip.service';\r\n\r\nimport { InjectionService } from './injection.service';\r\n\r\n@NgModule({\r\n  declarations: [TooltipContentComponent, TooltipDirective],\r\n  providers: [InjectionService, TooltipService],\r\n  exports: [TooltipContentComponent, TooltipDirective],\r\n  imports: [CommonModule],\r\n  entryComponents: [TooltipContentComponent]\r\n})\r\nexport class TooltipModule {}\r\n","/**\r\n * Formats a label given a date, number or string.\r\n *\r\n * @export\r\n */\r\nexport function formatLabel(label: any): string {\r\n  if (label instanceof Date) {\r\n    label = label.toLocaleDateString();\r\n  } else {\r\n    label = label.toLocaleString();\r\n  }\r\n\r\n  return label;\r\n}\r\n\r\n/**\r\n * Escapes a label.\r\n *\r\n * @export\r\n */\r\nexport function escapeLabel(label: any): string {\r\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\r\n    return {\r\n      '&': '&amp;',\r\n      // tslint:disable-next-line: quotemark\r\n      \"'\": '&#x27;',\r\n      '`': '&#x60;',\r\n      '\"': '&quot;',\r\n      '<': '&lt;',\r\n      '>': '&gt;'\r\n    }[match];\r\n  });\r\n}\r\n","const cache = {};\r\n\r\n/**\r\n * Generates a short id.\r\n *\r\n * Description:\r\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\r\n *   This should only be used for JavaScript specific models.\r\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n *\r\n *   Example: `ebgf`\r\n */\r\nexport function id(): string {\r\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n\r\n  // append a 'a' because neo gets mad\r\n  newId = `a${newId}`;\r\n\r\n  // ensure not already used\r\n  if (!cache[newId]) {\r\n    cache[newId] = true;\r\n    return newId;\r\n  }\r\n\r\n  return id();\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { id } from '../utils/id';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-circle-series]',\r\n  template: `\r\n    <svg:g *ngIf=\"circle\">\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-linear-gradient\r\n          orientation=\"vertical\"\r\n          [name]=\"gradientId\"\r\n          [stops]=\"circle.gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:rect\r\n        *ngIf=\"barVisible && type === 'standard'\"\r\n        [@animationState]=\"'active'\"\r\n        [attr.x]=\"circle.cx - circle.radius\"\r\n        [attr.y]=\"circle.cy\"\r\n        [attr.width]=\"circle.radius * 2\"\r\n        [attr.height]=\"circle.height\"\r\n        [attr.fill]=\"gradientFill\"\r\n        class=\"tooltip-bar\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-circle\r\n        class=\"circle\"\r\n        [cx]=\"circle.cx\"\r\n        [cy]=\"circle.cy\"\r\n        [r]=\"circle.radius\"\r\n        [fill]=\"circle.color\"\r\n        [class.active]=\"isActive({ name: circle.seriesName })\"\r\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\r\n        [data]=\"circle.value\"\r\n        [classNames]=\"circle.classNames\"\r\n        (select)=\"onClick(circle.data)\"\r\n        (activate)=\"activateCircle()\"\r\n        (deactivate)=\"deactivateCircle()\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"circle.data\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0\r\n        }),\r\n        animate(250, style({ opacity: 1 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class CircleSeriesComponent implements OnChanges, OnInit {\r\n  @Input() data;\r\n  @Input() type = 'standard';\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors: ColorHelper;\r\n  @Input() scaleType;\r\n  @Input() visibleValue;\r\n  @Input() activeEntries: any[];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  areaPath: any;\r\n  circle: any; // active circle\r\n  barVisible: boolean = false;\r\n  gradientId: string;\r\n  gradientFill: string;\r\n\r\n  ngOnInit() {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.circle = this.getActiveCircle();\r\n  }\r\n\r\n  getActiveCircle(): {} {\r\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\r\n      const label = d.name;\r\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\r\n    });\r\n\r\n    if (indexActiveDataPoint === -1) {\r\n      // No valid point is 'active/hovered over' at this moment.\r\n      return undefined;\r\n    }\r\n\r\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\r\n  }\r\n\r\n  mapDataPointToCircle(d: any, i: number): any {\r\n    const seriesName = this.data.name;\r\n\r\n    const value = d.value;\r\n    const label = d.name;\r\n    const tooltipLabel = formatLabel(label);\r\n\r\n    let cx;\r\n    if (this.scaleType === 'time') {\r\n      cx = this.xScale(label);\r\n    } else if (this.scaleType === 'linear') {\r\n      cx = this.xScale(Number(label));\r\n    } else {\r\n      cx = this.xScale(label);\r\n    }\r\n\r\n    const cy = this.yScale(this.type === 'standard' ? value : d.d1);\r\n    const radius = 5;\r\n    const height = this.yScale.range()[0] - cy;\r\n    const opacity = 1;\r\n\r\n    let color;\r\n    if (this.colors.scaleType === 'linear') {\r\n      if (this.type === 'standard') {\r\n        color = this.colors.getColor(value);\r\n      } else {\r\n        color = this.colors.getColor(d.d1);\r\n      }\r\n    } else {\r\n      color = this.colors.getColor(seriesName);\r\n    }\r\n\r\n    const data = Object.assign({}, d, {\r\n      series: seriesName,\r\n      value,\r\n      name: label\r\n    });\r\n\r\n    return {\r\n      classNames: [`circle-data-${i}`],\r\n      value,\r\n      label,\r\n      data,\r\n      cx,\r\n      cy,\r\n      radius,\r\n      height,\r\n      tooltipLabel,\r\n      color,\r\n      opacity,\r\n      seriesName,\r\n      gradientStops: this.getGradientStops(color),\r\n      min: d.min,\r\n      max: d.max\r\n    };\r\n  }\r\n\r\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} â¢ ${escapeLabel(tooltipLabel)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\r\n    `;\r\n  }\r\n\r\n  getTooltipMinMaxText(min: any, max: any) {\r\n    if (min !== undefined || max !== undefined) {\r\n      let result = ' (';\r\n      if (min !== undefined) {\r\n        if (max === undefined) {\r\n          result += 'â¥';\r\n        }\r\n        result += min.toLocaleString();\r\n        if (max !== undefined) {\r\n          result += ' - ';\r\n        }\r\n      } else if (max !== undefined) {\r\n        result += 'â¤';\r\n      }\r\n      if (max !== undefined) {\r\n        result += max.toLocaleString();\r\n      }\r\n      result += ')';\r\n      return result;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  getGradientStops(color) {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color,\r\n        opacity: 0.2\r\n      },\r\n      {\r\n        offset: 100,\r\n        color,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  activateCircle(): void {\r\n    this.barVisible = true;\r\n    this.activate.emit({ name: this.data.name });\r\n  }\r\n\r\n  deactivateCircle(): void {\r\n    this.barVisible = false;\r\n    this.circle.opacity = 0;\r\n    this.deactivate.emit({ name: this.data.name });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  HostListener\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-circle]',\r\n  template: `\r\n    <svg:circle\r\n      [attr.cx]=\"cx\"\r\n      [attr.cy]=\"cy\"\r\n      [attr.r]=\"r\"\r\n      [attr.fill]=\"fill\"\r\n      [attr.stroke]=\"stroke\"\r\n      [attr.opacity]=\"circleOpacity\"\r\n      [attr.class]=\"classNames\"\r\n      [attr.pointer-events]=\"pointerEvents\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CircleComponent implements OnChanges {\r\n  @Input() cx;\r\n  @Input() cy;\r\n  @Input() r;\r\n  @Input() fill;\r\n  @Input() stroke;\r\n  @Input() data;\r\n  @Input() classNames;\r\n  @Input() circleOpacity;\r\n  @Input() pointerEvents;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\r\n    this.classNames += 'circle';\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-grid-panel]',\r\n  template: `\r\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GridPanelComponent {\r\n  @Input() path;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() x;\r\n  @Input() y;\r\n}\r\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-grid-panel-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-grid-panel\r\n      *ngFor=\"let gridPanel of gridPanels\"\r\n      [height]=\"gridPanel.height\"\r\n      [width]=\"gridPanel.width\"\r\n      [x]=\"gridPanel.x\"\r\n      [y]=\"gridPanel.y\"\r\n      [class.grid-panel]=\"true\"\r\n      [class.odd]=\"gridPanel.class === 'odd'\"\r\n      [class.even]=\"gridPanel.class === 'even'\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GridPanelSeriesComponent implements OnChanges {\r\n  gridPanels: any[];\r\n\r\n  @Input()\r\n  data;\r\n\r\n  @Input()\r\n  dims;\r\n\r\n  @Input()\r\n  xScale;\r\n\r\n  @Input()\r\n  yScale;\r\n\r\n  @Input()\r\n  orient;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.gridPanels = this.getGridPanels();\r\n  }\r\n\r\n  getGridPanels(): any[] {\r\n    return this.data.map(d => {\r\n      let offset;\r\n      let width;\r\n      let height;\r\n      let x;\r\n      let y;\r\n      let className = 'odd';\r\n\r\n      if (this.orient === 'vertical') {\r\n        const position: number = this.xScale(d.name);\r\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\r\n\r\n        if (positionIndex % 2 === 1) {\r\n          className = 'even';\r\n        }\r\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\r\n        width = this.xScale.bandwidth() + offset;\r\n        height = this.dims.height;\r\n        x = this.xScale(d.name) - offset / 2;\r\n        y = 0;\r\n      } else if (this.orient === 'horizontal') {\r\n        const position = this.yScale(d.name);\r\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\r\n\r\n        if (positionIndex % 2 === 1) {\r\n          className = 'even';\r\n        }\r\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\r\n\r\n        width = this.dims.width;\r\n        height = this.yScale.bandwidth() + offset;\r\n        x = 0;\r\n        y = this.yScale(d.name) - offset / 2;\r\n      }\r\n\r\n      return {\r\n        name: d.name,\r\n        class: className,\r\n        height,\r\n        width,\r\n        x,\r\n        y\r\n      };\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-svg-linear-gradient]',\r\n  template: `\r\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\r\n      <svg:stop\r\n        *ngFor=\"let stop of stops\"\r\n        [attr.offset]=\"stop.offset + '%'\"\r\n        [style.stop-color]=\"stop.color\"\r\n        [style.stop-opacity]=\"stop.opacity\"\r\n      />\r\n    </svg:linearGradient>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SvgLinearGradientComponent implements OnChanges {\r\n  @Input() orientation = 'vertical';\r\n  @Input() name;\r\n  @Input() stops: any[];\r\n\r\n  x1: any;\r\n  x2: any;\r\n  y1: any;\r\n  y2: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.x1 = '0%';\r\n    this.x2 = '0%';\r\n    this.y1 = '0%';\r\n    this.y2 = '0%';\r\n\r\n    if (this.orientation === 'horizontal') {\r\n      this.x2 = '100%';\r\n    } else if (this.orientation === 'vertical') {\r\n      this.y1 = '100%';\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-svg-radial-gradient]',\r\n  template: `\r\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\r\n      <svg:stop\r\n        *ngFor=\"let stop of stops\"\r\n        [attr.offset]=\"stop.offset + '%'\"\r\n        [style.stop-color]=\"stop.color\"\r\n        [style.stop-opacity]=\"stop.opacity\"\r\n      />\r\n    </svg:radialGradient>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SvgRadialGradientComponent implements OnChanges {\r\n  @Input() color: string;\r\n  @Input() name: string;\r\n  @Input() startOpacity: number;\r\n  @Input() endOpacity = 1;\r\n  @Input() cx: number = 0;\r\n  @Input() cy: number = 0;\r\n\r\n  @Input()\r\n  get stops(): any[] {\r\n    return this.stopsInput || this.stopsDefault;\r\n  }\r\n\r\n  set stops(value: any[]) {\r\n    this.stopsInput = value;\r\n  }\r\n\r\n  r: string;\r\n\r\n  private stopsInput: any[];\r\n  private stopsDefault: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.r = '30%';\r\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\r\n      this.stopsDefault = [\r\n        {\r\n          offset: 0,\r\n          color: this.color,\r\n          opacity: this.startOpacity\r\n        },\r\n        {\r\n          offset: 100,\r\n          color: this.color,\r\n          opacity: this.endOpacity\r\n        }\r\n      ];\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-area]',\r\n  template: `\r\n    <svg:defs *ngIf=\"gradient\">\r\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n    </svg:defs>\r\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AreaComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() path;\r\n  @Input() startingPath;\r\n  @Input() fill;\r\n  @Input() opacity = 1;\r\n  @Input() startOpacity = 0.5;\r\n  @Input() endOpacity = 1;\r\n  @Input() activeLabel;\r\n  @Input() gradient: boolean = false;\r\n  @Input() stops: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  gradientId: string;\r\n  gradientFill: string;\r\n  areaPath: string;\r\n  initialized: boolean = false;\r\n  gradientStops: any[];\r\n  hasGradient: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.initialized) {\r\n      this.loadAnimation();\r\n      this.initialized = true;\r\n    } else {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n\r\n    if (this.gradient || this.stops) {\r\n      this.gradientStops = this.getGradient();\r\n      this.hasGradient = true;\r\n    } else {\r\n      this.hasGradient = false;\r\n    }\r\n\r\n    this.updatePathEl();\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    this.areaPath = this.startingPath;\r\n    setTimeout(this.update.bind(this), 100);\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element).select('.area');\r\n\r\n    if (this.animations) {\r\n      node.transition().duration(750).attr('d', this.path);\r\n    } else {\r\n      node.attr('d', this.path);\r\n    }\r\n  }\r\n\r\n  getGradient() {\r\n    if (this.stops) {\r\n      return this.stops;\r\n    }\r\n\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.startOpacity\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: this.endOpacity\r\n      }\r\n    ];\r\n  }\r\n}\r\n","// Robert Penner's easeOutExpo\r\nfunction easeOutExpo(t, b, c, d) {\r\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\r\n}\r\n\r\n/**\r\n * Counts from a number to the end incrementally.\r\n */\r\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\r\n  const startVal = Number(countFrom);\r\n  const endVal = Number(countTo);\r\n  const countDown = startVal > endVal;\r\n  const decimals = Math.max(0, countDecimals);\r\n  const dec = Math.pow(10, decimals);\r\n  const duration = Number(countDuration) * 1000;\r\n  let startTime;\r\n\r\n  function runCount(timestamp) {\r\n    let frameVal;\r\n    const progress = timestamp - startTime;\r\n\r\n    if (countDown) {\r\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\r\n    } else {\r\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\r\n    }\r\n\r\n    if (countDown) {\r\n      frameVal = frameVal < endVal ? endVal : frameVal;\r\n    } else {\r\n      frameVal = frameVal > endVal ? endVal : frameVal;\r\n    }\r\n\r\n    frameVal = Math.round(frameVal * dec) / dec;\r\n\r\n    const tick = progress < duration;\r\n    callback({\r\n      value: frameVal,\r\n      progress,\r\n      timestamp,\r\n      finished: !tick\r\n    });\r\n\r\n    if (tick) {\r\n      return requestAnimationFrame(val => runCount(val));\r\n    }\r\n  }\r\n\r\n  return requestAnimationFrame(timestamp => {\r\n    startTime = timestamp;\r\n    return runCount(timestamp);\r\n  });\r\n}\r\n\r\n/**\r\n * Determine decimals places\r\n *\r\n * @export\r\n */\r\nexport function decimalChecker(countTo) {\r\n  const endVal = Number(countTo);\r\n\r\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\r\n    return 2;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","declare let global: any;\r\n\r\n// If we don't check whether 'window' and 'global' variables are defined,\r\n// code will fail in browser/node with 'variable is undefined' error.\r\nlet root: any;\r\nif (typeof window !== 'undefined') {\r\n  root = window;\r\n} else if (typeof global !== 'undefined') {\r\n  root = global;\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\r\n  prototype?: MouseEvent;\r\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\r\n};\r\n\r\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\r\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\r\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\r\n  if (typeof MouseEvent === 'function') {\r\n    // Sane browsers\r\n    return new MouseEvent(name, { bubbles, cancelable });\r\n  } else {\r\n    // IE\r\n    const event = document.createEvent('MouseEvent');\r\n    event.initEvent(name, bubbles, cancelable);\r\n    return event;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\r\nimport { count, decimalChecker } from './count.helper';\r\n\r\n/**\r\n * Count up component\r\n *\r\n * Loosely inspired by:\r\n *  - https://github.com/izupet/angular2-counto\r\n *  - https://inorganik.github.io/countUp.js/\r\n *\r\n * @export\r\n */\r\n@Component({\r\n  selector: '[ngx-charts-count-up]',\r\n  template: ` {{ value }} `\r\n})\r\nexport class CountUpDirective implements OnDestroy {\r\n  @Input() countDuration: number = 1;\r\n  @Input() countPrefix: string = '';\r\n  @Input() countSuffix: string = '';\r\n  @Input() valueFormatting: any;\r\n\r\n  @Input()\r\n  set countDecimals(val: number) {\r\n    this._countDecimals = val;\r\n  }\r\n\r\n  get countDecimals(): number {\r\n    if (this._countDecimals) return this._countDecimals;\r\n    return decimalChecker(this.countTo);\r\n  }\r\n\r\n  @Input()\r\n  set countTo(val) {\r\n    this._countTo = parseFloat(val);\r\n    this.start();\r\n  }\r\n\r\n  get countTo(): any {\r\n    return this._countTo;\r\n  }\r\n\r\n  @Input()\r\n  set countFrom(val) {\r\n    this._countFrom = parseFloat(val);\r\n    this.start();\r\n  }\r\n\r\n  get countFrom(): any {\r\n    return this._countFrom;\r\n  }\r\n\r\n  @Output() countChange = new EventEmitter();\r\n  @Output() countFinish = new EventEmitter();\r\n\r\n  nativeElement: any;\r\n\r\n  value: any = '';\r\n  formattedValue: string;\r\n\r\n  private animationReq: any;\r\n\r\n  private _countDecimals: number = 0;\r\n  private _countTo: number = 0;\r\n  private _countFrom: number = 0;\r\n\r\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\r\n    this.nativeElement = element.nativeElement;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n  }\r\n\r\n  start(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n\r\n    const valueFormatting =\r\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\r\n\r\n    const callback = ({ value, progress, finished }) => {\r\n      this.value = valueFormatting(value);\r\n      this.cd.markForCheck();\r\n      if (!finished) this.countChange.emit({ value: this.value, progress });\r\n      if (finished) this.countFinish.emit({ value: this.value, progress });\r\n    };\r\n\r\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { createMouseEvent } from '../events';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tooltip-area]',\r\n  template: `\r\n    <svg:g>\r\n      <svg:rect\r\n        class=\"tooltip-area\"\r\n        [attr.x]=\"0\"\r\n        y=\"0\"\r\n        [attr.width]=\"dims.width\"\r\n        [attr.height]=\"dims.height\"\r\n        style=\"opacity: 0; cursor: 'auto';\"\r\n        (mousemove)=\"mouseMove($event)\"\r\n        (mouseleave)=\"hideTooltip()\"\r\n      />\r\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\r\n        <xhtml:div class=\"area-tooltip-container\">\r\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\r\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\r\n            {{ getToolTipText(tooltipItem) }}\r\n          </xhtml:div>\r\n        </xhtml:div>\r\n      </ng-template>\r\n      <svg:rect\r\n        #tooltipAnchor\r\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\r\n        class=\"tooltip-anchor\"\r\n        [attr.x]=\"anchorPos\"\r\n        y=\"0\"\r\n        [attr.width]=\"1\"\r\n        [attr.height]=\"dims.height\"\r\n        [style.opacity]=\"anchorOpacity\"\r\n        [style.pointer-events]=\"'none'\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'right'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipSpacing]=\"15\"\r\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\r\n        [tooltipContext]=\"anchorValues\"\r\n        [tooltipImmediateExit]=\"true\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition('inactive => active', [\r\n        style({\r\n          opacity: 0\r\n        }),\r\n        animate(250, style({ opacity: 0.7 }))\r\n      ]),\r\n      transition('active => inactive', [\r\n        style({\r\n          opacity: 0.7\r\n        }),\r\n        animate(250, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class TooltipArea {\r\n  anchorOpacity: number = 0;\r\n  anchorPos: number = -1;\r\n  anchorValues: any[] = [];\r\n  lastAnchorPos: number;\r\n\r\n  @Input() dims;\r\n  @Input() xSet;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() results;\r\n  @Input() colors;\r\n  @Input() showPercentage: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() hover = new EventEmitter();\r\n\r\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\r\n\r\n  getValues(xVal): any[] {\r\n    const results = [];\r\n\r\n    for (const group of this.results) {\r\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\r\n      let groupName = group.name;\r\n      if (groupName instanceof Date) {\r\n        groupName = groupName.toLocaleDateString();\r\n      }\r\n\r\n      if (item) {\r\n        const label = item.name;\r\n        let val = item.value;\r\n        if (this.showPercentage) {\r\n          val = (item.d1 - item.d0).toFixed(2) + '%';\r\n        }\r\n        let color;\r\n        if (this.colors.scaleType === 'linear') {\r\n          let v = val;\r\n          if (item.d1) {\r\n            v = item.d1;\r\n          }\r\n          color = this.colors.getColor(v);\r\n        } else {\r\n          color = this.colors.getColor(group.name);\r\n        }\r\n\r\n        const data = Object.assign({}, item, {\r\n          value: val,\r\n          name: label,\r\n          series: groupName,\r\n          min: item.min,\r\n          max: item.max,\r\n          color\r\n        });\r\n\r\n        results.push(data);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  mouseMove(event) {\r\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\r\n\r\n    const closestIndex = this.findClosestPointIndex(xPos);\r\n    const closestPoint = this.xSet[closestIndex];\r\n    this.anchorPos = this.xScale(closestPoint);\r\n    this.anchorPos = Math.max(0, this.anchorPos);\r\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\r\n\r\n    this.anchorValues = this.getValues(closestPoint);\r\n    if (this.anchorPos !== this.lastAnchorPos) {\r\n      const ev = createMouseEvent('mouseleave');\r\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\r\n      this.anchorOpacity = 0.7;\r\n      this.hover.emit({\r\n        value: closestPoint\r\n      });\r\n      this.showTooltip();\r\n\r\n      this.lastAnchorPos = this.anchorPos;\r\n    }\r\n  }\r\n\r\n  findClosestPointIndex(xPos) {\r\n    let minIndex = 0;\r\n    let maxIndex = this.xSet.length - 1;\r\n    let minDiff = Number.MAX_VALUE;\r\n    let closestIndex = 0;\r\n\r\n    while (minIndex <= maxIndex) {\r\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\r\n      const currentElement = this.xScale(this.xSet[currentIndex]);\r\n\r\n      const curDiff = Math.abs(currentElement - xPos);\r\n\r\n      if (curDiff < minDiff) {\r\n        minDiff = curDiff;\r\n        closestIndex = currentIndex;\r\n      }\r\n\r\n      if (currentElement < xPos) {\r\n        minIndex = currentIndex + 1;\r\n      } else if (currentElement > xPos) {\r\n        maxIndex = currentIndex - 1;\r\n      } else {\r\n        minDiff = 0;\r\n        closestIndex = currentIndex;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return closestIndex;\r\n  }\r\n\r\n  showTooltip(): void {\r\n    const event = createMouseEvent('mouseenter');\r\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\r\n  }\r\n\r\n  hideTooltip(): void {\r\n    const event = createMouseEvent('mouseleave');\r\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\r\n    this.anchorOpacity = 0;\r\n    this.lastAnchorPos = -1;\r\n  }\r\n\r\n  getToolTipText(tooltipItem: any): string {\r\n    let result: string = '';\r\n    if (tooltipItem.series !== undefined) {\r\n      result += tooltipItem.series;\r\n    } else {\r\n      result += '???';\r\n    }\r\n    result += ': ';\r\n    if (tooltipItem.value !== undefined) {\r\n      result += tooltipItem.value.toLocaleString();\r\n    }\r\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\r\n      result += ' (';\r\n      if (tooltipItem.min !== undefined) {\r\n        if (tooltipItem.max === undefined) {\r\n          result += 'â¥';\r\n        }\r\n        result += tooltipItem.min.toLocaleString();\r\n        if (tooltipItem.max !== undefined) {\r\n          result += ' - ';\r\n        }\r\n      } else if (tooltipItem.max !== undefined) {\r\n        result += 'â¤';\r\n      }\r\n      if (tooltipItem.max !== undefined) {\r\n        result += tooltipItem.max.toLocaleString();\r\n      }\r\n      result += ')';\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { brushX } from 'd3-brush';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { select, event as d3event } from 'd3-selection';\r\nimport { id } from '../..//utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-timeline]',\r\n  template: `\r\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\r\n      <svg:filter [attr.id]=\"filterId\">\r\n        <svg:feColorMatrix\r\n          in=\"SourceGraphic\"\r\n          type=\"matrix\"\r\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\r\n        />\r\n      </svg:filter>\r\n      <svg:g class=\"embedded-chart\">\r\n        <ng-content></ng-content>\r\n      </svg:g>\r\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\r\n      <svg:g class=\"brush\"></svg:g>\r\n    </svg:g>\r\n  `,\r\n  styleUrls: ['./timeline.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class Timeline implements OnChanges {\r\n  @Input() view;\r\n  @Input() state;\r\n  @Input() results;\r\n  @Input() scheme;\r\n  @Input() customColors;\r\n  @Input() legend;\r\n  @Input() miniChart;\r\n  @Input() autoScale;\r\n  @Input() scaleType;\r\n  @Input() height: number = 50;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() onDomainChange = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  dims: any;\r\n  xDomain: any[];\r\n  xScale: any;\r\n  brush: any;\r\n  transform: string;\r\n  initialized: boolean = false;\r\n  filterId: any;\r\n  filter: any;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n\r\n    if (!this.initialized) {\r\n      this.addBrush();\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    this.dims = this.getDims();\r\n    this.height = this.dims.height;\r\n    const offsetY = this.view[1] - this.height;\r\n\r\n    this.xDomain = this.getXDomain();\r\n    this.xScale = this.getXScale();\r\n\r\n    if (this.brush) {\r\n      this.updateBrush();\r\n    }\r\n\r\n    this.transform = `translate(0 , ${offsetY})`;\r\n\r\n    this.filterId = 'filter' + id().toString();\r\n    this.filter = `url(#${this.filterId})`;\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.name)) {\r\n          values.push(d.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    let domain = [];\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n    } else {\r\n      domain = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getXScale() {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\r\n    }\r\n\r\n    return scale;\r\n  }\r\n\r\n  addBrush(): void {\r\n    if (this.brush) return;\r\n\r\n    const height = this.height;\r\n    const width = this.view[0];\r\n\r\n    this.brush = brushX()\r\n      .extent([\r\n        [0, 0],\r\n        [width, height]\r\n      ])\r\n      .on('brush end', () => {\r\n        const selection = d3event.selection || this.xScale.range();\r\n        const newDomain = selection.map(this.xScale.invert);\r\n\r\n        this.onDomainChange.emit(newDomain);\r\n        this.cd.markForCheck();\r\n      });\r\n\r\n    select(this.element).select('.brush').call(this.brush);\r\n  }\r\n\r\n  updateBrush(): void {\r\n    if (!this.brush) return;\r\n\r\n    const height = this.height;\r\n    const width = this.view[0];\r\n\r\n    this.brush.extent([\r\n      [0, 0],\r\n      [width, height]\r\n    ]);\r\n    select(this.element).select('.brush').call(this.brush);\r\n\r\n    // clear hardcoded properties so they can be defined by CSS\r\n    select(this.element)\r\n      .select('.selection')\r\n      .attr('fill', undefined)\r\n      .attr('stroke', undefined)\r\n      .attr('fill-opacity', undefined);\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getDims(): any {\r\n    const width = this.view[0];\r\n\r\n    const dims = {\r\n      width,\r\n      height: this.height\r\n    };\r\n\r\n    return dims;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectorRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { formatLabel } from '../label.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-legend',\r\n  template: `\r\n    <div [style.width.px]=\"width\">\r\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\r\n        <span class=\"legend-title-text\">{{ title }}</span>\r\n      </header>\r\n      <div class=\"legend-wrap\">\r\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\r\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\r\n            <ngx-charts-legend-entry\r\n              [label]=\"entry.label\"\r\n              [formattedLabel]=\"entry.formattedLabel\"\r\n              [color]=\"entry.color\"\r\n              [isActive]=\"isActive(entry)\"\r\n              (select)=\"labelClick.emit($event)\"\r\n              (activate)=\"activate($event)\"\r\n              (deactivate)=\"deactivate($event)\"\r\n            >\r\n            </ngx-charts-legend-entry>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LegendComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() title;\r\n  @Input() colors;\r\n  @Input() height;\r\n  @Input() width;\r\n  @Input() activeEntries;\r\n  @Input() horizontal = false;\r\n\r\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  legendEntries: any[] = [];\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.cd.markForCheck();\r\n    this.legendEntries = this.getLegendEntries();\r\n  }\r\n\r\n  getLegendEntries(): any[] {\r\n    const items = [];\r\n\r\n    for (const label of this.data) {\r\n      const formattedLabel = formatLabel(label);\r\n\r\n      const idx = items.findIndex(i => {\r\n        return i.label === formattedLabel;\r\n      });\r\n\r\n      if (idx === -1) {\r\n        items.push({\r\n          label,\r\n          formattedLabel,\r\n          color: this.colors.getColor(label)\r\n        });\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.label === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  activate(item) {\r\n    this.labelActivate.emit(item);\r\n  }\r\n\r\n  deactivate(item) {\r\n    this.labelDeactivate.emit(item);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.label;\r\n  }\r\n}\r\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-legend-entry',\r\n  template: `\r\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\r\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\r\n      <span class=\"legend-label-text\">\r\n        {{ trimmedLabel }}\r\n      </span>\r\n    </span>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LegendEntryComponent {\r\n  @Input() color: string;\r\n  @Input() label: any;\r\n  @Input() formattedLabel: string;\r\n  @Input() isActive: boolean = false;\r\n\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  get trimmedLabel(): string {\r\n    return this.formattedLabel || '(empty)';\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit({ name: this.label });\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit({ name: this.label });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-scale-legend',\r\n  template: `\r\n    <div\r\n      class=\"scale-legend\"\r\n      [class.horizontal-legend]=\"horizontal\"\r\n      [style.height.px]=\"horizontal ? undefined : height\"\r\n      [style.width.px]=\"width\"\r\n    >\r\n      <div class=\"scale-legend-label\">\r\n        <span>{{ valueRange[1].toLocaleString() }}</span>\r\n      </div>\r\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\r\n      <div class=\"scale-legend-label\">\r\n        <span>{{ valueRange[0].toLocaleString() }}</span>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./scale-legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScaleLegendComponent implements OnChanges {\r\n  @Input() valueRange;\r\n  @Input() colors;\r\n  @Input() height;\r\n  @Input() width;\r\n  @Input() horizontal = false;\r\n\r\n  gradient: any;\r\n\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\r\n    const direction = this.horizontal ? 'right' : 'bottom';\r\n    this.gradient = this.sanitizer.bypassSecurityTrustStyle(`linear-gradient(to ${direction}, ${gradientValues})`);\r\n  }\r\n\r\n  /**\r\n   * Generates the string used in the gradient stylesheet properties\r\n   * @param colors array of colors\r\n   * @param splits array of splits on a scale of (0, 1)\r\n   */\r\n  gradientString(colors, splits): string {\r\n    // add the 100%\r\n    splits.push(1);\r\n    const pairs = [];\r\n    colors.reverse().forEach((c, i) => {\r\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\r\n    });\r\n\r\n    return pairs.join(', ');\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { formatLabel } from '../label.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-advanced-legend',\r\n  template: `\r\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\r\n      <div\r\n        *ngIf=\"animations\"\r\n        class=\"total-value\"\r\n        ngx-charts-count-up\r\n        [countTo]=\"roundedTotal\"\r\n        [valueFormatting]=\"valueFormatting\"\r\n      ></div>\r\n      <div class=\"total-value\" *ngIf=\"!animations\">\r\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\r\n      </div>\r\n      <div class=\"total-label\">\r\n        {{ label }}\r\n      </div>\r\n      <div class=\"legend-items-container\">\r\n        <div class=\"legend-items\">\r\n          <div\r\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\r\n            tabindex=\"-1\"\r\n            class=\"legend-item\"\r\n            (mouseenter)=\"activate.emit(legendItem.data)\"\r\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\r\n            (click)=\"select.emit(legendItem.data)\"\r\n          >\r\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\r\n            <div\r\n              *ngIf=\"animations\"\r\n              class=\"item-value\"\r\n              ngx-charts-count-up\r\n              [countTo]=\"legendItem._value\"\r\n              [valueFormatting]=\"valueFormatting\"\r\n            ></div>\r\n            <div *ngIf=\"!animations\" class=\"item-value\">\r\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\r\n            </div>\r\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\r\n            <div\r\n              *ngIf=\"animations\"\r\n              class=\"item-percent\"\r\n              ngx-charts-count-up\r\n              [countTo]=\"legendItem.percentage\"\r\n              [countSuffix]=\"'%'\"\r\n            ></div>\r\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./advanced-legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AdvancedLegendComponent implements OnChanges {\r\n  @Input() width: number;\r\n  @Input() data;\r\n  @Input() colors;\r\n  @Input() label: string = 'Total';\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  legendItems: any[] = [];\r\n  total: number;\r\n  roundedTotal: number;\r\n\r\n  @Input() valueFormatting: (value: number) => any;\r\n  @Input() labelFormatting: (value: string) => any = label => label;\r\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\r\n\r\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getTotal(): number {\r\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n  }\r\n\r\n  update(): void {\r\n    this.total = this.getTotal();\r\n    this.roundedTotal = this.total;\r\n\r\n    this.legendItems = this.getLegendItems();\r\n  }\r\n\r\n  getLegendItems(): any {\r\n    return this.data.map(d => {\r\n      const label = formatLabel(d.name);\r\n      const value = d.value;\r\n      const color = this.colors.getColor(label);\r\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\r\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\r\n\r\n      return {\r\n        _value: value,\r\n        data: d,\r\n        value,\r\n        color,\r\n        label: formattedLabel,\r\n        displayLabel: trimLabel(formattedLabel, 20),\r\n        origialLabel: d.name,\r\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\r\n      };\r\n    });\r\n  }\r\n\r\n  trackBy(item) {\r\n    return item.formattedLabel;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ChartComponent } from './charts/chart.component';\r\nimport { BaseChartComponent } from './base-chart.component';\r\nimport { AxesModule } from './axes/axes.module';\r\nimport { TooltipModule } from './tooltip/tooltip.module';\r\nimport { CircleSeriesComponent } from './circle-series.component';\r\nimport { CircleComponent } from './circle.component';\r\nimport { GridPanelComponent } from './grid-panel.component';\r\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\r\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\r\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\r\nimport { AreaComponent } from './area.component';\r\nimport { CountUpDirective } from './count/count.directive';\r\nimport { TooltipArea } from './tooltip-area.component';\r\nimport { Timeline } from './timeline/timeline.component';\r\nimport { VisibilityObserver } from '../utils/visibility-observer';\r\nimport { LegendComponent } from './legend/legend.component';\r\nimport { LegendEntryComponent } from './legend/legend-entry.component';\r\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\r\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\r\n\r\nconst COMPONENTS = [\r\n  AreaComponent,\r\n  BaseChartComponent,\r\n  CountUpDirective,\r\n  TooltipArea,\r\n  ChartComponent,\r\n  LegendComponent,\r\n  LegendEntryComponent,\r\n  ScaleLegendComponent,\r\n  CircleComponent,\r\n  CircleSeriesComponent,\r\n  GridPanelComponent,\r\n  GridPanelSeriesComponent,\r\n  SvgLinearGradientComponent,\r\n  SvgRadialGradientComponent,\r\n  Timeline,\r\n  AdvancedLegendComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule, AxesModule, TooltipModule],\r\n  declarations: [...COMPONENTS, VisibilityObserver],\r\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\r\n})\r\nexport class ChartCommonModule {}\r\n","export interface ViewDimensions {\r\n  width: number;\r\n  height: number;\r\n  xOffset: number;\r\n}\r\n\r\nexport function calculateViewDimensions({\r\n  width,\r\n  height,\r\n  margins,\r\n  showXAxis = false,\r\n  showYAxis = false,\r\n  xAxisHeight = 0,\r\n  yAxisWidth = 0,\r\n  showXLabel = false,\r\n  showYLabel = false,\r\n  showLegend = false,\r\n  legendType = 'ordinal',\r\n  legendPosition = 'right',\r\n  columns = 12\r\n}): ViewDimensions {\r\n  let xOffset = margins[3];\r\n  let chartWidth = width;\r\n  let chartHeight = height - margins[0] - margins[2];\r\n\r\n  if (showLegend && legendPosition === 'right') {\r\n    if (legendType === 'ordinal') {\r\n      columns -= 2;\r\n    } else {\r\n      columns -= 1;\r\n    }\r\n  }\r\n\r\n  chartWidth = (chartWidth * columns) / 12;\r\n\r\n  chartWidth = chartWidth - margins[1] - margins[3];\r\n\r\n  if (showXAxis) {\r\n    chartHeight -= 5;\r\n    chartHeight -= xAxisHeight;\r\n\r\n    if (showXLabel) {\r\n      // text height + spacing between axis label and tick labels\r\n      const offset = 25 + 5;\r\n      chartHeight -= offset;\r\n    }\r\n  }\r\n\r\n  if (showYAxis) {\r\n    chartWidth -= 5;\r\n    chartWidth -= yAxisWidth;\r\n    xOffset += yAxisWidth;\r\n    xOffset += 10;\r\n\r\n    if (showYLabel) {\r\n      // text height + spacing between axis label and tick labels\r\n      const offset = 25 + 5;\r\n      chartWidth -= offset;\r\n      xOffset += offset;\r\n    }\r\n  }\r\n\r\n  chartWidth = Math.max(0, chartWidth);\r\n  chartHeight = Math.max(0, chartHeight);\r\n\r\n  return {\r\n    width: Math.floor(chartWidth),\r\n    height: Math.floor(chartHeight),\r\n    xOffset: Math.floor(xOffset)\r\n  };\r\n}\r\n","export let colorSets = [\r\n  {\r\n    name: 'vivid',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#647c8a',\r\n      '#3f51b5',\r\n      '#2196f3',\r\n      '#00b862',\r\n      '#afdf0a',\r\n      '#a7b61a',\r\n      '#f3e562',\r\n      '#ff9800',\r\n      '#ff5722',\r\n      '#ff4514'\r\n    ]\r\n  },\r\n  {\r\n    name: 'natural',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#bf9d76',\r\n      '#e99450',\r\n      '#d89f59',\r\n      '#f2dfa7',\r\n      '#a5d7c6',\r\n      '#7794b1',\r\n      '#afafaf',\r\n      '#707160',\r\n      '#ba9383',\r\n      '#d9d5c3'\r\n    ]\r\n  },\r\n  {\r\n    name: 'cool',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#a8385d',\r\n      '#7aa3e5',\r\n      '#a27ea8',\r\n      '#aae3f5',\r\n      '#adcded',\r\n      '#a95963',\r\n      '#8796c0',\r\n      '#7ed3ed',\r\n      '#50abcc',\r\n      '#ad6886'\r\n    ]\r\n  },\r\n  {\r\n    name: 'fire',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\r\n  },\r\n  {\r\n    name: 'solar',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#fff8e1',\r\n      '#ffecb3',\r\n      '#ffe082',\r\n      '#ffd54f',\r\n      '#ffca28',\r\n      '#ffc107',\r\n      '#ffb300',\r\n      '#ffa000',\r\n      '#ff8f00',\r\n      '#ff6f00'\r\n    ]\r\n  },\r\n  {\r\n    name: 'air',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#e1f5fe',\r\n      '#b3e5fc',\r\n      '#81d4fa',\r\n      '#4fc3f7',\r\n      '#29b6f6',\r\n      '#03a9f4',\r\n      '#039be5',\r\n      '#0288d1',\r\n      '#0277bd',\r\n      '#01579b'\r\n    ]\r\n  },\r\n  {\r\n    name: 'aqua',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#e0f7fa',\r\n      '#b2ebf2',\r\n      '#80deea',\r\n      '#4dd0e1',\r\n      '#26c6da',\r\n      '#00bcd4',\r\n      '#00acc1',\r\n      '#0097a7',\r\n      '#00838f',\r\n      '#006064'\r\n    ]\r\n  },\r\n  {\r\n    name: 'flame',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#A10A28',\r\n      '#D3342D',\r\n      '#EF6D49',\r\n      '#FAAD67',\r\n      '#FDDE90',\r\n      '#DBED91',\r\n      '#A9D770',\r\n      '#6CBA67',\r\n      '#2C9653',\r\n      '#146738'\r\n    ]\r\n  },\r\n  {\r\n    name: 'ocean',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#1D68FB',\r\n      '#33C0FC',\r\n      '#4AFFFE',\r\n      '#AFFFFF',\r\n      '#FFFC63',\r\n      '#FDBD2D',\r\n      '#FC8A25',\r\n      '#FA4F1E',\r\n      '#FA141B',\r\n      '#BA38D1'\r\n    ]\r\n  },\r\n  {\r\n    name: 'forest',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#55C22D',\r\n      '#C1F33D',\r\n      '#3CC099',\r\n      '#AFFFFF',\r\n      '#8CFC9D',\r\n      '#76CFFA',\r\n      '#BA60FB',\r\n      '#EE6490',\r\n      '#C42A1C',\r\n      '#FC9F32'\r\n    ]\r\n  },\r\n  {\r\n    name: 'horizon',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#2597FB',\r\n      '#65EBFD',\r\n      '#99FDD0',\r\n      '#FCEE4B',\r\n      '#FEFCFA',\r\n      '#FDD6E3',\r\n      '#FCB1A8',\r\n      '#EF6F7B',\r\n      '#CB96E8',\r\n      '#EFDEE0'\r\n    ]\r\n  },\r\n  {\r\n    name: 'neons',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#FF3333',\r\n      '#FF33FF',\r\n      '#CC33FF',\r\n      '#0000FF',\r\n      '#33CCFF',\r\n      '#33FFFF',\r\n      '#33FF66',\r\n      '#CCFF33',\r\n      '#FFCC00',\r\n      '#FF6600'\r\n    ]\r\n  },\r\n  {\r\n    name: 'picnic',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#FAC51D',\r\n      '#66BD6D',\r\n      '#FAA026',\r\n      '#29BB9C',\r\n      '#E96B56',\r\n      '#55ACD2',\r\n      '#B7332F',\r\n      '#2C83C9',\r\n      '#9166B8',\r\n      '#92E7E8'\r\n    ]\r\n  },\r\n  {\r\n    name: 'night',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#2B1B5A',\r\n      '#501356',\r\n      '#183356',\r\n      '#28203F',\r\n      '#391B3C',\r\n      '#1E2B3C',\r\n      '#120634',\r\n      '#2D0432',\r\n      '#051932',\r\n      '#453080',\r\n      '#75267D',\r\n      '#2C507D',\r\n      '#4B3880',\r\n      '#752F7D',\r\n      '#35547D'\r\n    ]\r\n  },\r\n  {\r\n    name: 'nightLights',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#4e31a5',\r\n      '#9c25a7',\r\n      '#3065ab',\r\n      '#57468b',\r\n      '#904497',\r\n      '#46648b',\r\n      '#32118d',\r\n      '#a00fb3',\r\n      '#1052a2',\r\n      '#6e51bd',\r\n      '#b63cc3',\r\n      '#6c97cb',\r\n      '#8671c1',\r\n      '#b455be',\r\n      '#7496c3'\r\n    ]\r\n  }\r\n];\r\n","import { range } from 'd3-array';\r\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\r\n\r\nimport { colorSets } from '../utils/color-sets';\r\n\r\nexport class ColorHelper {\r\n  scale: any;\r\n  scaleType: any;\r\n  colorDomain: any[];\r\n  domain: any;\r\n  customColors: any;\r\n\r\n  constructor(scheme, type, domain, customColors?) {\r\n    if (typeof scheme === 'string') {\r\n      scheme = colorSets.find(cs => {\r\n        return cs.name === scheme;\r\n      });\r\n    }\r\n    this.colorDomain = scheme.domain;\r\n    this.scaleType = type;\r\n    this.domain = domain;\r\n    this.customColors = customColors;\r\n\r\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\r\n  }\r\n\r\n  generateColorScheme(scheme, type, domain) {\r\n    if (typeof scheme === 'string') {\r\n      scheme = colorSets.find(cs => {\r\n        return cs.name === scheme;\r\n      });\r\n    }\r\n    let colorScale;\r\n    if (type === 'quantile') {\r\n      colorScale = scaleQuantile().range(scheme.domain).domain(domain);\r\n    } else if (type === 'ordinal') {\r\n      colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\r\n    } else if (type === 'linear') {\r\n      // linear schemes must have at least 2 colors\r\n      const colorDomain = [...scheme.domain];\r\n      if (colorDomain.length === 1) {\r\n        colorDomain.push(colorDomain[0]);\r\n        this.colorDomain = colorDomain;\r\n      }\r\n\r\n      const points = range(0, 1, 1.0 / colorDomain.length);\r\n      colorScale = scaleLinear().domain(points).range(colorDomain);\r\n    }\r\n\r\n    return colorScale;\r\n  }\r\n\r\n  getColor(value) {\r\n    if (value === undefined || value === null) {\r\n      throw new Error('Value can not be null');\r\n    }\r\n    if (this.scaleType === 'linear') {\r\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\r\n\r\n      return this.scale(valueScale(value));\r\n    } else {\r\n      if (typeof this.customColors === 'function') {\r\n        return this.customColors(value);\r\n      }\r\n\r\n      const formattedValue = value.toString();\r\n      let found: any; // todo type customColors\r\n      if (this.customColors && this.customColors.length > 0) {\r\n        found = this.customColors.find(mapping => {\r\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\r\n        });\r\n      }\r\n\r\n      if (found) {\r\n        return found.value;\r\n      } else {\r\n        return this.scale(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  getLinearGradientStops(value, start) {\r\n    if (start === undefined) {\r\n      start = this.domain[0];\r\n    }\r\n\r\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\r\n\r\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\r\n\r\n    const endColor = this.getColor(value);\r\n\r\n    // generate the stops\r\n    const startVal = valueScale(start);\r\n    const startColor = this.getColor(start);\r\n\r\n    const endVal = valueScale(value);\r\n    let i = 1;\r\n    let currentVal = startVal;\r\n    const stops = [];\r\n\r\n    stops.push({\r\n      color: startColor,\r\n      offset: startVal,\r\n      originalOffset: startVal,\r\n      opacity: 1\r\n    });\r\n\r\n    while (currentVal < endVal && i < this.colorDomain.length) {\r\n      const color = this.colorDomain[i];\r\n      const offset = colorValueScale(color);\r\n      if (offset <= startVal) {\r\n        i++;\r\n        continue;\r\n      }\r\n\r\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\r\n        break;\r\n      }\r\n\r\n      stops.push({\r\n        color,\r\n        offset,\r\n        opacity: 1\r\n      });\r\n      currentVal = offset;\r\n      i++;\r\n    }\r\n\r\n    if (stops[stops.length - 1].offset < 100) {\r\n      stops.push({\r\n        color: endColor,\r\n        offset: endVal,\r\n        opacity: 1\r\n      });\r\n    }\r\n\r\n    if (endVal === startVal) {\r\n      stops[0].offset = 0;\r\n      stops[1].offset = 100;\r\n    } else {\r\n      // normalize the offsets into percentages\r\n      if (stops[stops.length - 1].offset !== 100) {\r\n        for (const s of stops) {\r\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\r\n        }\r\n      }\r\n    }\r\n\r\n    return stops;\r\n  }\r\n}\r\n","/**\r\n * Based on the data, return an array with unique values.\r\n *\r\n * @export\r\n * @returns array\r\n */\r\nexport function getUniqueXDomainValues(results: any[]): any[] {\r\n  const valueSet = new Set();\r\n  for (const result of results) {\r\n    for (const d of result.series) {\r\n      valueSet.add(d.name);\r\n    }\r\n  }\r\n  return Array.from(valueSet);\r\n}\r\n\r\n/**\r\n * Get the scaleType of enumerable of values.\r\n * @returns  'time', 'linear' or 'ordinal'\r\n */\r\nexport function getScaleType(values: any[], checkDateType = true): string {\r\n  if (checkDateType) {\r\n    const allDates = values.every(value => value instanceof Date);\r\n    if (allDates) {\r\n      return 'time';\r\n    }\r\n  }\r\n\r\n  const allNumbers = values.every(value => typeof value === 'number');\r\n  if (allNumbers) {\r\n    return 'linear';\r\n  }\r\n\r\n  return 'ordinal';\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [baseValue]=\"baseValue\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [gradient]=\"gradient\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [baseValue]=\"baseValue\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() state;\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() baseValue: any = 'auto';\r\n  @Input() autoScale;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xSet: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  scaleType: string;\r\n  series: any;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const values = [...domain];\r\n    if (!this.autoScale) {\r\n      values.push(0);\r\n    }\r\n    if (this.baseValue !== 'auto') {\r\n      values.push(this.baseValue);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getScaleType(values): string {\r\n    let date = true;\r\n    let num = true;\r\n    for (const value of values) {\r\n      if (!this.isDate(value)) {\r\n        date = false;\r\n      }\r\n      if (typeof value !== 'number') {\r\n        num = false;\r\n      }\r\n    }\r\n\r\n    if (date) {\r\n      return 'time';\r\n    }\r\n\r\n    if (num) {\r\n      return 'linear';\r\n    }\r\n\r\n    return 'ordinal';\r\n  }\r\n\r\n  isDate(value): boolean {\r\n    if (value instanceof Date) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [scaleType]=\"scaleType\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [gradient]=\"gradient\"\r\n              normalized=\"true\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [showPercentage]=\"true\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                type=\"stacked\"\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            normalized=\"true\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  scaleType: string;\r\n  xDomain: any[];\r\n  xSet: any[]; // the set of all values on the X Axis\r\n  yDomain: any[];\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  tooltipAreas: any[];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let d0 = 0;\r\n\r\n      let total = 0;\r\n      for (const group of this.results) {\r\n        const d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n        if (d) {\r\n          total += d.value;\r\n        }\r\n      }\r\n\r\n      for (const group of this.results) {\r\n        let d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          d.d0 = d0;\r\n          d.d1 = d0 + d.value;\r\n          d0 += d.value;\r\n        } else {\r\n          d = {\r\n            name: val,\r\n            value: 0,\r\n            d0,\r\n            d1: d0\r\n          };\r\n          group.series.push(d);\r\n        }\r\n\r\n        if (total > 0) {\r\n          d.d0 = (d.d0 * 100) / total;\r\n          d.d1 = (d.d1 * 100) / total;\r\n        } else {\r\n          d.d0 = 0;\r\n          d.d1 = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    return [0, 100];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [scaleType]=\"scaleType\"\r\n              [gradient]=\"gradient\"\r\n              [activeEntries]=\"activeEntries\"\r\n              stacked=\"true\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                type=\"stacked\"\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            stacked=\"true\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  scaleType: string;\r\n  xDomain: any[];\r\n  xSet: any[]; // the set of all values on the X Axis\r\n  yDomain: any[];\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let d0 = 0;\r\n      for (const group of this.results) {\r\n        let d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          d.d0 = d0;\r\n          d.d1 = d0 + d.value;\r\n          d0 += d.value;\r\n        } else {\r\n          d = {\r\n            name: val,\r\n            value: 0,\r\n            d0,\r\n            d1: d0\r\n          };\r\n          group.series.push(d);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let sum = 0;\r\n      for (const group of this.results) {\r\n        const d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          sum += d.value;\r\n        }\r\n      }\r\n\r\n      domain.push(sum);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item) {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","export function sortLinear(data, property, direction = 'asc') {\r\n  return data.sort((a, b) => {\r\n    if (direction === 'asc') {\r\n      return a[property] - b[property];\r\n    } else {\r\n      return b[property] - a[property];\r\n    }\r\n  });\r\n}\r\n\r\nexport function sortByDomain(data, property, direction = 'asc', domain) {\r\n  return data.sort((a, b) => {\r\n    const aVal = a[property];\r\n    const bVal = b[property];\r\n\r\n    const aIdx = domain.indexOf(aVal);\r\n    const bIdx = domain.indexOf(bVal);\r\n\r\n    if (direction === 'asc') {\r\n      return aIdx - bIdx;\r\n    } else {\r\n      return bIdx - aIdx;\r\n    }\r\n  });\r\n}\r\n\r\nexport function sortByTime(data, property, direction = 'asc') {\r\n  return data.sort((a, b) => {\r\n    const aDate = a[property].getTime();\r\n    const bDate = b[property].getTime();\r\n\r\n    if (direction === 'asc') {\r\n      if (aDate > bDate) return 1;\r\n      if (bDate > aDate) return -1;\r\n      return 0;\r\n    } else {\r\n      if (aDate > bDate) return -1;\r\n      if (bDate > aDate) return 1;\r\n      return 0;\r\n    }\r\n  });\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { area } from 'd3-shape';\r\n\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-area-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-area\r\n      class=\"area-series\"\r\n      [data]=\"data\"\r\n      [path]=\"path\"\r\n      [fill]=\"colors.getColor(data.name)\"\r\n      [stops]=\"gradientStops\"\r\n      [startingPath]=\"startingPath\"\r\n      [opacity]=\"opacity\"\r\n      [gradient]=\"gradient || hasGradient\"\r\n      [animations]=\"animations\"\r\n      [class.active]=\"isActive(data)\"\r\n      [class.inactive]=\"isInactive(data)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AreaSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() baseValue: any = 'auto';\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() stacked: boolean = false;\r\n  @Input() normalized: boolean = false;\r\n  @Input() gradient;\r\n  @Input() curve;\r\n  @Input() activeEntries: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  opacity: number;\r\n  path: string;\r\n  startingPath: string;\r\n\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradient();\r\n\r\n    let currentArea;\r\n    let startingArea;\r\n\r\n    const xProperty = d => {\r\n      const label = d.name;\r\n      return this.xScale(label);\r\n    };\r\n\r\n    if (this.stacked || this.normalized) {\r\n      currentArea = area<any>()\r\n        .x(xProperty)\r\n        .y0((d, i) => this.yScale(d.d0))\r\n        .y1((d, i) => this.yScale(d.d1));\r\n\r\n      startingArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(d => this.yScale.range()[0])\r\n        .y1(d => this.yScale.range()[0]);\r\n    } else {\r\n      currentArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\r\n        .y1(d => this.yScale(d.value));\r\n\r\n      startingArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\r\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\r\n    }\r\n\r\n    currentArea.curve(this.curve);\r\n    startingArea.curve(this.curve);\r\n\r\n    this.opacity = 0.8;\r\n\r\n    let data = this.data.series;\r\n    if (this.scaleType === 'linear') {\r\n      data = sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      data = sortByTime(data, 'name');\r\n    } else {\r\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n    }\r\n\r\n    this.path = currentArea(data);\r\n    this.startingPath = startingArea(data);\r\n  }\r\n\r\n  updateGradient() {\r\n    if (this.colors.scaleType === 'linear') {\r\n      this.hasGradient = true;\r\n      if (this.stacked || this.normalized) {\r\n        const d0values = this.data.series.map(d => d.d0);\r\n        const d1values = this.data.series.map(d => d.d1);\r\n        const max = Math.max(...d1values);\r\n        const min = Math.min(...d0values);\r\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n      } else {\r\n        const values = this.data.series.map(d => d.value);\r\n        const max = Math.max(...values);\r\n        this.gradientStops = this.colors.getLinearGradientStops(max);\r\n      }\r\n    } else {\r\n      this.hasGradient = false;\r\n      this.gradientStops = undefined;\r\n    }\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AreaChartComponent } from './area-chart.component';\r\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\r\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\r\nimport { AreaSeriesComponent } from './area-series.component';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\r\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\r\n})\r\nexport class AreaChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\nimport { roundedRect } from '../common/shape.helper';\r\nimport { id } from '../utils/id';\r\n\r\n/* tslint:disable-next-line */\r\nimport { transition } from 'd3-transition';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bar]',\r\n  template: `\r\n    <svg:defs *ngIf=\"hasGradient\">\r\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n    </svg:defs>\r\n    <svg:path\r\n      class=\"bar\"\r\n      stroke=\"none\"\r\n      role=\"img\"\r\n      tabIndex=\"-1\"\r\n      [class.active]=\"isActive\"\r\n      [class.hidden]=\"hideBar\"\r\n      [attr.d]=\"path\"\r\n      [attr.aria-label]=\"ariaLabel\"\r\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\r\n      (click)=\"select.emit(data)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BarComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() data: any;\r\n  @Input() width: number;\r\n  @Input() height: number;\r\n  @Input() x: number;\r\n  @Input() y: number;\r\n  @Input() orientation;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() gradient: boolean = false;\r\n  @Input() offset = 0;\r\n  @Input() isActive: boolean = false;\r\n  @Input() stops: any[];\r\n  @Input() animations: boolean = true;\r\n  @Input() ariaLabel: string;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: any;\r\n  path: any;\r\n  gradientId: any;\r\n  gradientFill: any;\r\n  startOpacity: any;\r\n  gradientStops: any[];\r\n  hasGradient: boolean = false;\r\n  hideBar: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.roundEdges) {\r\n      this.loadAnimation();\r\n    }\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n\r\n    if (this.gradient || this.stops) {\r\n      this.gradientStops = this.getGradient();\r\n      this.hasGradient = true;\r\n    } else {\r\n      this.hasGradient = false;\r\n    }\r\n\r\n    this.updatePathEl();\r\n    this.checkToHideBar();\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    this.path = this.getStartingPath();\r\n    setTimeout(this.update.bind(this), 100);\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element).select('.bar');\r\n    const path = this.getPath();\r\n    if (this.animations) {\r\n      node.transition().duration(500).attr('d', path);\r\n    } else {\r\n      node.attr('d', path);\r\n    }\r\n  }\r\n\r\n  getGradient() {\r\n    if (this.stops) {\r\n      return this.stops;\r\n    }\r\n\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.getStartOpacity()\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  getStartingPath() {\r\n    if (!this.animations) {\r\n      return this.getPath();\r\n    }\r\n\r\n    let radius = this.getRadius();\r\n    let path;\r\n\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        radius = Math.min(this.height, radius);\r\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        radius = Math.min(this.width, radius);\r\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\r\n      }\r\n    } else {\r\n      if (this.orientation === 'vertical') {\r\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\r\n      }\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  getPath() {\r\n    let radius = this.getRadius();\r\n    let path;\r\n\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        radius = Math.min(this.height, radius);\r\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        radius = Math.min(this.width, radius);\r\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n      }\r\n    } else {\r\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  getRadius(): number {\r\n    let radius = 0;\r\n\r\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\r\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\r\n    }\r\n\r\n    return radius;\r\n  }\r\n\r\n  getStartOpacity(): number {\r\n    if (this.roundEdges) {\r\n      return 0.2;\r\n    } else {\r\n      return 0.5;\r\n    }\r\n  }\r\n\r\n  get edges() {\r\n    let edges = [false, false, false, false];\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        if (this.data.value > 0) {\r\n          edges = [true, true, false, false];\r\n        } else {\r\n          edges = [false, false, true, true];\r\n        }\r\n      } else if (this.orientation === 'horizontal') {\r\n        if (this.data.value > 0) {\r\n          edges = [false, true, false, true];\r\n        } else {\r\n          edges = [true, false, true, false];\r\n        }\r\n      }\r\n    }\r\n    return edges;\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n\r\n  private checkToHideBar() {\r\n    this.hideBar =\r\n      this.noBarWhenZero &&\r\n      ((this.orientation === 'vertical' && this.height === 0) ||\r\n        (this.orientation === 'horizontal' && this.width === 0));\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-horizontal\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"results\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\r\n        ></svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BarHorizontalComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() xScaleMax: number;\r\n  @Input() xScaleMin: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  yScale: any;\r\n  xScale: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getXScale(): any {\r\n    this.xDomain = this.getXDomain();\r\n\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(): any {\r\n    this.yDomain = this.getYDomain();\r\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    const values = this.results.map(d => d.value);\r\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\r\n\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\r\n    return [min, max];\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.yDomain;\r\n    } else {\r\n      domain = this.xDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.xDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (event.index === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-2d',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-grid-panel-series\r\n          [xScale]=\"valueScale\"\r\n          [yScale]=\"groupScale\"\r\n          [data]=\"results\"\r\n          [dims]=\"dims\"\r\n          orient=\"horizontal\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"valueScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"groupScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            [xScale]=\"valueScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [yScale]=\"innerScale\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [roundEdges]=\"roundEdges\"\r\n            [animations]=\"animations\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontal2DComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() groupPadding = 16;\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() xScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valuesDomain: any[];\r\n  groupScale: any;\r\n  innerScale: any;\r\n  valueScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valuesDomain = this.getValueDomain();\r\n\r\n    this.groupScale = this.getGroupScale();\r\n    this.innerScale = this.getInnerScale();\r\n    this.valueScale = this.getValueScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.height])\r\n      .paddingInner(spacing)\r\n      .paddingOuter(spacing / 2)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getInnerScale(): any {\r\n    const height = this.groupScale.bandwidth();\r\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\r\n  }\r\n\r\n  getValueScale(): any {\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valuesDomain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(0, ${this.groupScale(group.label)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valuesDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valuesDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            type=\"normalized\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    return [0, 100];\r\n  }\r\n\r\n  getYScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group): string {\r\n    return `translate(0, ${this.yScale(group.name)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            type=\"stacked\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() xScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n    let smallest = 0;\r\n    let biggest = 0;\r\n    for (const group of this.results) {\r\n      let smallestSum = 0;\r\n      let biggestSum = 0;\r\n      for (const d of group.series) {\r\n        if (d.value < 0) {\r\n          smallestSum += d.value;\r\n        } else {\r\n          biggestSum += d.value;\r\n        }\r\n        smallest = d.value < smallest ? d.value : smallest;\r\n        biggest = d.value > biggest ? d.value : biggest;\r\n      }\r\n      domain.push(smallestSum);\r\n      domain.push(biggestSum);\r\n    }\r\n    domain.push(smallest);\r\n    domain.push(biggest);\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getYScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group): string {\r\n    return `translate(0, ${this.yScale(group.name)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-vertical\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"results\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n          (select)=\"onClick($event)\"\r\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\r\n        ></svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BarVerticalComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() yScaleMax: number;\r\n  @Input() yScaleMin: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xScale: any;\r\n  yScale: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin: any[] = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  getXScale(): any {\r\n    this.xDomain = this.getXDomain();\r\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\r\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    this.yDomain = this.getYDomain();\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  getYDomain(): [number, number] {\r\n    const values = this.results.map(d => d.value);\r\n\r\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\r\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\r\n      min = Math.min(min, ...this.yAxisTicks);\r\n    }\r\n\r\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\r\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\r\n      max = Math.max(max, ...this.yAxisTicks);\r\n    }\r\n    return [min, max];\r\n  }\r\n\r\n  onClick(data: DataItem) {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.xDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.xDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (event.index === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-2d',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-grid-panel-series\r\n          [xScale]=\"groupScale\"\r\n          [yScale]=\"valueScale\"\r\n          [data]=\"results\"\r\n          [dims]=\"dims\"\r\n          orient=\"vertical\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"groupScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"valueScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-vertical\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [xScale]=\"innerScale\"\r\n          [yScale]=\"valueScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"group.series\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [seriesName]=\"group.name\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (select)=\"onClick($event, group)\"\r\n          (activate)=\"onActivate($event, group)\"\r\n          (deactivate)=\"onDeactivate($event, group)\"\r\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVertical2DComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() scaleType = 'ordinal';\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() groupPadding = 16;\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() yScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valuesDomain: any[];\r\n  groupScale: any;\r\n  innerScale: any;\r\n  valueScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valuesDomain = this.getValueDomain();\r\n\r\n    this.groupScale = this.getGroupScale();\r\n    this.innerScale = this.getInnerScale();\r\n    this.valueScale = this.getValueScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  getGroupScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.width])\r\n      .paddingInner(spacing)\r\n      .paddingOuter(spacing / 2)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getInnerScale(): any {\r\n    const width = this.groupScale.bandwidth();\r\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\r\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\r\n  }\r\n\r\n  getValueScale(): any {\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valuesDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.groupScale(group.label)}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valuesDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valuesDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-vertical\r\n            type=\"normalized\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    return [0, 100];\r\n  }\r\n\r\n  getXScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.xScale(group.name)}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\nexport enum D0Types {\r\n  positive = 'positive',\r\n  negative = 'negative'\r\n}\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-series-vertical]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-bar\r\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\r\n      [@animationState]=\"'active'\"\r\n      [@.disabled]=\"!animations\"\r\n      [width]=\"bar.width\"\r\n      [height]=\"bar.height\"\r\n      [x]=\"bar.x\"\r\n      [y]=\"bar.y\"\r\n      [fill]=\"bar.color\"\r\n      [stops]=\"bar.gradientStops\"\r\n      [data]=\"bar.data\"\r\n      [orientation]=\"'vertical'\"\r\n      [roundEdges]=\"bar.roundEdges\"\r\n      [gradient]=\"gradient\"\r\n      [ariaLabel]=\"bar.ariaLabel\"\r\n      [isActive]=\"isActive(bar.data)\"\r\n      (select)=\"onClick($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"tooltipPlacement\"\r\n      [tooltipType]=\"tooltipType\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"bar.data\"\r\n      [noBarWhenZero]=\"noBarWhenZero\"\r\n      [animations]=\"animations\"\r\n    ></svg:g>\r\n    <svg:g *ngIf=\"showDataLabel\">\r\n      <svg:g\r\n        ngx-charts-bar-label\r\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\r\n        [barX]=\"b.x\"\r\n        [barY]=\"b.y\"\r\n        [barWidth]=\"b.width\"\r\n        [barHeight]=\"b.height\"\r\n        [value]=\"b.total\"\r\n        [valueFormatting]=\"dataLabelFormatting\"\r\n        [orientation]=\"'vertical'\"\r\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(500, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class SeriesVerticalComponent implements OnChanges {\r\n  @Input() dims;\r\n  @Input() type = 'standard';\r\n  @Input() series;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() seriesName: string;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() roundEdges: boolean;\r\n  @Input() animations: boolean = true;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dataLabelHeightChanged = new EventEmitter();\r\n\r\n  tooltipPlacement: string;\r\n  tooltipType: string;\r\n\r\n  bars: any;\r\n  x: any;\r\n  y: any;\r\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\r\n\r\n  ngOnChanges(changes): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateTooltipSettings();\r\n    let width;\r\n    if (this.series.length) {\r\n      width = this.xScale.bandwidth();\r\n    }\r\n    width = Math.round(width);\r\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\r\n\r\n    const d0 = {\r\n      [D0Types.positive]: 0,\r\n      [D0Types.negative]: 0\r\n    };\r\n    let d0Type = D0Types.positive;\r\n\r\n    let total;\r\n    if (this.type === 'normalized') {\r\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n    }\r\n\r\n    this.bars = this.series.map((d, index) => {\r\n      let value = d.value;\r\n      const label = this.getLabel(d);\r\n      const formattedLabel = formatLabel(label);\r\n      const roundEdges = this.roundEdges;\r\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\r\n\r\n      const bar: any = {\r\n        value,\r\n        label,\r\n        roundEdges,\r\n        data: d,\r\n        width,\r\n        formattedLabel,\r\n        height: 0,\r\n        x: 0,\r\n        y: 0\r\n      };\r\n\r\n      if (this.type === 'standard') {\r\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\r\n        bar.x = this.xScale(label);\r\n\r\n        if (value < 0) {\r\n          bar.y = this.yScale(0);\r\n        } else {\r\n          bar.y = this.yScale(value);\r\n        }\r\n      } else if (this.type === 'stacked') {\r\n        const offset0 = d0[d0Type];\r\n        const offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\r\n        bar.x = 0;\r\n        bar.y = this.yScale(offset1);\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n      } else if (this.type === 'normalized') {\r\n        let offset0 = d0[d0Type];\r\n        let offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        if (total > 0) {\r\n          offset0 = (offset0 * 100) / total;\r\n          offset1 = (offset1 * 100) / total;\r\n        } else {\r\n          offset0 = 0;\r\n          offset1 = 0;\r\n        }\r\n\r\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\r\n        bar.x = 0;\r\n        bar.y = this.yScale(offset1);\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n        value = (offset1 - offset0).toFixed(2) + '%';\r\n      }\r\n\r\n      if (this.colors.scaleType === 'ordinal') {\r\n        bar.color = this.colors.getColor(label);\r\n      } else {\r\n        if (this.type === 'standard') {\r\n          bar.color = this.colors.getColor(value);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\r\n        } else {\r\n          bar.color = this.colors.getColor(bar.offset1);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\r\n        }\r\n      }\r\n\r\n      let tooltipLabel = formattedLabel;\r\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\r\n      if (this.seriesName) {\r\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\r\n        bar.data.series = this.seriesName;\r\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\r\n      }\r\n\r\n      bar.tooltipText = this.tooltipDisabled\r\n        ? undefined\r\n        : `\r\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\r\n        <span class=\"tooltip-val\">${\r\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\r\n        }</span>\r\n      `;\r\n\r\n      return bar;\r\n    });\r\n\r\n    this.updateDataLabels();\r\n  }\r\n\r\n  updateDataLabels() {\r\n    if (this.type === 'stacked') {\r\n      this.barsForDataLabels = [];\r\n      const section: any = {};\r\n      section.series = this.seriesName;\r\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\r\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\r\n      section.total = totalPositive + totalNegative;\r\n      section.x = 0;\r\n      section.y = 0;\r\n      if (section.total > 0) {\r\n        section.height = this.yScale(totalPositive);\r\n      } else {\r\n        section.height = this.yScale(totalNegative);\r\n      }\r\n      section.width = this.xScale.bandwidth();\r\n      this.barsForDataLabels.push(section);\r\n    } else {\r\n      this.barsForDataLabels = this.series.map(d => {\r\n        const section: any = {};\r\n        section.series = this.seriesName ? this.seriesName : d.label;\r\n        section.total = d.value;\r\n        section.x = this.xScale(d.label);\r\n        section.y = this.yScale(0);\r\n        section.height = this.yScale(section.total) - this.yScale(0);\r\n        section.width = this.xScale.bandwidth();\r\n        return section;\r\n      });\r\n    }\r\n  }\r\n\r\n  updateTooltipSettings() {\r\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\r\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getLabel(dataItem): string {\r\n    if (dataItem.label) {\r\n      return dataItem.label;\r\n    }\r\n    return dataItem.name;\r\n  }\r\n\r\n  trackBy(index, bar): string {\r\n    return bar.label;\r\n  }\r\n\r\n  trackDataLabelBy(index, barLabel) {\r\n    return index + '#' + barLabel.series + '#' + barLabel.total;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-vertical\r\n            type=\"stacked\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVerticalStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() yScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  tickFormatting: (label: string) => string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    const domain = [];\r\n    let smallest = 0;\r\n    let biggest = 0;\r\n    for (const group of this.results) {\r\n      let smallestSum = 0;\r\n      let biggestSum = 0;\r\n      for (const d of group.series) {\r\n        if (d.value < 0) {\r\n          smallestSum += d.value;\r\n        } else {\r\n          biggestSum += d.value;\r\n        }\r\n        smallest = d.value < smallest ? d.value : smallest;\r\n        biggest = d.value > biggest ? d.value : biggest;\r\n      }\r\n      domain.push(smallestSum);\r\n      domain.push(biggestSum);\r\n    }\r\n    domain.push(smallest);\r\n    domain.push(biggest);\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getXScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\r\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { D0Types } from './series-vertical.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-series-horizontal]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-bar\r\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\r\n      [@animationState]=\"'active'\"\r\n      [width]=\"bar.width\"\r\n      [height]=\"bar.height\"\r\n      [x]=\"bar.x\"\r\n      [y]=\"bar.y\"\r\n      [fill]=\"bar.color\"\r\n      [stops]=\"bar.gradientStops\"\r\n      [data]=\"bar.data\"\r\n      [orientation]=\"'horizontal'\"\r\n      [roundEdges]=\"bar.roundEdges\"\r\n      (select)=\"click($event)\"\r\n      [gradient]=\"gradient\"\r\n      [isActive]=\"isActive(bar.data)\"\r\n      [ariaLabel]=\"bar.ariaLabel\"\r\n      [animations]=\"animations\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"tooltipPlacement\"\r\n      [tooltipType]=\"tooltipType\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"bar.data\"\r\n      [noBarWhenZero]=\"noBarWhenZero\"\r\n    ></svg:g>\r\n    <svg:g *ngIf=\"showDataLabel\">\r\n      <svg:g\r\n        ngx-charts-bar-label\r\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\r\n        [barX]=\"b.x\"\r\n        [barY]=\"b.y\"\r\n        [barWidth]=\"b.width\"\r\n        [barHeight]=\"b.height\"\r\n        [value]=\"b.total\"\r\n        [valueFormatting]=\"dataLabelFormatting\"\r\n        [orientation]=\"'horizontal'\"\r\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(500, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class SeriesHorizontal implements OnChanges {\r\n  bars: any;\r\n  x: any;\r\n  y: any;\r\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\r\n\r\n  @Input() dims;\r\n  @Input() type = 'standard';\r\n  @Input() series;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() seriesName: string;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() roundEdges: boolean;\r\n  @Input() animations: boolean = true;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dataLabelWidthChanged = new EventEmitter();\r\n\r\n  tooltipPlacement: string;\r\n  tooltipType: string;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateTooltipSettings();\r\n    const d0 = {\r\n      [D0Types.positive]: 0,\r\n      [D0Types.negative]: 0\r\n    };\r\n    let d0Type: D0Types;\r\n    d0Type = D0Types.positive;\r\n    let total;\r\n    if (this.type === 'normalized') {\r\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n    }\r\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\r\n\r\n    this.bars = this.series.map((d, index) => {\r\n      let value = d.value;\r\n      const label = this.getLabel(d);\r\n      const formattedLabel = formatLabel(label);\r\n      const roundEdges = this.roundEdges;\r\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\r\n\r\n      const bar: any = {\r\n        value,\r\n        label,\r\n        roundEdges,\r\n        data: d,\r\n        formattedLabel\r\n      };\r\n\r\n      bar.height = this.yScale.bandwidth();\r\n\r\n      if (this.type === 'standard') {\r\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\r\n        if (value < 0) {\r\n          bar.x = this.xScale(value);\r\n        } else {\r\n          bar.x = this.xScale(xScaleMin);\r\n        }\r\n        bar.y = this.yScale(label);\r\n      } else if (this.type === 'stacked') {\r\n        const offset0 = d0[d0Type];\r\n        const offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\r\n        bar.x = this.xScale(offset0);\r\n        bar.y = 0;\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n      } else if (this.type === 'normalized') {\r\n        let offset0 = d0[d0Type];\r\n        let offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        if (total > 0) {\r\n          offset0 = (offset0 * 100) / total;\r\n          offset1 = (offset1 * 100) / total;\r\n        } else {\r\n          offset0 = 0;\r\n          offset1 = 0;\r\n        }\r\n\r\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\r\n        bar.x = this.xScale(offset0);\r\n        bar.y = 0;\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n        value = (offset1 - offset0).toFixed(2) + '%';\r\n      }\r\n\r\n      if (this.colors.scaleType === 'ordinal') {\r\n        bar.color = this.colors.getColor(label);\r\n      } else {\r\n        if (this.type === 'standard') {\r\n          bar.color = this.colors.getColor(value);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\r\n        } else {\r\n          bar.color = this.colors.getColor(bar.offset1);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\r\n        }\r\n      }\r\n\r\n      let tooltipLabel = formattedLabel;\r\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\r\n      if (this.seriesName) {\r\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\r\n        bar.data.series = this.seriesName;\r\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\r\n      }\r\n\r\n      bar.tooltipText = this.tooltipDisabled\r\n        ? undefined\r\n        : `\r\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\r\n        <span class=\"tooltip-val\">${\r\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\r\n        }</span>\r\n      `;\r\n\r\n      return bar;\r\n    });\r\n\r\n    this.updateDataLabels();\r\n  }\r\n\r\n  updateDataLabels() {\r\n    if (this.type === 'stacked') {\r\n      this.barsForDataLabels = [];\r\n      const section: any = {};\r\n      section.series = this.seriesName;\r\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\r\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\r\n      section.total = totalPositive + totalNegative;\r\n      section.x = 0;\r\n      section.y = 0;\r\n      // if total is positive then we show it on the right, otherwise on the left\r\n      if (section.total > 0) {\r\n        section.width = this.xScale(totalPositive);\r\n      } else {\r\n        section.width = this.xScale(totalNegative);\r\n      }\r\n      section.height = this.yScale.bandwidth();\r\n      this.barsForDataLabels.push(section);\r\n    } else {\r\n      this.barsForDataLabels = this.series.map(d => {\r\n        const section: any = {};\r\n        section.series = this.seriesName ? this.seriesName : d.label;\r\n        section.total = d.value;\r\n        section.x = this.xScale(0);\r\n        section.y = this.yScale(d.label);\r\n        section.width = this.xScale(section.total) - this.xScale(0);\r\n        section.height = this.yScale.bandwidth();\r\n        return section;\r\n      });\r\n    }\r\n  }\r\n\r\n  updateTooltipSettings() {\r\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\r\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  getLabel(dataItem): string {\r\n    if (dataItem.label) {\r\n      return dataItem.label;\r\n    }\r\n    return dataItem.name;\r\n  }\r\n\r\n  trackBy(index, bar) {\r\n    return bar.label;\r\n  }\r\n\r\n  trackDataLabelBy(index, barLabel) {\r\n    return index + '#' + barLabel.series + '#' + barLabel.total;\r\n  }\r\n\r\n  click(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { formatLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bar-label]',\r\n  template: `\r\n    <svg:text\r\n      class=\"textDataLabel\"\r\n      alignment-baseline=\"middle\"\r\n      [attr.text-anchor]=\"textAnchor\"\r\n      [attr.transform]=\"transform\"\r\n      [attr.x]=\"x\"\r\n      [attr.y]=\"y\"\r\n    >\r\n      {{ formatedValue }}\r\n    </svg:text>\r\n  `,\r\n  styleUrls: ['./bar-label.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BarLabelComponent implements OnChanges {\r\n  @Input() value;\r\n  @Input() valueFormatting: any;\r\n  @Input() barX;\r\n  @Input() barY;\r\n  @Input() barWidth;\r\n  @Input() barHeight;\r\n  @Input() orientation;\r\n\r\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: any;\r\n  x: number;\r\n  y: number;\r\n  horizontalPadding: number = 2;\r\n  verticalPadding: number = 5;\r\n  formatedValue: string;\r\n  transform: string;\r\n  textAnchor: string;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getSize(): any {\r\n    const h = this.element.getBoundingClientRect().height;\r\n    const w = this.element.getBoundingClientRect().width;\r\n    return { height: h, width: w, negative: this.value < 0 };\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dimensionsChanged.emit(this.getSize());\r\n  }\r\n\r\n  update(): void {\r\n    if (this.valueFormatting) {\r\n      this.formatedValue = this.valueFormatting(this.value);\r\n    } else {\r\n      this.formatedValue = formatLabel(this.value);\r\n    }\r\n\r\n    if (this.orientation === 'horizontal') {\r\n      this.x = this.barX + this.barWidth;\r\n      // if the value is negative then it's on the left of the x0.\r\n      // we need to put the data label in front of the bar\r\n      if (this.value < 0) {\r\n        this.x = this.x - this.horizontalPadding;\r\n        this.textAnchor = 'end';\r\n      } else {\r\n        this.x = this.x + this.horizontalPadding;\r\n        this.textAnchor = 'start';\r\n      }\r\n      this.y = this.barY + this.barHeight / 2;\r\n    } else {\r\n      // orientation must be \"vertical\"\r\n      this.x = this.barX + this.barWidth / 2;\r\n      this.y = this.barY + this.barHeight;\r\n\r\n      if (this.value < 0) {\r\n        this.y = this.y + this.verticalPadding;\r\n        this.textAnchor = 'end';\r\n      } else {\r\n        this.y = this.y - this.verticalPadding;\r\n        this.textAnchor = 'start';\r\n      }\r\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { BarComponent } from './bar.component';\r\nimport { BarHorizontalComponent } from './bar-horizontal.component';\r\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\r\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\r\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\r\nimport { BarVerticalComponent } from './bar-vertical.component';\r\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\r\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\r\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\r\nimport { SeriesHorizontal } from './series-horizontal.component';\r\nimport { SeriesVerticalComponent } from './series-vertical.component';\r\nimport { BarLabelComponent } from './bar-label.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [\r\n    BarComponent,\r\n    BarHorizontalComponent,\r\n    BarHorizontal2DComponent,\r\n    BarHorizontalNormalizedComponent,\r\n    BarHorizontalStackedComponent,\r\n    BarVerticalComponent,\r\n    BarVertical2DComponent,\r\n    BarVerticalNormalizedComponent,\r\n    BarVerticalStackedComponent,\r\n    BarLabelComponent,\r\n    SeriesHorizontal,\r\n    SeriesVerticalComponent\r\n  ],\r\n  exports: [\r\n    BarComponent,\r\n    BarHorizontalComponent,\r\n    BarHorizontal2DComponent,\r\n    BarHorizontalNormalizedComponent,\r\n    BarHorizontalStackedComponent,\r\n    BarVerticalComponent,\r\n    BarVertical2DComponent,\r\n    BarVerticalNormalizedComponent,\r\n    BarVerticalStackedComponent,\r\n    BarLabelComponent,\r\n    SeriesHorizontal,\r\n    SeriesVerticalComponent\r\n  ]\r\n})\r\nexport class BarChartModule {}\r\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\n\r\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\r\n  let domain: number[] = [];\r\n  if (scaleType === 'linear') {\r\n    values = values.map(v => Number(v));\r\n    if (!autoScale) {\r\n      values.push(0);\r\n    }\r\n  }\r\n\r\n  if (scaleType === 'time' || scaleType === 'linear') {\r\n    const min = minVal ? minVal : Math.min(...values);\r\n    const max = maxVal ? maxVal : Math.max(...values);\r\n\r\n    domain = [min, max];\r\n  } else {\r\n    domain = values;\r\n  }\r\n\r\n  return domain;\r\n}\r\n\r\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\r\n  let scale: any;\r\n\r\n  if (scaleType === 'time') {\r\n    scale = scaleTime().range(range).domain(domain);\r\n  } else if (scaleType === 'linear') {\r\n    scale = scaleLinear().range(range).domain(domain);\r\n\r\n    if (roundDomains) {\r\n      scale = scale.nice();\r\n    }\r\n  } else if (scaleType === 'ordinal') {\r\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\r\n  }\r\n\r\n  return scale;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { getScaleType } from '../common/domain.helper';\r\nimport { getDomain, getScale } from './bubble-chart.utils';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bubble-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [dims]=\"dims\"\r\n          [xScale]=\"xScale\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        />\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        />\r\n        <svg:rect\r\n          class=\"bubble-chart-area\"\r\n          x=\"0\"\r\n          y=\"0\"\r\n          [attr.width]=\"dims.width\"\r\n          [attr.height]=\"dims.height\"\r\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\r\n          (mouseenter)=\"deactivateAll()\"\r\n        />\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-bubble-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [rScale]=\"rScale\"\r\n              [xScaleType]=\"xScaleType\"\r\n              [yScaleType]=\"yScaleType\"\r\n              [xAxisLabel]=\"xAxisLabel\"\r\n              [yAxisLabel]=\"yAxisLabel\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              (select)=\"onClick($event, series)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n            />\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BubbleChartComponent extends BaseChartComponent {\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis: boolean = true;\r\n  @Input() yAxis: boolean = true;\r\n  @Input() showXAxisLabel: boolean;\r\n  @Input() showYAxisLabel: boolean;\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() maxRadius = 10;\r\n  @Input() minRadius = 3;\r\n  @Input() autoScale: boolean;\r\n  @Input() schemeType = 'ordinal';\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: any;\r\n  @Input() yScaleMax: any;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  colors: ColorHelper;\r\n  scaleType = 'linear';\r\n  margin = [10, 20, 10, 20];\r\n  bubblePadding = [0, 0, 0, 0];\r\n  data: any;\r\n\r\n  legendOptions: any;\r\n  transform: string;\r\n\r\n  clipPath: string;\r\n  clipPathId: string;\r\n\r\n  seriesDomain: any[];\r\n  xDomain: any[];\r\n  yDomain: any[];\r\n  rDomain: number[];\r\n\r\n  xScaleType: string;\r\n  yScaleType: string;\r\n\r\n  yScale: any;\r\n  xScale: any;\r\n  rScale: any;\r\n\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n\r\n  activeEntries: any[] = [];\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.seriesDomain = this.results.map(d => d.name);\r\n    this.rDomain = this.getRDomain();\r\n    this.xDomain = this.getXDomain();\r\n    this.yDomain = this.getYDomain();\r\n\r\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\r\n\r\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\r\n\r\n    this.data = this.results;\r\n\r\n    this.minRadius = Math.max(this.minRadius, 1);\r\n    this.maxRadius = Math.max(this.maxRadius, 1);\r\n\r\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\r\n\r\n    this.bubblePadding = [0, 0, 0, 0];\r\n    this.setScales();\r\n\r\n    this.bubblePadding = this.getBubblePadding();\r\n    this.setScales();\r\n\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getBubblePadding() {\r\n    let yMin = 0;\r\n    let xMin = 0;\r\n    let yMax = this.dims.height;\r\n    let xMax = this.dims.width;\r\n\r\n    for (const s of this.data) {\r\n      for (const d of s.series) {\r\n        const r = this.rScale(d.r);\r\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\r\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\r\n        xMin = Math.max(r - cx, xMin);\r\n        yMin = Math.max(r - cy, yMin);\r\n        yMax = Math.max(cy + r, yMax);\r\n        xMax = Math.max(cx + r, xMax);\r\n      }\r\n    }\r\n\r\n    xMax = Math.max(xMax - this.dims.width, 0);\r\n    yMax = Math.max(yMax - this.dims.height, 0);\r\n\r\n    return [yMin, xMax, yMax, xMin];\r\n  }\r\n\r\n  setScales() {\r\n    let width = this.dims.width;\r\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\r\n      width = width - this.bubblePadding[1];\r\n    }\r\n    let height = this.dims.height;\r\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\r\n      height = height - this.bubblePadding[2];\r\n    }\r\n    this.xScale = this.getXScale(this.xDomain, width);\r\n    this.yScale = this.getYScale(this.yDomain, height);\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\r\n  }\r\n\r\n  getRScale(domain, range): any {\r\n    const scale = scaleLinear().range(range).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getLegendOptions(): any {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      position: this.legendPosition,\r\n      title: undefined\r\n    };\r\n\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.rDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    const values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.x)) {\r\n          values.push(d.x);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.xScaleType = getScaleType(values);\r\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.y)) {\r\n          values.push(d.y);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.yScaleType = getScaleType(values);\r\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\r\n  }\r\n\r\n  getRDomain(): number[] {\r\n    let min = Infinity;\r\n    let max = -Infinity;\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        const value = Number(d.r) || 1;\r\n        min = Math.min(min, value);\r\n        max = Math.max(max, value);\r\n      }\r\n    }\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bubble-series]',\r\n  template: `\r\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\r\n      <svg:g [attr.transform]=\"circle.transform\">\r\n        <svg:g\r\n          ngx-charts-circle\r\n          [@animationState]=\"'active'\"\r\n          class=\"circle\"\r\n          [cx]=\"0\"\r\n          [cy]=\"0\"\r\n          [r]=\"circle.radius\"\r\n          [fill]=\"circle.color\"\r\n          [style.opacity]=\"circle.opacity\"\r\n          [class.active]=\"circle.isActive\"\r\n          [pointerEvents]=\"'all'\"\r\n          [data]=\"circle.value\"\r\n          [classNames]=\"circle.classNames\"\r\n          (select)=\"onClick(circle.data)\"\r\n          (activate)=\"activateCircle(circle)\"\r\n          (deactivate)=\"deactivateCircle(circle)\"\r\n          ngx-tooltip\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipPlacement]=\"'top'\"\r\n          [tooltipType]=\"'tooltip'\"\r\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipContext]=\"circle.data\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0,\r\n          transform: 'scale(0)'\r\n        }),\r\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BubbleSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() rScale;\r\n  @Input() xScaleType;\r\n  @Input() yScaleType;\r\n  @Input() colors;\r\n  @Input() visibleValue;\r\n  @Input() activeEntries: any[];\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  areaPath: any;\r\n  circles: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.circles = this.getCircles();\r\n  }\r\n\r\n  getCircles(): any[] {\r\n    const seriesName = this.data.name;\r\n\r\n    return this.data.series\r\n      .map((d, i) => {\r\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\r\n          const y = d.y;\r\n          const x = d.x;\r\n          const r = d.r;\r\n\r\n          const radius = this.rScale(r || 1);\r\n          const tooltipLabel = formatLabel(d.name);\r\n\r\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\r\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\r\n\r\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\r\n\r\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\r\n          const opacity = isActive ? 1 : 0.3;\r\n\r\n          const data = Object.assign({}, d, {\r\n            series: seriesName,\r\n            name: d.name,\r\n            value: d.y,\r\n            x: d.x,\r\n            radius: d.r\r\n          });\r\n\r\n          return {\r\n            data,\r\n            x,\r\n            y,\r\n            r,\r\n            classNames: [`circle-data-${i}`],\r\n            value: y,\r\n            label: x,\r\n            cx,\r\n            cy,\r\n            radius,\r\n            tooltipLabel,\r\n            color,\r\n            opacity,\r\n            seriesName,\r\n            isActive,\r\n            transform: `translate(${cx},${cy})`\r\n          };\r\n        }\r\n      })\r\n      .filter(circle => circle !== undefined);\r\n  }\r\n\r\n  getTooltipText(circle): string {\r\n    const hasRadius = typeof circle.r !== 'undefined';\r\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\r\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\r\n\r\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\r\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\r\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\r\n    const x = formatLabel(circle.x);\r\n    const y = formatLabel(circle.y);\r\n    const name =\r\n      hasSeriesName && hasTooltipLabel\r\n        ? `${circle.seriesName} â¢ ${circle.tooltipLabel}`\r\n        : circle.seriesName + circle.tooltipLabel;\r\n    const tooltipTitle =\r\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\r\n\r\n    return `\r\n      ${tooltipTitle}\r\n      <span class=\"tooltip-label\">\r\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\r\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\r\n      </span>\r\n      <span class=\"tooltip-val\">\r\n        ${escapeLabel(radiusValue)}\r\n      </span>\r\n    `;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isVisible(circle): boolean {\r\n    if (this.activeEntries.length > 0) {\r\n      return this.isActive({ name: circle.seriesName });\r\n    }\r\n\r\n    return circle.opacity !== 0;\r\n  }\r\n\r\n  activateCircle(circle): void {\r\n    circle.barVisible = true;\r\n    this.activate.emit({ name: this.data.name });\r\n  }\r\n\r\n  deactivateCircle(circle): void {\r\n    circle.barVisible = false;\r\n    this.deactivate.emit({ name: this.data.name });\r\n  }\r\n\r\n  trackBy(index, circle): string {\r\n    return `${circle.data.series} ${circle.data.name}`;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { BubbleChartComponent } from './bubble-chart.component';\r\nimport { BubbleSeriesComponent } from './bubble-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\r\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\r\n})\r\nexport class BubbleChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  HostListener\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\n\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-heat-map-cell]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\r\n      <defs *ngIf=\"gradient\">\r\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n      </defs>\r\n      <svg:rect\r\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\r\n        rx=\"3\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        class=\"cell\"\r\n        style=\"cursor: pointer\"\r\n        (click)=\"onClick()\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HeatMapCellComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() data;\r\n  @Input() label;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  transform: string;\r\n  activeRange: any[];\r\n  startOpacity: number;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  gradientStops: any[];\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.transform = `translate(${this.x} , ${this.y})`;\r\n\r\n    this.startOpacity = 0.3;\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n    this.gradientStops = this.getGradientStops();\r\n\r\n    if (this.animations) {\r\n      this.loadAnimation();\r\n    }\r\n  }\r\n\r\n  getGradientStops() {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.startOpacity\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element).select('.cell');\r\n    node.attr('opacity', 0);\r\n    this.animateToCurrentForm();\r\n  }\r\n\r\n  animateToCurrentForm(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    node.transition().duration(750).attr('opacity', 1);\r\n  }\r\n\r\n  onClick() {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-heat-map-cell-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-heat-map-cell\r\n      *ngFor=\"let c of cells; trackBy: trackBy\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [fill]=\"c.fill\"\r\n      [data]=\"c.data\"\r\n      (select)=\"onClick(c.cell)\"\r\n      (activate)=\"activate.emit(c.cell)\"\r\n      (deactivate)=\"deactivate.emit(c.cell)\"\r\n      [gradient]=\"gradient\"\r\n      [animations]=\"animations\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\r\n  @Input() data;\r\n  @Input() colors;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() gradient: boolean;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  cells: any[];\r\n\r\n  ngOnInit() {\r\n    if (!this.tooltipText) {\r\n      this.tooltipText = this.getTooltipText;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.cells = this.getCells();\r\n  }\r\n\r\n  getCells() {\r\n    const cells = [];\r\n\r\n    this.data.map(row => {\r\n      row.series.map(cell => {\r\n        const value = cell.value;\r\n        cell.series = row.name;\r\n\r\n        cells.push({\r\n          row,\r\n          cell,\r\n          x: this.xScale(row.name),\r\n          y: this.yScale(cell.name),\r\n          width: this.xScale.bandwidth(),\r\n          height: this.yScale.bandwidth(),\r\n          fill: this.colors.getColor(value),\r\n          data: value,\r\n          label: formatLabel(cell.name),\r\n          series: row.name\r\n        });\r\n      });\r\n    });\r\n\r\n    return cells;\r\n  }\r\n\r\n  getTooltipText({ label, data, series }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(series)} â¢ ${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.tooltipText;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { scaleBand } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-heat-map',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [animations]=\"animations\"\r\n      [legendOptions]=\"legendOptions\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:rect\r\n          *ngFor=\"let rect of rects\"\r\n          [attr.x]=\"rect.x\"\r\n          [attr.y]=\"rect.y\"\r\n          [attr.rx]=\"rect.rx\"\r\n          [attr.width]=\"rect.width\"\r\n          [attr.height]=\"rect.height\"\r\n          [attr.fill]=\"rect.fill\"\r\n        />\r\n        <svg:g\r\n          ngx-charts-heat-map-cell-series\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [data]=\"results\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipText]=\"tooltipText\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event, undefined)\"\r\n          (deactivate)=\"onDeactivate($event, undefined)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class HeatMapComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() gradient: boolean;\r\n  @Input() innerPadding: number | number[] = 8;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() min: any;\r\n  @Input() max: any;\r\n  @Input() activeEntries: any[] = [];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xDomain: any[];\r\n  yDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  color: any;\r\n  colors: ColorHelper;\r\n  colorScale: any;\r\n  transform: string;\r\n  rects: any[];\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  scaleType: string = 'linear';\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.formatDates();\r\n\r\n    this.xDomain = this.getXDomain();\r\n    this.yDomain = this.getYDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.scaleType = getScaleType(this.valueDomain, false);\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.scaleType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.scaleType === 'linear') {\r\n      let min = this.min;\r\n      let max = this.max;\r\n      if (!this.min) {\r\n        min = Math.min(0, ...this.valueDomain);\r\n      }\r\n      if (!this.max) {\r\n        max = Math.max(...this.valueDomain);\r\n      }\r\n      this.valueDomain = [min, max];\r\n    }\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n    this.rects = this.getRects();\r\n  }\r\n\r\n  getXDomain(): any {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.name)) {\r\n        domain.push(group.name);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.name)) {\r\n          domain.push(d.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  /**\r\n   * Converts the input to gap paddingInner in fraction\r\n   * Supports the following inputs:\r\n   *    Numbers: 8\r\n   *    Strings: \"8\", \"8px\", \"8%\"\r\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\r\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\r\n   *\r\n   * @memberOf HeatMapComponent\r\n   */\r\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\r\n    if (typeof value === 'string') {\r\n      value = value\r\n        .replace('[', '')\r\n        .replace(']', '')\r\n        .replace('px', '')\r\n        // tslint:disable-next-line: quotemark\r\n        .replace(\"'\", '');\r\n\r\n      if (value.includes(',')) {\r\n        value = value.split(',');\r\n      }\r\n    }\r\n    if (Array.isArray(value) && typeof index === 'number') {\r\n      return this.getDimension(value[index], null, N, L);\r\n    }\r\n    if (typeof value === 'string' && value.includes('%')) {\r\n      return +value.replace('%', '') / 100;\r\n    }\r\n    return N / (L / +value + 1);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\r\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\r\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\r\n  }\r\n\r\n  getRects(): any[] {\r\n    const rects = [];\r\n\r\n    this.xDomain.map(xVal => {\r\n      this.yDomain.map(yVal => {\r\n        rects.push({\r\n          x: this.xScale(xVal),\r\n          y: this.yScale(yVal),\r\n          rx: 3,\r\n          width: this.xScale.bandwidth(),\r\n          height: this.yScale.bandwidth(),\r\n          fill: 'rgba(200,200,200,0.03)'\r\n        });\r\n      });\r\n    });\r\n\r\n    return rects;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    return {\r\n      scaleType: this.scaleType,\r\n      domain: this.valueDomain,\r\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\r\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { HeatMapCellComponent } from './heat-map-cell.component';\r\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\r\nimport { HeatMapComponent } from './heat-map.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\r\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\r\n})\r\nexport class HeatMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { select } from 'd3-selection';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-line]',\r\n  template: `\r\n    <svg:path\r\n      [@animationState]=\"'active'\"\r\n      class=\"line\"\r\n      [attr.d]=\"initialPath\"\r\n      [attr.fill]=\"fill\"\r\n      [attr.stroke]=\"stroke\"\r\n      stroke-width=\"1.5px\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          strokeDasharray: 2000,\r\n          strokeDashoffset: 2000\r\n        }),\r\n        animate(\r\n          1000,\r\n          style({\r\n            strokeDashoffset: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class LineComponent implements OnChanges {\r\n  @Input() path;\r\n  @Input() stroke;\r\n  @Input() data;\r\n  @Input() fill: string = 'none';\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  initialized: boolean = false;\r\n  initialPath: string;\r\n\r\n  constructor(private element: ElementRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.initialized) {\r\n      this.initialized = true;\r\n      this.initialPath = this.path;\r\n    } else {\r\n      this.updatePathEl();\r\n    }\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element.nativeElement).select('.line');\r\n\r\n    if (this.animations) {\r\n      node.transition().duration(750).attr('d', this.path);\r\n    } else {\r\n      node.attr('d', this.path);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-line-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [activeTime]=\"activeTime\"\r\n          (click)=\"onXClick($event)\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [referenceLines]=\"referenceLines\"\r\n          [showRefLines]=\"showRefLines\"\r\n          [showRefLabels]=\"showRefLabels\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-line-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [curve]=\"curve\"\r\n              [rangeFillOpacity]=\"rangeFillOpacity\"\r\n              [hasRange]=\"hasRange\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [scaleType]=\"scaleType\"\r\n        [legend]=\"legend\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-line-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [curve]=\"curve\"\r\n            [hasRange]=\"hasRange\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class LineChartComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() autoScale;\r\n  @Input() timeline;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() showRefLines: boolean = false;\r\n  @Input() referenceLines: any;\r\n  @Input() showRefLabels: boolean = true;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n  @Input() activeTime;\r\n  @Output() clickCallback: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xSet: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  yScale: any;\r\n  xScale: any;\r\n  colors: ColorHelper;\r\n  scaleType: string;\r\n  transform: string;\r\n  clipPath: string;\r\n  clipPathId: string;\r\n  series: any;\r\n  areaPath: any;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n  hasRange: boolean; // whether the line has a min-max range around it\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (domain.indexOf(d.value) < 0) {\r\n          domain.push(d.value);\r\n        }\r\n        if (d.min !== undefined) {\r\n          this.hasRange = true;\r\n          if (domain.indexOf(d.min) < 0) {\r\n            domain.push(d.min);\r\n          }\r\n        }\r\n        if (d.max !== undefined) {\r\n          this.hasRange = true;\r\n          if (domain.indexOf(d.max) < 0) {\r\n            domain.push(d.max);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const values = [...domain];\r\n    if (!this.autoScale) {\r\n      values.push(0);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime().range([0, width]).domain(domain);\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear().range([0, width]).domain(domain);\r\n\r\n      if (this.roundDomains) {\r\n        scale = scale.nice();\r\n      }\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\r\n    }\r\n\r\n    return scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  onXClick(data):void{\r\n    this.clickCallback.emit(data);\r\n    this.activeTime=data;\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    this.deactivateAll();\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { area, line } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-line-series]',\r\n  template: `\r\n    <svg:g>\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-linear-gradient\r\n          *ngIf=\"hasGradient\"\r\n          orientation=\"vertical\"\r\n          [name]=\"gradientId\"\r\n          [stops]=\"gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:g\r\n        ngx-charts-area\r\n        class=\"line-highlight\"\r\n        [data]=\"data\"\r\n        [path]=\"areaPath\"\r\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\r\n        [opacity]=\"0.25\"\r\n        [startOpacity]=\"0\"\r\n        [gradient]=\"true\"\r\n        [stops]=\"areaGradientStops\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n        [animations]=\"animations\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-line\r\n        class=\"line-series\"\r\n        [data]=\"data\"\r\n        [path]=\"path\"\r\n        [stroke]=\"stroke\"\r\n        [animations]=\"animations\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-area\r\n        *ngIf=\"hasRange\"\r\n        class=\"line-series-range\"\r\n        [data]=\"data\"\r\n        [path]=\"outerPath\"\r\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n        [opacity]=\"rangeFillOpacity\"\r\n        [animations]=\"animations\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LineSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() curve: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() hasRange: boolean;\r\n  @Input() animations: boolean = true;\r\n\r\n  path: string;\r\n  outerPath: string;\r\n  areaPath: string;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n  areaGradientStops: any[];\r\n  stroke: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradients();\r\n\r\n    const data = this.sortData(this.data.series);\r\n\r\n    const lineGen = this.getLineGenerator();\r\n    this.path = lineGen(data) || '';\r\n\r\n    const areaGen = this.getAreaGenerator();\r\n    this.areaPath = areaGen(data) || '';\r\n\r\n    if (this.hasRange) {\r\n      const range = this.getRangeGenerator();\r\n      this.outerPath = range(data) || '';\r\n    }\r\n\r\n    if (this.hasGradient) {\r\n      this.stroke = this.gradientUrl;\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      if (max === min) {\r\n        this.stroke = this.colors.getColor(max);\r\n      }\r\n    } else {\r\n      this.stroke = this.colors.getColor(this.data.name);\r\n    }\r\n  }\r\n\r\n  getLineGenerator(): any {\r\n    return line<any>()\r\n      .x(d => {\r\n        const label = d.name;\r\n        let value;\r\n        if (this.scaleType === 'time') {\r\n          value = this.xScale(label);\r\n        } else if (this.scaleType === 'linear') {\r\n          value = this.xScale(Number(label));\r\n        } else {\r\n          value = this.xScale(label);\r\n        }\r\n        return value;\r\n      })\r\n      .y(d => this.yScale(d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  getRangeGenerator(): any {\r\n    return area<any>()\r\n      .x(d => {\r\n        const label = d.name;\r\n        let value;\r\n        if (this.scaleType === 'time') {\r\n          value = this.xScale(label);\r\n        } else if (this.scaleType === 'linear') {\r\n          value = this.xScale(Number(label));\r\n        } else {\r\n          value = this.xScale(label);\r\n        }\r\n        return value;\r\n      })\r\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\r\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  getAreaGenerator(): any {\r\n    const xProperty = d => {\r\n      const label = d.name;\r\n      return this.xScale(label);\r\n    };\r\n\r\n    return area<any>()\r\n      .x(xProperty)\r\n      .y0(() => this.yScale.range()[0])\r\n      .y1(d => this.yScale(d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  sortData(data) {\r\n    if (this.scaleType === 'linear') {\r\n      data = sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      data = sortByTime(data, 'name');\r\n    } else {\r\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  updateGradients() {\r\n    if (this.colors.scaleType === 'linear') {\r\n      this.hasGradient = true;\r\n      this.gradientId = 'grad' + id().toString();\r\n      this.gradientUrl = `url(#${this.gradientId})`;\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\r\n    } else {\r\n      this.hasGradient = false;\r\n      this.gradientStops = undefined;\r\n      this.areaGradientStops = undefined;\r\n    }\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { LineComponent } from './line.component';\r\nimport { LineChartComponent } from './line-chart.component';\r\nimport { LineSeriesComponent } from './line-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\r\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\r\n})\r\nexport class LineChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { curveCardinalClosed } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { getScaleType } from '../common/domain.helper';\r\nimport { isDate } from '../utils/types';\r\n\r\nconst twoPI = 2 * Math.PI;\r\n\r\n@Component({\r\n  selector: 'ngx-charts-polar-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\r\n        <svg:g [attr.transform]=\"transformPlot\">\r\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\r\n          <svg:g *ngIf=\"showGridLines\">\r\n            <svg:circle\r\n              *ngFor=\"let r of radiusTicks\"\r\n              class=\"gridline-path radial-gridline-path\"\r\n              cx=\"0\"\r\n              cy=\"0\"\r\n              [attr.r]=\"r\"\r\n            />\r\n          </svg:g>\r\n          <svg:g *ngIf=\"xAxis\">\r\n            <svg:g\r\n              ngx-charts-pie-label\r\n              *ngFor=\"let tick of thetaTicks\"\r\n              [data]=\"tick\"\r\n              [radius]=\"outerRadius\"\r\n              [label]=\"tick.label\"\r\n              [max]=\"outerRadius\"\r\n              [value]=\"showGridLines ? 1 : outerRadius\"\r\n              [explodeSlices]=\"true\"\r\n              [animations]=\"animations\"\r\n              [labelTrim]=\"labelTrim\"\r\n              [labelTrimSize]=\"labelTrimSize\"\r\n            ></svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          [attr.transform]=\"transformYAxis\"\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yAxisScale\"\r\n          [dims]=\"yAxisDims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-axis-label\r\n          *ngIf=\"xAxis && showXAxisLabel\"\r\n          [label]=\"xAxisLabel\"\r\n          [offset]=\"labelOffset\"\r\n          [orient]=\"'bottom'\"\r\n          [height]=\"dims.height\"\r\n          [width]=\"dims.width\"\r\n        ></svg:g>\r\n        <svg:g [attr.transform]=\"transformPlot\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-polar-series\r\n              [gradient]=\"gradient\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [curve]=\"curve\"\r\n              [rangeFillOpacity]=\"rangeFillOpacity\"\r\n              [animations]=\"animations\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              (select)=\"onClick($event)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n            />\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: [\r\n    '../common/base-chart.component.scss',\r\n    '../pie-chart/pie-chart.component.scss',\r\n    './polar-chart.component.scss'\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class PolarChartComponent extends BaseChartComponent {\r\n  @Input() legend: boolean;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis: boolean;\r\n  @Input() yAxis: boolean;\r\n  @Input() showXAxisLabel: boolean;\r\n  @Input() showYAxisLabel: boolean;\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() autoScale: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveCardinalClosed;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() rangeFillOpacity: number = 0.15;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: (o: any) => any;\r\n  @Input() yAxisTickFormatting: (o: any) => any;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() showSeriesOnHover: boolean = true;\r\n  @Input() gradient: boolean = false;\r\n  @Input() yAxisMinScale: number = 0;\r\n  @Input() labelTrim: boolean = true;\r\n  @Input() labelTrimSize: number = 10;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  yAxisDims: ViewDimensions;\r\n  labelOffset: number;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  yScale: any; // -> rScale\r\n  xScale: any; // -> tScale\r\n  yAxisScale: any; // -> yScale\r\n  colors: ColorHelper;\r\n  scaleType: string;\r\n  transform: string;\r\n  transformPlot: string;\r\n  transformYAxis: string;\r\n  transformXAxis: string;\r\n  series: any; // ???\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n  thetaTicks: any[];\r\n  radiusTicks: number[];\r\n  outerRadius: number;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.setDims();\r\n\r\n    this.setScales();\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.setTicks();\r\n  }\r\n\r\n  setDims() {\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    const halfWidth = Math.floor(this.dims.width / 2);\r\n    const halfHeight = Math.floor(this.dims.height / 2);\r\n\r\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\r\n\r\n    const yOffset = Math.max(0, halfHeight - outerRadius);\r\n\r\n    this.yAxisDims = {\r\n      ...this.dims,\r\n      width: halfWidth\r\n    };\r\n\r\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\r\n    this.transformYAxis = `translate(0, ${yOffset})`;\r\n    this.labelOffset = this.dims.height + 40;\r\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\r\n  }\r\n\r\n  setScales() {\r\n    const xValues = this.getXValues();\r\n    this.scaleType = getScaleType(xValues);\r\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, twoPI);\r\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\r\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\r\n  }\r\n\r\n  setTicks() {\r\n    let tickFormat;\r\n    if (this.xAxisTickFormatting) {\r\n      tickFormat = this.xAxisTickFormatting;\r\n    } else if (this.xScale.tickFormat) {\r\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\r\n    } else {\r\n      tickFormat = d => {\r\n        if (isDate(d)) {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    const outerRadius = this.outerRadius;\r\n    const s = 1.1;\r\n\r\n    this.thetaTicks = this.xDomain.map(d => {\r\n      const startAngle = this.xScale(d);\r\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\r\n      const label = tickFormat(d);\r\n\r\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\r\n      const pos = [dd, s * startPos[1]];\r\n      return {\r\n        innerRadius: 0,\r\n        outerRadius,\r\n        startAngle,\r\n        endAngle: startAngle,\r\n        value: outerRadius,\r\n        label,\r\n        startPos,\r\n        pos\r\n      };\r\n    });\r\n\r\n    const minDistance = 10;\r\n\r\n    /* from pie chart, abstract out -*/\r\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\r\n      const a = this.thetaTicks[i];\r\n\r\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\r\n        const b = this.thetaTicks[j];\r\n        // if they're on the same side\r\n        if (b.pos[0] * a.pos[0] > 0) {\r\n          // if they're overlapping\r\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\r\n          if (o > 0) {\r\n            // push the second up or down\r\n            b.pos[1] += Math.sign(b.pos[0]) * o;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\r\n  }\r\n\r\n  getXValues(): any[] {\r\n    const values = [];\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.name)) {\r\n          values.push(d.name);\r\n        }\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  getXDomain(values = this.getXValues()): any[] {\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      return [min, max];\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      return [min, max];\r\n    }\r\n    return values;\r\n  }\r\n\r\n  getYValues(): any[] {\r\n    const domain = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (domain.indexOf(d.value) < 0) {\r\n          domain.push(d.value);\r\n        }\r\n        if (d.min !== undefined) {\r\n          if (domain.indexOf(d.min) < 0) {\r\n            domain.push(d.min);\r\n          }\r\n        }\r\n        if (d.max !== undefined) {\r\n          if (domain.indexOf(d.max) < 0) {\r\n            domain.push(d.max);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(domain = this.getYValues()): any[] {\r\n    let min = Math.min(...domain);\r\n    const max = Math.max(this.yAxisMinScale, ...domain);\r\n\r\n    min = Math.max(0, min);\r\n    if (!this.autoScale) {\r\n      min = Math.min(0, min);\r\n    }\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    switch (this.scaleType) {\r\n      case 'time':\r\n        return scaleTime().range([0, width]).domain(domain);\r\n      case 'linear':\r\n        const scale = scaleLinear().range([0, width]).domain(domain);\r\n        return this.roundDomains ? scale.nice() : scale;\r\n      default:\r\n        return scalePoint()\r\n          .range([0, width - twoPI / domain.length])\r\n          .padding(0)\r\n          .domain(domain);\r\n    }\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([0, height]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    if (this.schemeType === 'ordinal') {\r\n      return {\r\n        scaleType: this.schemeType,\r\n        colors: this.colors,\r\n        domain: this.seriesDomain,\r\n        title: this.legendTitle,\r\n        position: this.legendPosition\r\n      };\r\n    }\r\n    return {\r\n      scaleType: this.schemeType,\r\n      colors: this.colors.scale,\r\n      domain: this.yDomain,\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n}\r\n","export function isDate(value) {\r\n  return toString.call(value) === '[object Date]';\r\n}\r\n\r\nexport function isNumber(value) {\r\n  return typeof value === 'number';\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { lineRadial } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\nimport { escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-polar-series]',\r\n  template: `\r\n    <svg:g class=\"polar-charts-series\">\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-radial-gradient\r\n          *ngIf=\"hasGradient\"\r\n          orientation=\"vertical\"\r\n          [color]=\"seriesColor\"\r\n          [name]=\"gradientId\"\r\n          [startOpacity]=\"0.25\"\r\n          [endOpacity]=\"1\"\r\n          [stops]=\"gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:g\r\n        ngx-charts-line\r\n        class=\"polar-series-path\"\r\n        [path]=\"path\"\r\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\r\n        [class.active]=\"active\"\r\n        [class.inactive]=\"inactive\"\r\n        [attr.fill-opacity]=\"rangeFillOpacity\"\r\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\r\n        [animations]=\"animations\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-circle\r\n        *ngFor=\"let circle of circles\"\r\n        class=\"circle\"\r\n        [cx]=\"circle.cx\"\r\n        [cy]=\"circle.cy\"\r\n        [r]=\"circleRadius\"\r\n        [fill]=\"circle.color\"\r\n        [style.opacity]=\"inactive ? 0.2 : 1\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        tooltipType=\"tooltip\"\r\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"circle.data\"\r\n        (select)=\"select.emit(circle.data)\"\r\n        (activate)=\"activate.emit({ name: circle.data.series })\"\r\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PolarSeriesComponent implements OnChanges {\r\n  @Input() name;\r\n  @Input() data;\r\n  @Input() xScale; // Theta\r\n  @Input() yScale; // R\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() curve: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: (o: any) => string;\r\n  @Input() gradient: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  path: string;\r\n  circles: any[];\r\n  circleRadius: number = 3;\r\n\r\n  outerPath: string;\r\n  areaPath: string;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n  areaGradientStops: any[];\r\n  seriesColor: string;\r\n\r\n  active: boolean;\r\n  inactive: boolean;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradients();\r\n\r\n    const line = this.getLineGenerator();\r\n\r\n    const data = this.sortData(this.data.series);\r\n\r\n    const seriesName = this.data.name;\r\n    const linearScaleType = this.colors.scaleType === 'linear';\r\n    const min = this.yScale.domain()[0];\r\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\r\n\r\n    this.path = line(data) || '';\r\n\r\n    this.circles = data.map(d => {\r\n      const a = this.getAngle(d);\r\n      const r = this.getRadius(d);\r\n      const value = d.value;\r\n\r\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\r\n\r\n      const cData = Object.assign({}, d, {\r\n        series: seriesName,\r\n        value,\r\n        name: d.name\r\n      });\r\n\r\n      return {\r\n        data: cData,\r\n        cx: r * Math.sin(a),\r\n        cy: -r * Math.cos(a),\r\n        value,\r\n        color,\r\n        label: d.name\r\n      };\r\n    });\r\n\r\n    this.active = this.isActive(this.data);\r\n    this.inactive = this.isInactive(this.data);\r\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\r\n  }\r\n\r\n  getAngle(d) {\r\n    const label = d.name;\r\n    if (this.scaleType === 'time') {\r\n      return this.xScale(label);\r\n    } else if (this.scaleType === 'linear') {\r\n      return this.xScale(Number(label));\r\n    }\r\n    return this.xScale(label);\r\n  }\r\n\r\n  getRadius(d) {\r\n    return this.yScale(d.value);\r\n  }\r\n\r\n  getLineGenerator(): any {\r\n    return lineRadial<any>()\r\n      .angle(d => this.getAngle(d))\r\n      .radius(d => this.getRadius(d))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  sortData(data) {\r\n    if (this.scaleType === 'linear') {\r\n      return sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      return sortByTime(data, 'name');\r\n    }\r\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n\r\n  defaultTooltipText({ label, value }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} â¢ ${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  updateGradients() {\r\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\r\n\r\n    if (!this.hasGradient) {\r\n      return;\r\n    }\r\n\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n\r\n    if (this.colors.scaleType === 'linear') {\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n    } else {\r\n      this.gradientStops = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-advanced-pie-chart',\r\n  template: `\r\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\r\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\r\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\r\n            <svg:g\r\n              ngx-charts-pie-series\r\n              [colors]=\"colors\"\r\n              [series]=\"results\"\r\n              [innerRadius]=\"innerRadius\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [outerRadius]=\"outerRadius\"\r\n              [gradient]=\"gradient\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              [tooltipText]=\"tooltipText\"\r\n              (select)=\"onClick($event)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n              [animations]=\"animations\"\r\n            ></svg:g>\r\n          </svg:g>\r\n        </ngx-charts-chart>\r\n      </div>\r\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\r\n        <ngx-charts-advanced-legend\r\n          [data]=\"results\"\r\n          [colors]=\"colors\"\r\n          [width]=\"width - dims.width - margin[1]\"\r\n          [label]=\"label\"\r\n          [animations]=\"animations\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"nameFormatting\"\r\n          [percentageFormatting]=\"percentageFormatting\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event, true)\"\r\n          (deactivate)=\"onDeactivate($event, true)\"\r\n        >\r\n        </ngx-charts-advanced-legend>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AdvancedPieChartComponent extends BaseChartComponent {\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() label: string = 'Total';\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  data: any;\r\n  dims: ViewDimensions;\r\n  domain: any[];\r\n  outerRadius: number;\r\n  innerRadius: number;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  legendWidth: number;\r\n  margin = [20, 20, 20, 20];\r\n\r\n  @Input() valueFormatting: (value: number) => any;\r\n  @Input() nameFormatting: (value: string) => any;\r\n  @Input() percentageFormatting: (value: number) => any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: (this.width * 4) / 12.0,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n    this.setColors();\r\n\r\n    const xOffset = this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\r\n\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\r\n    this.innerRadius = this.outerRadius * 0.75;\r\n\r\n    this.transform = `translate(${xOffset} , ${yOffset})`;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data: DataItem) {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { arc } from 'd3-shape';\r\n\r\nimport { trimLabel } from '../common/trim-label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-label]',\r\n  template: `\r\n    <title>{{ label }}</title>\r\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\r\n      <svg:text\r\n        class=\"pie-label\"\r\n        [class.animation]=\"animations\"\r\n        dy=\".35em\"\r\n        [style.textAnchor]=\"textAnchor()\"\r\n        [style.shapeRendering]=\"'crispEdges'\"\r\n      >\r\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\r\n      </svg:text>\r\n    </svg:g>\r\n    <svg:path\r\n      [attr.d]=\"line\"\r\n      [attr.stroke]=\"color\"\r\n      fill=\"none\"\r\n      class=\"pie-label-line line\"\r\n      [class.animation]=\"animations\"\r\n    ></svg:path>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieLabelComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() radius;\r\n  @Input() label;\r\n  @Input() color;\r\n  @Input() max;\r\n  @Input() value;\r\n  @Input() explodeSlices;\r\n  @Input() animations: boolean = true;\r\n  @Input() labelTrim: boolean = true;\r\n  @Input() labelTrimSize: number = 10;\r\n\r\n  trimLabel: (label: string, max?: number) => string;\r\n  line: string;\r\n\r\n  private readonly isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\r\n\r\n  constructor() {\r\n    this.trimLabel = trimLabel;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    let startRadius = this.radius;\r\n    if (this.explodeSlices) {\r\n      startRadius = (this.radius * this.value) / this.max;\r\n    }\r\n\r\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\r\n\r\n    // Calculate innerPos then scale outer position to match label position\r\n    const innerPos = innerArc.centroid(this.data);\r\n\r\n    let scale = this.data.pos[1] / innerPos[1];\r\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\r\n      scale = 1;\r\n    }\r\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\r\n\r\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\r\n  }\r\n\r\n  get textX(): number {\r\n    return this.data.pos[0];\r\n  }\r\n\r\n  get textY(): number {\r\n    return this.data.pos[1];\r\n  }\r\n\r\n  get styleTransform(): string {\r\n    return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\r\n  }\r\n\r\n  get attrTransform(): string {\r\n    return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\r\n  }\r\n\r\n  get textTransition(): string {\r\n    return this.isIE || !this.animations ? null : 'transform 0.75s';\r\n  }\r\n\r\n  textAnchor(): any {\r\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\r\n  }\r\n\r\n  midAngle(d): number {\r\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { interpolate } from 'd3-interpolate';\r\nimport { select } from 'd3-selection';\r\nimport { arc } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\n/* tslint:disable */\r\nimport { MouseEvent } from '../events';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-arc]',\r\n  template: `\r\n    <svg:g class=\"arc-group\">\r\n      <svg:defs *ngIf=\"gradient\">\r\n        <svg:g\r\n          ngx-charts-svg-radial-gradient\r\n          [color]=\"fill\"\r\n          orientation=\"vertical\"\r\n          [name]=\"radialGradientId\"\r\n          [startOpacity]=\"startOpacity\"\r\n        />\r\n      </svg:defs>\r\n      <svg:path\r\n        [attr.d]=\"path\"\r\n        class=\"arc\"\r\n        [class.active]=\"isActive\"\r\n        [attr.fill]=\"getGradient()\"\r\n        (click)=\"onClick()\"\r\n        (dblclick)=\"onDblClick($event)\"\r\n        (mouseenter)=\"activate.emit(data)\"\r\n        (mouseleave)=\"deactivate.emit(data)\"\r\n        [style.pointer-events]=\"getPointerEvents()\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieArcComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() startAngle: number = 0;\r\n  @Input() endAngle: number = Math.PI * 2;\r\n  @Input() innerRadius;\r\n  @Input() outerRadius;\r\n  @Input() cornerRadius: number = 0;\r\n  @Input() value;\r\n  @Input() max;\r\n  @Input() data;\r\n  @Input() explodeSlices: boolean = false;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animate: boolean = true;\r\n  @Input() pointerEvents: boolean = true;\r\n  @Input() isActive: boolean = false;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dblclick = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  path: any;\r\n  startOpacity: number;\r\n  radialGradientId: string;\r\n  linearGradientId: string;\r\n  gradientFill: string;\r\n  initialized: boolean = false;\r\n  private _timeout;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getGradient() {\r\n    return this.gradient ? this.gradientFill : this.fill;\r\n  }\r\n\r\n  getPointerEvents() {\r\n    return this.pointerEvents ? 'auto' : 'none';\r\n  }\r\n\r\n  update(): void {\r\n    const calc = this.calculateArc();\r\n    this.startOpacity = 0.5;\r\n    this.radialGradientId = 'linearGrad' + id().toString();\r\n    this.gradientFill = `url(#${this.radialGradientId})`;\r\n\r\n    if (this.animate) {\r\n      if (this.initialized) {\r\n        this.updateAnimation();\r\n      } else {\r\n        this.loadAnimation();\r\n        this.initialized = true;\r\n      }\r\n    } else {\r\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\r\n    }\r\n  }\r\n\r\n  calculateArc(): any {\r\n    let outerRadius = this.outerRadius;\r\n    if (this.explodeSlices && this.innerRadius === 0) {\r\n      outerRadius = (this.outerRadius * this.value) / this.max;\r\n    }\r\n\r\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element)\r\n      .selectAll('.arc')\r\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\r\n\r\n    const calc = this.calculateArc();\r\n\r\n    node\r\n      .transition()\r\n      .attrTween('d', function (d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const copyOfD = Object.assign({}, d);\r\n        copyOfD.endAngle = copyOfD.startAngle;\r\n        const interpolater = interpolate(copyOfD, copyOfD);\r\n        (<any>this)._current = interpolater(0);\r\n        return function (t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      })\r\n      .transition()\r\n      .duration(750)\r\n      .attrTween('d', function (d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const interpolater = interpolate((<any>this)._current, d);\r\n        (<any>this)._current = interpolater(0);\r\n        return function (t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      });\r\n  }\r\n\r\n  updateAnimation(): void {\r\n    const node = select(this.element)\r\n      .selectAll('.arc')\r\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\r\n\r\n    const calc = this.calculateArc();\r\n\r\n    node\r\n      .transition()\r\n      .duration(750)\r\n      .attrTween('d', function (d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const interpolater = interpolate((<any>this)._current, d);\r\n        (<any>this)._current = interpolater(0);\r\n        return function (t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      });\r\n  }\r\n\r\n  onClick(): void {\r\n    clearTimeout(this._timeout);\r\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\r\n  }\r\n\r\n  onDblClick(event: MouseEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    clearTimeout(this._timeout);\r\n\r\n    this.dblclick.emit({\r\n      data: this.data,\r\n      nativeEvent: event\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-pie-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\r\n        <svg:g\r\n          ngx-charts-pie-series\r\n          [colors]=\"colors\"\r\n          [series]=\"data\"\r\n          [showLabels]=\"labels\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [trimLabels]=\"trimLabels\"\r\n          [maxLabelLength]=\"maxLabelLength\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [innerRadius]=\"innerRadius\"\r\n          [outerRadius]=\"outerRadius\"\r\n          [explodeSlices]=\"explodeSlices\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipText]=\"tooltipText\"\r\n          (dblclick)=\"dblclick.emit($event)\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieChartComponent extends BaseChartComponent {\r\n  @Input() labels = false;\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() explodeSlices = false;\r\n  @Input() doughnut = false;\r\n  @Input() arcWidth = 0.25;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() labelFormatting: any;\r\n  @Input() trimLabels: boolean = true;\r\n  @Input() maxLabelLength: number = 10;\r\n  @Input() tooltipText: any;\r\n  @Output() dblclick = new EventEmitter();\r\n  // optional margins\r\n  @Input() margins: number[];\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  translation: string;\r\n  outerRadius: number;\r\n  innerRadius: number;\r\n  data: any;\r\n  colors: ColorHelper;\r\n  domain: any;\r\n  dims: any;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\r\n      this.margins = [30, 80, 30, 80];\r\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\r\n      // default value for margins\r\n      this.margins = [20, 20, 20, 20];\r\n    }\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margins,\r\n      showLegend: this.legend,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    const xOffset = this.margins[3] + this.dims.width / 2;\r\n    const yOffset = this.margins[0] + this.dims.height / 2;\r\n    this.translation = `translate(${xOffset}, ${yOffset})`;\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\r\n    if (this.labels) {\r\n      // make room for labels\r\n      this.outerRadius /= 3;\r\n    } else {\r\n      this.outerRadius /= 2;\r\n    }\r\n    this.innerRadius = 0;\r\n    if (this.doughnut) {\r\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\r\n    }\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    // sort data according to domain\r\n    this.data = this.results.sort((a, b) => {\r\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\r\n    });\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      domain: this.domain,\r\n      colors: this.colors,\r\n      title: this.legendTitle,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  private hasNoOptionalMarginsSet(): boolean {\r\n    return !this.margins || this.margins.length <= 0;\r\n  }\r\n}\r\n","import { scaleBand } from 'd3-scale';\r\n\r\nexport function gridSize(dims, len, minWidth) {\r\n  let rows = 1;\r\n  let cols = len;\r\n  const width = dims.width;\r\n\r\n  if (width > minWidth) {\r\n    while (width / cols < minWidth) {\r\n      rows += 1;\r\n      cols = Math.ceil(len / rows);\r\n    }\r\n  }\r\n\r\n  return [cols, rows];\r\n}\r\n\r\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\r\n  const xScale: any = scaleBand<number>();\r\n  const yScale: any = scaleBand<number>();\r\n  const width = dims.width;\r\n  const height = dims.height;\r\n\r\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\r\n\r\n  const xDomain = [];\r\n  const yDomain = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    yDomain.push(i);\r\n  }\r\n  for (let i = 0; i < columns; i++) {\r\n    xDomain.push(i);\r\n  }\r\n  xScale.domain(xDomain);\r\n  yScale.domain(yDomain);\r\n\r\n  xScale.rangeRound([0, width], 0.1);\r\n  yScale.rangeRound([0, height], 0.1);\r\n\r\n  const res = [];\r\n  const total = designatedTotal ? designatedTotal : getTotal(data);\r\n  const cardWidth = xScale.bandwidth();\r\n  const cardHeight = yScale.bandwidth();\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    res[i] = {};\r\n    res[i].data = {\r\n      name: data[i] ? data[i].name : '',\r\n      value: data[i] ? data[i].value : undefined,\r\n      extra: data[i] ? data[i].extra : undefined,\r\n      label: data[i] ? data[i].label : ''\r\n    };\r\n    res[i].x = xScale(i % columns);\r\n    res[i].y = yScale(Math.floor(i / columns));\r\n    res[i].width = cardWidth;\r\n    res[i].height = cardHeight;\r\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\r\n    res[i].data.total = total;\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nfunction getTotal(results) {\r\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { min } from 'd3-array';\r\nimport { format } from 'd3-format';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { gridLayout } from '../common/grid-layout.helper';\r\nimport { formatLabel } from '../common/label.helper';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-pie-grid',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\r\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\r\n          <svg:g\r\n            ngx-charts-pie-grid-series\r\n            [colors]=\"series.colors\"\r\n            [data]=\"series.data\"\r\n            [innerRadius]=\"series.innerRadius\"\r\n            [outerRadius]=\"series.outerRadius\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event)\"\r\n            ngx-tooltip\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipPlacement]=\"'top'\"\r\n            [tooltipType]=\"'tooltip'\"\r\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [tooltipContext]=\"series.data[0].data\"\r\n            (activate)=\"onActivate($event)\"\r\n            (deactivate)=\"onDeactivate($event)\"\r\n          />\r\n          <svg:text\r\n            *ngIf=\"animations\"\r\n            class=\"label percent-label\"\r\n            dy=\"-0.5em\"\r\n            x=\"0\"\r\n            y=\"5\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"series.percent\"\r\n            [countSuffix]=\"'%'\"\r\n            text-anchor=\"middle\"\r\n          ></svg:text>\r\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\r\n            {{ series.percent.toLocaleString() }}\r\n          </svg:text>\r\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\r\n            {{ series.label }}\r\n          </svg:text>\r\n          <svg:text\r\n            *ngIf=\"animations\"\r\n            class=\"label\"\r\n            dy=\"1.23em\"\r\n            x=\"0\"\r\n            [attr.y]=\"series.outerRadius\"\r\n            text-anchor=\"middle\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"series.total\"\r\n            [countPrefix]=\"label + ': '\"\r\n          ></svg:text>\r\n          <svg:text\r\n            *ngIf=\"!animations\"\r\n            class=\"label\"\r\n            dy=\"1.23em\"\r\n            x=\"0\"\r\n            [attr.y]=\"series.outerRadius\"\r\n            text-anchor=\"middle\"\r\n          >\r\n            {{ label }}: {{ series.total.toLocaleString() }}\r\n          </svg:text>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieGridComponent extends BaseChartComponent {\r\n  @Input() designatedTotal: number;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: (o: any) => any;\r\n  @Input() label: string = 'Total';\r\n  @Input() minWidth: number = 150;\r\n  @Input() activeEntries: any[] = [];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  dims: ViewDimensions;\r\n  data: any[];\r\n  transform: string;\r\n  series: any[];\r\n  domain: any[];\r\n  colorScale: ColorHelper;\r\n  margin = [20, 20, 20, 20];\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\r\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\r\n\r\n    this.series = this.getSeries();\r\n    this.setColors();\r\n\r\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\r\n  }\r\n\r\n  defaultTooltipText({ data }): string {\r\n    const label = trimLabel(formatLabel(data.name));\r\n    const val = data.value.toLocaleString();\r\n    return `\r\n      <span class=\"tooltip-label\">${label}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  getSeries(): any[] {\r\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\r\n\r\n    return this.data.map(d => {\r\n      const baselineLabelHeight = 20;\r\n      const padding = 10;\r\n      const name = d.data.name;\r\n      const label = formatLabel(name);\r\n      const value = d.data.value;\r\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\r\n      const innerRadius = radius * 0.9;\r\n\r\n      let count = 0;\r\n      const colors = () => {\r\n        count += 1;\r\n        if (count === 1) {\r\n          return 'rgba(100,100,100,0.3)';\r\n        } else {\r\n          return this.colorScale.getColor(label);\r\n        }\r\n      };\r\n\r\n      const xPos = d.x + (d.width - padding) / 2;\r\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\r\n\r\n      return {\r\n        transform: `translate(${xPos}, ${yPos})`,\r\n        colors,\r\n        innerRadius,\r\n        outerRadius: radius,\r\n        name,\r\n        label: trimLabel(label),\r\n        total: value,\r\n        value,\r\n        percent: format('.1%')(d.data.percent),\r\n        data: [\r\n          d,\r\n          {\r\n            data: {\r\n              other: true,\r\n              value: total - value,\r\n              name: d.data.name\r\n            }\r\n          }\r\n        ]\r\n      };\r\n    });\r\n  }\r\n\r\n  getTotal(): any {\r\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { pie } from 'd3-shape';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-grid-series]',\r\n  template: `\r\n    <svg:g class=\"pie-grid-arcs\">\r\n      <svg:g\r\n        ngx-charts-pie-arc\r\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\r\n        [attr.class]=\"arc.class\"\r\n        [startAngle]=\"arc.startAngle\"\r\n        [endAngle]=\"arc.endAngle\"\r\n        [innerRadius]=\"innerRadius\"\r\n        [outerRadius]=\"outerRadius\"\r\n        [fill]=\"color(arc)\"\r\n        [value]=\"arc.data.value\"\r\n        [data]=\"arc.data\"\r\n        [gradient]=\"false\"\r\n        [pointerEvents]=\"arc.pointerEvents\"\r\n        [animate]=\"arc.animate\"\r\n        (select)=\"onClick($event)\"\r\n        (activate)=\"activate.emit($event)\"\r\n        (deactivate)=\"deactivate.emit($event)\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieGridSeriesComponent implements OnChanges {\r\n  @Input() colors;\r\n  @Input() data;\r\n  @Input() innerRadius = 70;\r\n  @Input() outerRadius = 80;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  layout: any;\r\n  arcs: any;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.layout = pie<any, any>()\r\n      .value(d => d.data.value)\r\n      .sort(null);\r\n\r\n    this.arcs = this.getArcs();\r\n  }\r\n\r\n  getArcs(): any[] {\r\n    return this.layout(this.data).map((arc, index) => {\r\n      const label = arc.data.data.name;\r\n      const other = arc.data.data.other;\r\n\r\n      if (index === 0) {\r\n        arc.startAngle = 0;\r\n      }\r\n\r\n      const color = this.colors(label);\r\n      return {\r\n        data: arc.data.data,\r\n        class: 'arc ' + 'arc' + index,\r\n        fill: color,\r\n        startAngle: other ? 0 : arc.startAngle,\r\n        endAngle: arc.endAngle,\r\n        animate: this.animations && !other,\r\n        pointerEvents: !other\r\n      };\r\n    });\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(this.data[0].data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.data.name;\r\n  }\r\n\r\n  label(arc): string {\r\n    return arc.data.name;\r\n  }\r\n\r\n  color(arc): any {\r\n    return this.colors(this.label(arc));\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  SimpleChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { max } from 'd3-array';\r\nimport { arc, pie } from 'd3-shape';\r\n\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-series]',\r\n  template: `\r\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\r\n      <svg:g\r\n        ngx-charts-pie-label\r\n        *ngIf=\"labelVisible(arc)\"\r\n        [data]=\"arc\"\r\n        [radius]=\"outerRadius\"\r\n        [color]=\"color(arc)\"\r\n        [label]=\"labelText(arc)\"\r\n        [labelTrim]=\"trimLabels\"\r\n        [labelTrimSize]=\"maxLabelLength\"\r\n        [max]=\"max\"\r\n        [value]=\"arc.value\"\r\n        [explodeSlices]=\"explodeSlices\"\r\n        [animations]=\"animations\"\r\n      ></svg:g>\r\n      <svg:g\r\n        ngx-charts-pie-arc\r\n        [startAngle]=\"arc.startAngle\"\r\n        [endAngle]=\"arc.endAngle\"\r\n        [innerRadius]=\"innerRadius\"\r\n        [outerRadius]=\"outerRadius\"\r\n        [fill]=\"color(arc)\"\r\n        [value]=\"arc.data.value\"\r\n        [gradient]=\"gradient\"\r\n        [data]=\"arc.data\"\r\n        [max]=\"max\"\r\n        [explodeSlices]=\"explodeSlices\"\r\n        [isActive]=\"isActive(arc.data)\"\r\n        [animate]=\"animations\"\r\n        (select)=\"onClick($event)\"\r\n        (activate)=\"activate.emit($event)\"\r\n        (deactivate)=\"deactivate.emit($event)\"\r\n        (dblclick)=\"dblclick.emit($event)\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"arc.data\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieSeriesComponent implements OnChanges {\r\n  @Input() colors;\r\n  @Input() series: any = [];\r\n  @Input() dims;\r\n  @Input() innerRadius = 60;\r\n  @Input() outerRadius = 80;\r\n  @Input() explodeSlices;\r\n  @Input() showLabels;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() labelFormatting: any;\r\n  @Input() trimLabels: boolean = true;\r\n  @Input() maxLabelLength: number = 10;\r\n  @Input() tooltipText: (o: any) => any;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dblclick = new EventEmitter();\r\n\r\n  max: number;\r\n  data: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    const pieGenerator = pie<any, any>()\r\n      .value(d => d.value)\r\n      .sort(null);\r\n\r\n    const arcData = pieGenerator(this.series);\r\n\r\n    this.max = max(arcData, d => {\r\n      return d.value;\r\n    });\r\n\r\n    this.data = this.calculateLabelPositions(arcData);\r\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\r\n  }\r\n\r\n  midAngle(d): number {\r\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n  }\r\n\r\n  outerArc(): any {\r\n    const factor = 1.5;\r\n\r\n    return arc()\r\n      .innerRadius(this.outerRadius * factor)\r\n      .outerRadius(this.outerRadius * factor);\r\n  }\r\n\r\n  calculateLabelPositions(pieData): any {\r\n    const factor = 1.5;\r\n    const minDistance = 10;\r\n    const labelPositions = pieData;\r\n\r\n    labelPositions.forEach(d => {\r\n      d.pos = this.outerArc().centroid(d);\r\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\r\n    });\r\n\r\n    for (let i = 0; i < labelPositions.length - 1; i++) {\r\n      const a = labelPositions[i];\r\n      if (!this.labelVisible(a)) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = i + 1; j < labelPositions.length; j++) {\r\n        const b = labelPositions[j];\r\n        if (!this.labelVisible(b)) {\r\n          continue;\r\n        }\r\n        // if they're on the same side\r\n        if (b.pos[0] * a.pos[0] > 0) {\r\n          // if they're overlapping\r\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\r\n          if (o > 0) {\r\n            // push the second up or down\r\n            b.pos[1] += Math.sign(b.pos[0]) * o;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return labelPositions;\r\n  }\r\n\r\n  labelVisible(myArc): boolean {\r\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\r\n  }\r\n\r\n  getTooltipTitle(a) {\r\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\r\n  }\r\n\r\n  labelText(myArc): string {\r\n    if (this.labelFormatting) {\r\n      return this.labelFormatting(myArc.data.name);\r\n    }\r\n    return this.label(myArc);\r\n  }\r\n\r\n  label(myArc): string {\r\n    return formatLabel(myArc.data.name);\r\n  }\r\n\r\n  defaultTooltipText(myArc): string {\r\n    const label = this.label(myArc);\r\n    const val = formatLabel(myArc.data.value);\r\n\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n\r\n  color(myArc): any {\r\n    return this.colors.getColor(this.label(myArc));\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.data.name;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\r\nimport { PieLabelComponent } from './pie-label.component';\r\nimport { PieArcComponent } from './pie-arc.component';\r\nimport { PieChartComponent } from './pie-chart.component';\r\nimport { PieGridComponent } from './pie-grid.component';\r\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\r\nimport { PieSeriesComponent } from './pie-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [\r\n    AdvancedPieChartComponent,\r\n    PieLabelComponent,\r\n    PieArcComponent,\r\n    PieChartComponent,\r\n    PieGridComponent,\r\n    PieGridSeriesComponent,\r\n    PieSeriesComponent\r\n  ],\r\n  exports: [\r\n    AdvancedPieChartComponent,\r\n    PieLabelComponent,\r\n    PieArcComponent,\r\n    PieChartComponent,\r\n    PieGridComponent,\r\n    PieGridSeriesComponent,\r\n    PieSeriesComponent\r\n  ]\r\n})\r\nexport class PieChartModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { PolarChartComponent } from './polar-chart.component';\r\nimport { PolarSeriesComponent } from './polar-series.component';\r\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\r\nimport { LineChartModule } from '../line-chart/line-chart.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\r\n  declarations: [PolarChartComponent, PolarSeriesComponent],\r\n  exports: [PolarChartComponent, PolarSeriesComponent]\r\n})\r\nexport class PolarChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ViewChild,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  NgZone,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { roundedRect } from '../common/shape.helper';\r\nimport { escapeLabel } from '../common/label.helper';\r\nimport { decimalChecker, count } from '../common/count/count.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-card]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\r\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\r\n      <svg:path\r\n        *ngIf=\"bandColor && bandColor !== color\"\r\n        class=\"card-band\"\r\n        [attr.fill]=\"bandColor\"\r\n        [attr.transform]=\"transformBand\"\r\n        stroke=\"none\"\r\n        [attr.d]=\"bandPath\"\r\n      />\r\n      <title>{{ label }}</title>\r\n      <svg:foreignObject\r\n        class=\"trimmed-label\"\r\n        x=\"5\"\r\n        [attr.x]=\"textPadding[3]\"\r\n        [attr.y]=\"cardHeight - textPadding[2]\"\r\n        [attr.width]=\"textWidth\"\r\n        [attr.height]=\"labelFontSize + textPadding[2]\"\r\n        alignment-baseline=\"hanging\"\r\n      >\r\n        <xhtml:p\r\n          [style.color]=\"textColor\"\r\n          [style.fontSize.px]=\"labelFontSize\"\r\n          [style.lineHeight.px]=\"labelFontSize\"\r\n          [innerHTML]=\"formattedLabel\"\r\n        >\r\n        </xhtml:p>\r\n      </svg:foreignObject>\r\n      <svg:text\r\n        #textEl\r\n        class=\"value-text\"\r\n        [attr.x]=\"textPadding[3]\"\r\n        [attr.y]=\"textPadding[0]\"\r\n        [style.fill]=\"textColor\"\r\n        text-anchor=\"start\"\r\n        alignment-baseline=\"hanging\"\r\n        [style.font-size.pt]=\"textFontSize\"\r\n      >\r\n        {{ value }}\r\n      </svg:text>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CardComponent implements OnChanges, OnDestroy {\r\n  @Input() color;\r\n  @Input() bandColor;\r\n  @Input() textColor;\r\n\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() label;\r\n  @Input() data;\r\n  @Input() medianSize: number;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\r\n\r\n  element: HTMLElement;\r\n  value: string = '';\r\n  transform: string;\r\n  formattedLabel: string;\r\n  cardWidth: number;\r\n  cardHeight: number;\r\n  textWidth: number;\r\n  textFontSize: number = 12;\r\n  textTransform: string = '';\r\n  initialized: boolean = false;\r\n  animationReq: any;\r\n\r\n  bandHeight: number = 10;\r\n  transformBand: string;\r\n  textPadding = [10, 20, 5, 20];\r\n  labelFontSize = 15;\r\n\r\n  bandPath: string;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n  }\r\n\r\n  update(): void {\r\n    this.zone.run(() => {\r\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\r\n\r\n      this.transform = `translate(${this.x} , ${this.y})`;\r\n\r\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\r\n      this.cardWidth = Math.max(0, this.width);\r\n      this.cardHeight = Math.max(0, this.height);\r\n\r\n      this.label = this.label ? this.label : this.data.name;\r\n\r\n      const cardData = {\r\n        label: this.label,\r\n        data: this.data,\r\n        value: this.data.value\r\n      };\r\n\r\n      this.formattedLabel = labelFormatting(cardData);\r\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\r\n\r\n      const value = hasValue ? valueFormatting(cardData) : '';\r\n\r\n      this.value = this.paddedValue(value);\r\n      this.setPadding();\r\n\r\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\r\n\r\n      setTimeout(() => {\r\n        this.scaleText();\r\n        this.value = value;\r\n        if (hasValue && !this.initialized) {\r\n          setTimeout(() => this.startCount(), 20);\r\n        }\r\n      }, 8);\r\n    });\r\n  }\r\n\r\n  paddedValue(value: string) {\r\n    if (this.medianSize && this.medianSize > value.length) {\r\n      value += '\\u2007'.repeat(this.medianSize - value.length);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  startCount(): void {\r\n    if (!this.initialized && this.animations) {\r\n      cancelAnimationFrame(this.animationReq);\r\n\r\n      const val = this.data.value;\r\n      const decs = decimalChecker(val);\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n\r\n      const callback = ({ value, finished }) => {\r\n        this.zone.run(() => {\r\n          value = finished ? val : value;\r\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\r\n          if (!finished) {\r\n            this.value = this.paddedValue(this.value);\r\n          }\r\n          this.cd.markForCheck();\r\n        });\r\n      };\r\n\r\n      this.animationReq = count(0, val, decs, 1, callback);\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  scaleText(): void {\r\n    this.zone.run(() => {\r\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\r\n      if (width === 0 || height === 0) {\r\n        return;\r\n      }\r\n\r\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\r\n      const availableWidth = this.cardWidth - 2 * textPadding;\r\n      const availableHeight = this.cardHeight / 3;\r\n\r\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\r\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\r\n      this.labelFontSize = Math.min(this.textFontSize, 15);\r\n\r\n      this.setPadding();\r\n      this.cd.markForCheck();\r\n    });\r\n  }\r\n\r\n  setPadding() {\r\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\r\n    const padding = this.cardHeight / 2;\r\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\r\n    this.textPadding[2] = padding - this.labelFontSize;\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit(this.data);\r\n  }\r\n}\r\n","import * as d3_color from 'd3-color';\r\n\r\n/**\r\n * Converts a hex to RGB\r\n *\r\n * @export\r\n */\r\nexport function hexToRgb(value: string): any {\r\n  // deprecated, use d3.color()\r\n  return d3_color.rgb(value);\r\n}\r\n\r\n/**\r\n * Accepts a color (string) and returns a inverted hex color (string)\r\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\r\n *\r\n * @export\r\n */\r\nexport function invertColor(value: string): string {\r\n  const color = d3_color.rgb(value);\r\n  const { r, g, b, opacity } = color;\r\n  if (opacity === 0) {\r\n    return color.toString();\r\n  }\r\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n  const depth = yiq >= 128 ? -0.8 : 0.8;\r\n\r\n  return shadeRGBColor(color, depth);\r\n}\r\n\r\n/**\r\n * Given a rgb, it will darken/lighten\r\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\r\n *\r\n * @export\r\n * @param \\{ r, g, b }\r\n */\r\nexport function shadeRGBColor({ r, g, b }, percent) {\r\n  const t = percent < 0 ? 0 : 255;\r\n  const p = percent < 0 ? percent * -1 : percent;\r\n\r\n  r = Math.round((t - r) * p) + r;\r\n  g = Math.round((t - g) * p) + g;\r\n  b = Math.round((t - b) * p) + b;\r\n\r\n  return `rgb(${r}, ${g}, ${b})`;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { invertColor } from '../utils/color-utils';\r\n\r\nexport interface CardModel {\r\n  x;\r\n  y;\r\n  width: number;\r\n  height: number;\r\n  color: string;\r\n  label: string;\r\n  data;\r\n  tooltipText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-card-series]',\r\n  template: `\r\n    <svg:rect\r\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\r\n      class=\"card-empty\"\r\n      [attr.x]=\"c.x\"\r\n      [attr.y]=\"c.y\"\r\n      [style.fill]=\"emptyColor\"\r\n      [attr.width]=\"c.width\"\r\n      [attr.height]=\"c.height\"\r\n      rx=\"3\"\r\n      ry=\"3\"\r\n    />\r\n    <svg:g\r\n      ngx-charts-card\r\n      *ngFor=\"let c of cards; trackBy: trackBy\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [color]=\"c.color\"\r\n      [bandColor]=\"c.bandColor\"\r\n      [textColor]=\"c.textColor\"\r\n      [data]=\"c.data\"\r\n      [label]=\"c.label\"\r\n      [medianSize]=\"medianSize\"\r\n      [valueFormatting]=\"valueFormatting\"\r\n      [labelFormatting]=\"labelFormatting\"\r\n      [animations]=\"animations\"\r\n      (select)=\"onClick($event)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CardSeriesComponent implements OnChanges {\r\n  @Input() data: any[];\r\n  @Input() slots: any[];\r\n  @Input() dims;\r\n  @Input() colors;\r\n  @Input() innerPadding = 15;\r\n\r\n  @Input() cardColor;\r\n  @Input() bandColor;\r\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\r\n  @Input() textColor;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  cards: CardModel[];\r\n  emptySlots: any[];\r\n  medianSize: number;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.data.length > 2) {\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n\r\n      const sortedLengths = this.data\r\n        .map(d => {\r\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\r\n          return hasValue\r\n            ? valueFormatting({\r\n                data: d.data,\r\n                label: d ? d.data.name : '',\r\n                value: d && d.data ? d.data.value : ''\r\n              }).length\r\n            : 0;\r\n        })\r\n        .sort((a, b) => b - a);\r\n      const idx = Math.ceil(this.data.length / 2);\r\n      this.medianSize = sortedLengths[idx];\r\n    }\r\n\r\n    const cards = this.getCards();\r\n    this.cards = cards.filter(d => d.data.value !== null);\r\n    this.emptySlots = cards.filter(d => d.data.value === null);\r\n  }\r\n\r\n  getCards(): any[] {\r\n    const yPadding =\r\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\r\n    const xPadding =\r\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\r\n\r\n    return this.data.map((d, index) => {\r\n      let label = d.data.name;\r\n      if (label && label.constructor.name === 'Date') {\r\n        label = label.toLocaleDateString();\r\n      } else {\r\n        label = label ? label.toLocaleString() : label;\r\n      }\r\n\r\n      const value = d.data.value;\r\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\r\n      const color = this.cardColor || valueColor || '#000';\r\n      return {\r\n        x: d.x,\r\n        y: d.y,\r\n        width: d.width - xPadding,\r\n        height: d.height - yPadding,\r\n        color,\r\n        bandColor: this.bandColor || valueColor,\r\n        textColor: this.textColor || invertColor(color),\r\n        label,\r\n        data: d.data,\r\n        tooltipText: `${label}: ${value}`\r\n      };\r\n    });\r\n  }\r\n\r\n  trackBy(index, card): string {\r\n    return card.label;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-number-card',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\r\n        <svg:g\r\n          ngx-charts-card-series\r\n          [colors]=\"colors\"\r\n          [cardColor]=\"cardColor\"\r\n          [bandColor]=\"bandColor\"\r\n          [textColor]=\"textColor\"\r\n          [emptyColor]=\"emptyColor\"\r\n          [data]=\"data\"\r\n          [dims]=\"dims\"\r\n          [innerPadding]=\"innerPadding\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [animations]=\"animations\"\r\n          (select)=\"onClick($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NumberCardComponent extends BaseChartComponent {\r\n  @Input() cardColor: string;\r\n  @Input() bandColor: string;\r\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\r\n  @Input() innerPadding = 15;\r\n  @Input() textColor: string;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() designatedTotal: number;\r\n\r\n  dims: ViewDimensions;\r\n  data: any[];\r\n  slots: any[];\r\n  colors: ColorHelper;\r\n  transform: string;\r\n  domain: any[];\r\n  margin = [10, 10, 10, 10];\r\n\r\n  backgroundCards: any[];\r\n\r\n  get clickable() {\r\n    return !!this.select.observers.length;\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.setColors();\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    const size = gridSize(this.dims, this.results.length, 150);\r\n    const N = size[0] * size[1];\r\n\r\n    const data = this.results.slice();\r\n\r\n    while (data.length < N) {\r\n      data.push({ value: null });\r\n    }\r\n\r\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { CardComponent } from './card.component';\r\nimport { CardSeriesComponent } from './card-series.component';\r\nimport { NumberCardComponent } from './number-card.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\r\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\r\n})\r\nexport class NumberCardModule {}\r\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { select } from 'd3-selection';\r\n\r\nimport { invertColor } from '../utils/color-utils';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { escapeLabel } from '../common/label.helper';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tree-map-cell]',\r\n  template: `\r\n    <svg:g>\r\n      <defs *ngIf=\"gradient\">\r\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n      </defs>\r\n      <svg:rect\r\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        [attr.x]=\"x\"\r\n        [attr.y]=\"y\"\r\n        [style.cursor]=\"'pointer'\"\r\n        class=\"cell\"\r\n        (click)=\"onClick()\"\r\n      />\r\n      <svg:foreignObject\r\n        *ngIf=\"width >= 70 && height >= 35\"\r\n        [attr.x]=\"x\"\r\n        [attr.y]=\"y\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        class=\"treemap-label\"\r\n        [style.pointer-events]=\"'none'\"\r\n      >\r\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\r\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\r\n          <xhtml:br />\r\n          <xhtml:span\r\n            *ngIf=\"animations\"\r\n            class=\"treemap-val\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"value\"\r\n            [valueFormatting]=\"valueFormatting\"\r\n          >\r\n          </xhtml:span>\r\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\r\n            {{ formattedValue }}\r\n          </xhtml:span>\r\n        </xhtml:p>\r\n      </svg:foreignObject>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapCellComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() fill;\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() label;\r\n  @Input() value;\r\n  @Input() valueType;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  gradientStops: any[];\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n\r\n  element: HTMLElement;\r\n  transform: string;\r\n  formattedLabel: string;\r\n  formattedValue: string;\r\n  initialized: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.update();\r\n\r\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\r\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\r\n\r\n    const cellData = {\r\n      data: this.data,\r\n      label: this.label,\r\n      value: this.value\r\n    };\r\n\r\n    this.formattedValue = this.valueFormatting(cellData.value);\r\n    this.formattedLabel = labelFormatting(cellData);\r\n\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n    this.gradientStops = this.getGradientStops();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.initialized) {\r\n      this.animateToCurrentForm();\r\n    } else {\r\n      if (this.animations) {\r\n        this.loadAnimation();\r\n      }\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\r\n\r\n    this.animateToCurrentForm();\r\n  }\r\n\r\n  getTextColor(): string {\r\n    return invertColor(this.fill);\r\n  }\r\n\r\n  animateToCurrentForm(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    if (this.animations) {\r\n      node\r\n        .transition()\r\n        .duration(750)\r\n        .attr('opacity', 1)\r\n        .attr('x', this.x)\r\n        .attr('y', this.y)\r\n        .attr('width', this.width)\r\n        .attr('height', this.height);\r\n    } else {\r\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\r\n    }\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  getGradientStops() {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: 0.3\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tree-map-cell-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-tree-map-cell\r\n      *ngFor=\"let c of cells; trackBy: trackBy\"\r\n      [data]=\"c.data\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [fill]=\"c.fill\"\r\n      [label]=\"c.label\"\r\n      [value]=\"c.value\"\r\n      [valueType]=\"c.valueType\"\r\n      [valueFormatting]=\"valueFormatting\"\r\n      [labelFormatting]=\"labelFormatting\"\r\n      [gradient]=\"gradient\"\r\n      [animations]=\"animations\"\r\n      (select)=\"onClick($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"c.data\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapCellSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() dims;\r\n  @Input() colors;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  cells: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.cells = this.getCells();\r\n  }\r\n\r\n  getCells(): any[] {\r\n    return this.data.children\r\n      .filter(d => {\r\n        return d.depth === 1;\r\n      })\r\n      .map((d, index) => {\r\n        const label = d.id;\r\n\r\n        return {\r\n          data: d.data,\r\n          x: d.x0,\r\n          y: d.y0,\r\n          width: d.x1 - d.x0,\r\n          height: d.y1 - d.y0,\r\n          fill: this.colors.getColor(label),\r\n          label,\r\n          value: d.value,\r\n          valueType: d.valueType\r\n        };\r\n      });\r\n  }\r\n\r\n  getTooltipText({ label, value }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { treemap, stratify } from 'd3-hierarchy';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-tree-map',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\r\n        <svg:g\r\n          ngx-charts-tree-map-cell-series\r\n          [colors]=\"colors\"\r\n          [data]=\"data\"\r\n          [dims]=\"dims\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          (select)=\"onClick($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['./tree-map.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapComponent extends BaseChartComponent {\r\n  @Input() results;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: any;\r\n  domain: any;\r\n  transform: any;\r\n  colors: ColorHelper;\r\n  treemap: any;\r\n  data: any;\r\n  margin = [10, 10, 10, 10];\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\r\n\r\n    const rootNode = {\r\n      name: 'root',\r\n      value: 0,\r\n      isRoot: true\r\n    };\r\n\r\n    const root = stratify<any>()\r\n      .id(d => {\r\n        let label = d.name;\r\n\r\n        if (label.constructor.name === 'Date') {\r\n          label = label.toLocaleDateString();\r\n        } else {\r\n          label = label.toLocaleString();\r\n        }\r\n        return label;\r\n      })\r\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\r\n      .sum(d => d.value);\r\n\r\n    this.data = this.treemap(root);\r\n\r\n    this.setColors();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { TreeMapCellComponent } from './tree-map-cell.component';\r\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\r\nimport { TreeMapComponent } from './tree-map.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\r\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\r\n})\r\nexport class TreeMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-linear-gauge',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\r\n      <svg:g class=\"linear-gauge chart\">\r\n        <svg:g\r\n          ngx-charts-bar\r\n          class=\"background-bar\"\r\n          [width]=\"dims.width\"\r\n          [height]=\"3\"\r\n          [x]=\"margin[3]\"\r\n          [y]=\"dims.height / 2 + margin[0] - 2\"\r\n          [data]=\"{}\"\r\n          [orientation]=\"'horizontal'\"\r\n          [roundEdges]=\"true\"\r\n          [animations]=\"animations\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-bar\r\n          [width]=\"valueScale(value)\"\r\n          [height]=\"3\"\r\n          [x]=\"margin[3]\"\r\n          [y]=\"dims.height / 2 + margin[0] - 2\"\r\n          [fill]=\"colors.getColor(units)\"\r\n          [data]=\"{}\"\r\n          [orientation]=\"'horizontal'\"\r\n          [roundEdges]=\"true\"\r\n          [animations]=\"animations\"\r\n        ></svg:g>\r\n\r\n        <svg:line\r\n          *ngIf=\"hasPreviousValue\"\r\n          [attr.transform]=\"transformLine\"\r\n          x1=\"0\"\r\n          y1=\"5\"\r\n          x2=\"0\"\r\n          y2=\"15\"\r\n          [attr.stroke]=\"colors.getColor(units)\"\r\n        />\r\n\r\n        <svg:line\r\n          *ngIf=\"hasPreviousValue\"\r\n          [attr.transform]=\"transformLine\"\r\n          x1=\"0\"\r\n          y1=\"-5\"\r\n          x2=\"0\"\r\n          y2=\"-15\"\r\n          [attr.stroke]=\"colors.getColor(units)\"\r\n        />\r\n\r\n        <svg:g [attr.transform]=\"transform\">\r\n          <svg:g [attr.transform]=\"valueTranslate\">\r\n            <svg:text\r\n              #valueTextEl\r\n              class=\"value\"\r\n              [style.textAnchor]=\"'middle'\"\r\n              [attr.transform]=\"valueTextTransform\"\r\n              alignment-baseline=\"after-edge\"\r\n            >\r\n              {{ displayValue }}\r\n            </svg:text>\r\n          </svg:g>\r\n\r\n          <svg:g [attr.transform]=\"unitsTranslate\">\r\n            <svg:text\r\n              #unitsTextEl\r\n              class=\"units\"\r\n              [style.textAnchor]=\"'middle'\"\r\n              [attr.transform]=\"unitsTextTransform\"\r\n              alignment-baseline=\"before-edge\"\r\n            >\r\n              {{ units }}\r\n            </svg:text>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() value: number = 0;\r\n  @Input() units: string;\r\n  @Input() previousValue;\r\n  @Input() valueFormatting: any;\r\n\r\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\r\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\r\n\r\n  dims: ViewDimensions;\r\n  valueDomain: any;\r\n  valueScale: any;\r\n\r\n  colors: ColorHelper;\r\n  transform: string;\r\n  margin: any[] = [10, 20, 10, 20];\r\n  transformLine: string;\r\n\r\n  valueResizeScale: number = 1;\r\n  unitsResizeScale: number = 1;\r\n  valueTextTransform: string = '';\r\n  valueTranslate: string = '';\r\n  unitsTextTransform: string = '';\r\n  unitsTranslate: string = '';\r\n  displayValue: string;\r\n  hasPreviousValue: boolean;\r\n\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => {\r\n      this.scaleText('value');\r\n      this.scaleText('units');\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.hasPreviousValue = this.previousValue !== undefined;\r\n    this.max = Math.max(this.max, this.value);\r\n    this.min = Math.min(this.min, this.value);\r\n    if (this.hasPreviousValue) {\r\n      this.max = Math.max(this.max, this.previousValue);\r\n      this.min = Math.min(this.min, this.previousValue);\r\n    }\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.valueDomain = this.getValueDomain();\r\n    this.valueScale = this.getValueScale();\r\n    this.displayValue = this.getDisplayValue();\r\n\r\n    this.setColors();\r\n\r\n    const xOffset = this.margin[3] + this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n\r\n    this.transform = `translate(${xOffset}, ${yOffset})`;\r\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\r\n    this.valueTranslate = `translate(0, -15)`;\r\n    this.unitsTranslate = `translate(0, 15)`;\r\n    setTimeout(() => this.scaleText('value'), 50);\r\n    setTimeout(() => this.scaleText('units'), 50);\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    return [this.min, this.max];\r\n  }\r\n\r\n  getValueScale(): any {\r\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\r\n  }\r\n\r\n  getDisplayValue(): string {\r\n    if (this.valueFormatting) {\r\n      return this.valueFormatting(this.value);\r\n    }\r\n    return this.value.toLocaleString();\r\n  }\r\n\r\n  scaleText(element, repeat: boolean = true): void {\r\n    let el;\r\n    let resizeScale;\r\n    if (element === 'value') {\r\n      el = this.valueTextEl;\r\n      resizeScale = this.valueResizeScale;\r\n    } else {\r\n      el = this.unitsTextEl;\r\n      resizeScale = this.unitsResizeScale;\r\n    }\r\n\r\n    const { width, height } = el.nativeElement.getBoundingClientRect();\r\n    if (width === 0 || height === 0) return;\r\n    const oldScale = resizeScale;\r\n    const availableWidth = this.dims.width;\r\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\r\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\r\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\r\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\r\n\r\n    if (resizeScale !== oldScale) {\r\n      if (element === 'value') {\r\n        this.valueResizeScale = resizeScale;\r\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\r\n      } else {\r\n        this.unitsResizeScale = resizeScale;\r\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\r\n      }\r\n      this.cd.markForCheck();\r\n      if (repeat) {\r\n        setTimeout(() => {\r\n          this.scaleText(element, false);\r\n        }, 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit({\r\n      name: 'Value',\r\n      value: this.value\r\n    });\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-gauge',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\r\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\r\n          <svg:g\r\n            ngx-charts-gauge-arc\r\n            [backgroundArc]=\"arc.backgroundArc\"\r\n            [valueArc]=\"arc.valueArc\"\r\n            [cornerRadius]=\"cornerRadius\"\r\n            [colors]=\"colors\"\r\n            [isActive]=\"isActive(arc.valueArc.data)\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [valueFormatting]=\"valueFormatting\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event)\"\r\n            (activate)=\"onActivate($event)\"\r\n            (deactivate)=\"onDeactivate($event)\"\r\n          ></svg:g>\r\n        </svg:g>\r\n\r\n        <svg:g\r\n          ngx-charts-gauge-axis\r\n          *ngIf=\"showAxis\"\r\n          [bigSegments]=\"bigSegments\"\r\n          [smallSegments]=\"smallSegments\"\r\n          [min]=\"min\"\r\n          [max]=\"max\"\r\n          [radius]=\"outerRadius\"\r\n          [angleSpan]=\"angleSpan\"\r\n          [valueScale]=\"valueScale\"\r\n          [startAngle]=\"startAngle\"\r\n          [tickFormatting]=\"axisTickFormatting\"\r\n        ></svg:g>\r\n\r\n        <svg:text\r\n          #textEl\r\n          *ngIf=\"showText\"\r\n          [style.textAnchor]=\"'middle'\"\r\n          [attr.transform]=\"textTransform\"\r\n          alignment-baseline=\"central\"\r\n        >\r\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\r\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\r\n        </svg:text>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() textValue: string;\r\n  @Input() units: string;\r\n  @Input() bigSegments: number = 10;\r\n  @Input() smallSegments: number = 5;\r\n  @Input() results: any[];\r\n  @Input() showAxis: boolean = true;\r\n  @Input() startAngle: number = -120;\r\n  @Input() angleSpan: number = 240;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() axisTickFormatting: any;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: (value: any) => string;\r\n  @Input() showText: boolean = true;\r\n\r\n  // Specify margins\r\n  @Input() margin: any[];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('textEl') textEl: ElementRef;\r\n\r\n  dims: ViewDimensions;\r\n  domain: any[];\r\n  valueDomain: any;\r\n  valueScale: any;\r\n\r\n  colors: ColorHelper;\r\n  transform: string;\r\n\r\n  outerRadius: number;\r\n  textRadius: number; // max available radius for the text\r\n  resizeScale: number = 1;\r\n  rotation: string = '';\r\n  textTransform: string = 'scale(1, 1)';\r\n  cornerRadius: number = 10;\r\n  arcs: any[];\r\n  displayValue: string;\r\n  legendOptions: any;\r\n\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => this.scaleText());\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showAxis) {\r\n      if (!this.margin) {\r\n        this.margin = [10, 20, 10, 20];\r\n      }\r\n    } else {\r\n      if (!this.margin) {\r\n        this.margin = [60, 100, 60, 100];\r\n      }\r\n    }\r\n\r\n    // make the starting angle positive\r\n    if (this.startAngle < 0) {\r\n      this.startAngle = (this.startAngle % 360) + 360;\r\n    }\r\n\r\n    this.angleSpan = Math.min(this.angleSpan, 360);\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showLegend: this.legend,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.domain = this.getDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n    this.valueScale = this.getValueScale();\r\n    this.displayValue = this.getDisplayValue();\r\n\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\r\n\r\n    this.arcs = this.getArcs();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    const xOffset = this.margin[3] + this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n\r\n    this.transform = `translate(${xOffset}, ${yOffset})`;\r\n    this.rotation = `rotate(${this.startAngle})`;\r\n    setTimeout(() => this.scaleText(), 50);\r\n  }\r\n\r\n  getArcs(): any[] {\r\n    const arcs = [];\r\n\r\n    const availableRadius = this.outerRadius * 0.7;\r\n\r\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\r\n    const arcWidth = radiusPerArc * 0.7;\r\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\r\n    this.cornerRadius = Math.floor(arcWidth / 2);\r\n\r\n    let i = 0;\r\n    for (const d of this.results) {\r\n      const outerRadius = this.outerRadius - i * radiusPerArc;\r\n      const innerRadius = outerRadius - arcWidth;\r\n\r\n      const backgroundArc = {\r\n        endAngle: (this.angleSpan * Math.PI) / 180,\r\n        innerRadius,\r\n        outerRadius,\r\n        data: {\r\n          value: this.max,\r\n          name: d.name\r\n        }\r\n      };\r\n\r\n      const valueArc = {\r\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\r\n        innerRadius,\r\n        outerRadius,\r\n        data: {\r\n          value: d.value,\r\n          name: d.name\r\n        }\r\n      };\r\n\r\n      const arc = {\r\n        backgroundArc,\r\n        valueArc\r\n      };\r\n\r\n      arcs.push(arc);\r\n      i++;\r\n    }\r\n\r\n    return arcs;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const values = this.results.map(d => d.value);\r\n    const dataMin = Math.min(...values);\r\n    const dataMax = Math.max(...values);\r\n\r\n    if (this.min !== undefined) {\r\n      this.min = Math.min(this.min, dataMin);\r\n    } else {\r\n      this.min = dataMin;\r\n    }\r\n\r\n    if (this.max !== undefined) {\r\n      this.max = Math.max(this.max, dataMax);\r\n    } else {\r\n      this.max = dataMax;\r\n    }\r\n\r\n    return [this.min, this.max];\r\n  }\r\n\r\n  getValueScale(): any {\r\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\r\n  }\r\n\r\n  getDisplayValue(): string {\r\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\r\n\r\n    if (this.textValue && 0 !== this.textValue.length) {\r\n      return this.textValue.toLocaleString();\r\n    }\r\n\r\n    if (this.valueFormatting) {\r\n      return this.valueFormatting(value);\r\n    }\r\n\r\n    return value.toLocaleString();\r\n  }\r\n\r\n  scaleText(repeat: boolean = true): void {\r\n    if (!this.showText) {\r\n      return;\r\n    }\r\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\r\n    const oldScale = this.resizeScale;\r\n\r\n    if (width === 0) {\r\n      this.resizeScale = 1;\r\n    } else {\r\n      const availableSpace = this.textRadius;\r\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\r\n    }\r\n\r\n    if (this.resizeScale !== oldScale) {\r\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\r\n      this.cd.markForCheck();\r\n      if (repeat) {\r\n        setTimeout(() => this.scaleText(false), 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getLegendOptions(): any {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      colors: this.colors,\r\n      domain: this.domain,\r\n      title: this.legendTitle,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.valueArc.data.name;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-gauge-arc]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-pie-arc\r\n      class=\"background-arc\"\r\n      [startAngle]=\"0\"\r\n      [endAngle]=\"backgroundArc.endAngle\"\r\n      [innerRadius]=\"backgroundArc.innerRadius\"\r\n      [outerRadius]=\"backgroundArc.outerRadius\"\r\n      [cornerRadius]=\"cornerRadius\"\r\n      [data]=\"backgroundArc.data\"\r\n      [animate]=\"false\"\r\n      [pointerEvents]=\"false\"\r\n    ></svg:g>\r\n    <svg:g\r\n      ngx-charts-pie-arc\r\n      [startAngle]=\"0\"\r\n      [endAngle]=\"valueArc.endAngle\"\r\n      [innerRadius]=\"valueArc.innerRadius\"\r\n      [outerRadius]=\"valueArc.outerRadius\"\r\n      [cornerRadius]=\"cornerRadius\"\r\n      [fill]=\"colors.getColor(valueArc.data.name)\"\r\n      [data]=\"valueArc.data\"\r\n      [animate]=\"animations\"\r\n      [isActive]=\"isActive\"\r\n      (select)=\"select.emit($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"valueArc.data\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeArcComponent {\r\n  @Input() backgroundArc: any;\r\n  @Input() valueArc: any;\r\n  @Input() cornerRadius: any;\r\n  @Input() colors: ColorHelper;\r\n  @Input() isActive: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: (value: any) => string;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  tooltipText(arc): string {\r\n    const label = formatLabel(arc.data.name);\r\n    let val;\r\n\r\n    if (this.valueFormatting) {\r\n      val = this.valueFormatting(arc.data.value);\r\n    } else {\r\n      val = formatLabel(arc.data.value);\r\n    }\r\n\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { line } from 'd3-shape';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-gauge-axis]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"rotate\">\r\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\r\n        <svg:path [attr.d]=\"tick.line\" />\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\r\n        <svg:text\r\n          [style.textAnchor]=\"tick.textAnchor\"\r\n          [attr.transform]=\"tick.textTransform\"\r\n          alignment-baseline=\"central\"\r\n        >\r\n          {{ tick.text }}\r\n        </svg:text>\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\r\n        <svg:path [attr.d]=\"tick.line\" />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeAxisComponent implements OnChanges {\r\n  @Input() bigSegments: any;\r\n  @Input() smallSegments: any;\r\n  @Input() min: any;\r\n  @Input() max: any;\r\n  @Input() angleSpan: number;\r\n  @Input() startAngle: number;\r\n  @Input() radius: any;\r\n  @Input() valueScale: any;\r\n  @Input() tickFormatting: any;\r\n\r\n  ticks: any;\r\n  rotationAngle: number;\r\n  rotate: string = '';\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.rotationAngle = -90 + this.startAngle;\r\n    this.rotate = `rotate(${this.rotationAngle})`;\r\n    this.ticks = this.getTicks();\r\n  }\r\n\r\n  getTicks(): any {\r\n    const bigTickSegment = this.angleSpan / this.bigSegments;\r\n    const smallTickSegment = bigTickSegment / this.smallSegments;\r\n    const tickLength = 20;\r\n    const ticks = {\r\n      big: [],\r\n      small: []\r\n    };\r\n\r\n    const startDistance = this.radius + 10;\r\n    const textDist = startDistance + tickLength + 10;\r\n\r\n    for (let i = 0; i <= this.bigSegments; i++) {\r\n      const angleDeg = i * bigTickSegment;\r\n      const angle = (angleDeg * Math.PI) / 180;\r\n\r\n      const textAnchor = this.getTextAnchor(angleDeg);\r\n\r\n      let skip = false;\r\n      if (i === 0 && this.angleSpan === 360) {\r\n        skip = true;\r\n      }\r\n\r\n      if (!skip) {\r\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\r\n        if (this.tickFormatting) {\r\n          text = this.tickFormatting(text);\r\n        }\r\n        ticks.big.push({\r\n          line: this.getTickPath(startDistance, tickLength, angle),\r\n          textAnchor,\r\n          text,\r\n          textTransform: `\r\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\r\n          `\r\n        });\r\n      }\r\n\r\n      if (i === this.bigSegments) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = 1; j <= this.smallSegments; j++) {\r\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\r\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\r\n\r\n        ticks.small.push({\r\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\r\n        });\r\n      }\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getTextAnchor(angle) {\r\n    // [0, 45] = 'middle';\r\n    // [46, 135] = 'start';\r\n    // [136, 225] = 'middle';\r\n    // [226, 315] = 'end';\r\n\r\n    angle = (this.startAngle + angle) % 360;\r\n    let textAnchor = 'middle';\r\n    if (angle > 45 && angle <= 135) {\r\n      textAnchor = 'start';\r\n    } else if (angle > 225 && angle <= 315) {\r\n      textAnchor = 'end';\r\n    }\r\n    return textAnchor;\r\n  }\r\n\r\n  getTickPath(startDistance, tickLength, angle): any {\r\n    const y1 = startDistance * Math.sin(angle);\r\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\r\n    const x1 = startDistance * Math.cos(angle);\r\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\r\n\r\n    const points = [\r\n      { x: x1, y: y1 },\r\n      { x: x2, y: y2 }\r\n    ];\r\n    const lineGenerator = line<any>()\r\n      .x(d => d.x)\r\n      .y(d => d.y);\r\n    return lineGenerator(points);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { LinearGaugeComponent } from './linear-gauge.component';\r\nimport { GaugeComponent } from './gauge.component';\r\nimport { GaugeArcComponent } from './gauge-arc.component';\r\nimport { GaugeAxisComponent } from './gauge-axis.component';\r\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\r\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\r\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\r\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\r\n})\r\nexport class GaugeModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from './common/chart-common.module';\r\nimport { AreaChartModule } from './area-chart/area-chart.module';\r\nimport { BarChartModule } from './bar-chart/bar-chart.module';\r\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\r\nimport { HeatMapModule } from './heat-map/heat-map.module';\r\nimport { LineChartModule } from './line-chart/line-chart.module';\r\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\r\nimport { NumberCardModule } from './number-card/number-card.module';\r\nimport { PieChartModule } from './pie-chart/pie-chart.module';\r\nimport { TreeMapModule } from './tree-map/tree-map.module';\r\nimport { GaugeModule } from './gauge/gauge.module';\r\nimport { ngxChartsPolyfills } from './polyfills';\r\n\r\n@NgModule({\r\n  exports: [\r\n    ChartCommonModule,\r\n    AreaChartModule,\r\n    BarChartModule,\r\n    BubbleChartModule,\r\n    HeatMapModule,\r\n    LineChartModule,\r\n    PolarChartModule,\r\n    NumberCardModule,\r\n    PieChartModule,\r\n    TreeMapModule,\r\n    GaugeModule\r\n  ]\r\n})\r\nexport class NgxChartsModule {\r\n  constructor() {\r\n    ngxChartsPolyfills();\r\n  }\r\n}\r\n","// The export is needed here to generate a valid polyfills.metadata.json file\r\nexport function ngxChartsPolyfills() {\r\n  // IE11 fix\r\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\r\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\r\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\r\n  }\r\n}\r\n","import { timeFormat } from 'd3-time-format';\r\n\r\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\r\n  return function (label: string): string {\r\n    if (label === 'No Value' || label === 'Other') {\r\n      return label;\r\n    }\r\n    if (fieldType === 'date' && groupByType === 'groupBy') {\r\n      const formatter = timeFormat('MM/DD/YYYY');\r\n      return formatter(<any>label);\r\n    }\r\n\r\n    return label.toString();\r\n  };\r\n}\r\n"]}