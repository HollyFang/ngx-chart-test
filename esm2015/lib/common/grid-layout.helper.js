import { scaleBand } from 'd3-scale';
export function gridSize(dims, len, minWidth) {
    let rows = 1;
    let cols = len;
    const width = dims.width;
    if (width > minWidth) {
        while (width / cols < minWidth) {
            rows += 1;
            cols = Math.ceil(len / rows);
        }
    }
    return [cols, rows];
}
export function gridLayout(dims, data, minWidth, designatedTotal) {
    const xScale = scaleBand();
    const yScale = scaleBand();
    const width = dims.width;
    const height = dims.height;
    const [columns, rows] = gridSize(dims, data.length, minWidth);
    const xDomain = [];
    const yDomain = [];
    for (let i = 0; i < rows; i++) {
        yDomain.push(i);
    }
    for (let i = 0; i < columns; i++) {
        xDomain.push(i);
    }
    xScale.domain(xDomain);
    yScale.domain(yDomain);
    xScale.rangeRound([0, width], 0.1);
    yScale.rangeRound([0, height], 0.1);
    const res = [];
    const total = designatedTotal ? designatedTotal : getTotal(data);
    const cardWidth = xScale.bandwidth();
    const cardHeight = yScale.bandwidth();
    for (let i = 0; i < data.length; i++) {
        res[i] = {};
        res[i].data = {
            name: data[i] ? data[i].name : '',
            value: data[i] ? data[i].value : undefined,
            extra: data[i] ? data[i].extra : undefined,
            label: data[i] ? data[i].label : ''
        };
        res[i].x = xScale(i % columns);
        res[i].y = yScale(Math.floor(i / columns));
        res[i].width = cardWidth;
        res[i].height = cardHeight;
        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;
        res[i].data.total = total;
    }
    return res;
}
function getTotal(results) {
    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1sYXlvdXQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3dpbWxhbmUvbmd4LWNoYXJ0cy9zcmMvbGliL2NvbW1vbi9ncmlkLWxheW91dC5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVyQyxNQUFNLFVBQVUsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUTtJQUMxQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFDYixJQUFJLElBQUksR0FBRyxHQUFHLENBQUM7SUFDZixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBRXpCLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRTtRQUNwQixPQUFPLEtBQUssR0FBRyxJQUFJLEdBQUcsUUFBUSxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLENBQUM7WUFDVixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDOUI7S0FDRjtJQUVELE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsZUFBZTtJQUM5RCxNQUFNLE1BQU0sR0FBUSxTQUFTLEVBQVUsQ0FBQztJQUN4QyxNQUFNLE1BQU0sR0FBUSxTQUFTLEVBQVUsQ0FBQztJQUN4QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFM0IsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENB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QztLQUMzQjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLE9BQU87SUFDdkIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NhbGVCYW5kIH0gZnJvbSAnZDMtc2NhbGUnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdyaWRTaXplKGRpbXMsIGxlbiwgbWluV2lkdGgpIHtcclxuICBsZXQgcm93cyA9IDE7XHJcbiAgbGV0IGNvbHMgPSBsZW47XHJcbiAgY29uc3Qgd2lkdGggPSBkaW1zLndpZHRoO1xyXG5cclxuICBpZiAod2lkdGggPiBtaW5XaWR0aCkge1xyXG4gICAgd2hpbGUgKHdpZHRoIC8gY29scyA8IG1pbldpZHRoKSB7XHJcbiAgICAgIHJvd3MgKz0gMTtcclxuICAgICAgY29scyA9IE1hdGguY2VpbChsZW4gLyByb3dzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBbY29scywgcm93c107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBncmlkTGF5b3V0KGRpbXMsIGRhdGEsIG1pbldpZHRoLCBkZXNpZ25hdGVkVG90YWwpIHtcclxuICBjb25zdCB4U2NhbGU6IGFueSA9IHNjYWxlQmFuZDxudW1iZXI+KCk7XHJcbiAgY29uc3QgeVNjYWxlOiBhbnkgPSBzY2FsZUJhbmQ8bnVtYmVyPigpO1xyXG4gIGNvbnN0IHdpZHRoID0gZGltcy53aWR0aDtcclxuICBjb25zdCBoZWlnaHQgPSBkaW1zLmhlaWdodDtcclxuXHJcbiAgY29uc3QgW2NvbHVtbnMsIHJvd3NdID0gZ3JpZFNpemUoZGltcywgZGF0YS5sZW5ndGgsIG1pbldpZHRoKTtcclxuXHJcbiAgY29uc3QgeERvbWFpbiA9IFtdO1xyXG4gIGNvbnN0IHlEb21haW4gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xyXG4gICAgeURvbWFpbi5wdXNoKGkpO1xyXG4gIH1cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbnM7IGkrKykge1xyXG4gICAgeERvbWFpbi5wdXNoKGkpO1xyXG4gIH1cclxuICB4U2NhbGUuZG9tYWluKHhEb21haW4pO1xyXG4gIHlTY2FsZS5kb21haW4oeURvbWFpbik7XHJcblxyXG4gIHhTY2FsZS5yYW5nZVJvdW5kKFswLCB3aWR0aF0sIDAuMSk7XHJcbiAgeVNjYWxlLnJhbmdlUm91bmQoWzAsIGhlaWdodF0sIDAuMSk7XHJcblxyXG4gIGNvbnN0IHJlcyA9IFtdO1xyXG4gIGNvbnN0IHRvdGFsID0gZGVzaWduYXRlZFRvdGFsID8gZGVzaWduYXRlZFRvdGFsIDogZ2V0VG90YWwoZGF0YSk7XHJcbiAgY29uc3QgY2FyZFdpZHRoID0geFNjYWxlLmJhbmR3aWR0aCgpO1xyXG4gIGNvbnN0IGNhcmRIZWlnaHQgPSB5U2NhbGUuYmFuZHdpZHRoKCk7XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgcmVzW2ldID0ge307XHJcbiAgICByZXNbaV0uZGF0YSA9IHtcclxuICAgICAgbmFtZTogZGF0YVtpXSA/IGRhdGFbaV0ubmFtZSA6ICcnLFxyXG4gICAgICB2YWx1ZTogZGF0YVtpXSA/IGRhdGFbaV0udmFsdWUgOiB1bmRlZmluZWQsXHJcbiAgICAgIGV4dHJhOiBkYXRhW2ldID8gZGF0YVtpXS5leHRyYSA6IHVuZGVmaW5lZCxcclxuICAgICAgbGFiZWw6IGRhdGFbaV0gPyBkYXRhW2ldLmxhYmVsIDogJydcclxuICAgIH07XHJcbiAgICByZXNbaV0ueCA9IHhTY2FsZShpICUgY29sdW1ucyk7XHJcbiAgICByZXNbaV0ueSA9IHlTY2FsZShNYXRoLmZsb29yKGkgLyBjb2x1bW5zKSk7XHJcbiAgICByZXNbaV0ud2lkdGggPSBjYXJkV2lkdGg7XHJcbiAgICByZXNbaV0uaGVpZ2h0ID0gY2FyZEhlaWdodDtcclxuICAgIHJlc1tpXS5kYXRhLnBlcmNlbnQgPSB0b3RhbCA+IDAgPyByZXNbaV0uZGF0YS52YWx1ZSAvIHRvdGFsIDogMDtcclxuICAgIHJlc1tpXS5kYXRhLnRvdGFsID0gdG90YWw7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb3RhbChyZXN1bHRzKSB7XHJcbiAgcmV0dXJuIHJlc3VsdHMubWFwKGQgPT4gKGQgPyBkLnZhbHVlIDogMCkpLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCk7XHJcbn1cclxuIl19