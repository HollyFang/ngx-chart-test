// Robert Penner's easeOutExpo
function easeOutExpo(t, b, c, d) {
    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;
}
/**
 * Counts from a number to the end incrementally.
 */
export function count(countFrom, countTo, countDecimals, countDuration, callback) {
    const startVal = Number(countFrom);
    const endVal = Number(countTo);
    const countDown = startVal > endVal;
    const decimals = Math.max(0, countDecimals);
    const dec = Math.pow(10, decimals);
    const duration = Number(countDuration) * 1000;
    let startTime;
    function runCount(timestamp) {
        let frameVal;
        const progress = timestamp - startTime;
        if (countDown) {
            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);
        }
        else {
            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);
        }
        if (countDown) {
            frameVal = frameVal < endVal ? endVal : frameVal;
        }
        else {
            frameVal = frameVal > endVal ? endVal : frameVal;
        }
        frameVal = Math.round(frameVal * dec) / dec;
        const tick = progress < duration;
        callback({
            value: frameVal,
            progress,
            timestamp,
            finished: !tick
        });
        if (tick) {
            return requestAnimationFrame(val => runCount(val));
        }
    }
    return requestAnimationFrame(timestamp => {
        startTime = timestamp;
        return runCount(timestamp);
    });
}
/**
 * Determine decimals places
 *
 * @export
 */
export function decimalChecker(countTo) {
    const endVal = Number(countTo);
    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {
        return 2;
    }
    return 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3dpbWxhbmUvbmd4LWNoYXJ0cy9zcmMvbGliL2NvbW1vbi9jb3VudC9jb3VudC5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCO0FBQzlCLFNBQVMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDN0IsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ25FLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxLQUFLLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLFFBQVE7SUFDOUUsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25DLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQixNQUFNLFNBQVMsR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBQ3BDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDOUMsSUFBSSxTQUFTLENBQUM7SUFFZCxTQUFTLFFBQVEsQ0FBQyxTQUFTO1FBQ3pCLElBQUksUUFBUSxDQUFDO1FBQ2IsTUFBTSxRQUFRLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUV2QyxJQUFJLFNBQVMsRUFBRTtZQUNiLFFBQVEsR0FBRyxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxHQUFHLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM3RTthQUFNO1lBQ0wsUUFBUSxHQUFHLFdBQVcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sR0FBRyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDekU7UUFFRCxJQUFJLFNBQVMsRUFBRTtZQUNiLFFBQVEsR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztTQUNsRDthQUFNO1lBQ0wsUUFBUSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1NBQ2xEO1FBRUQsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUU1QyxNQUFNLElBQUksR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ2pDLFFBQVEsQ0FBQztZQUNQLEtBQUssRUFBRSxRQUFRO1lBQ2YsUUFBUTtZQUNSLFNBQVM7WUFDVCxRQUFRLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLENBQUMsQ0FBQztRQUVILElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQztJQUVELE9BQU8scUJBQXFCLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDdkMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUN0QixPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUFPO0lBQ3BDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUvQixJQUFJLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQzlDLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFFRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBSb2JlcnQgUGVubmVyJ3MgZWFzZU91dEV4cG9cclxuZnVuY3Rpb24gZWFzZU91dEV4cG8odCwgYiwgYywgZCkge1xyXG4gIHJldHVybiAoYyAqICgtTWF0aC5wb3coMiwgKC0xMCAqIHQpIC8gZCkgKyAxKSAqIDEwMjQpIC8gMTAyMyArIGI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3VudHMgZnJvbSBhIG51bWJlciB0byB0aGUgZW5kIGluY3JlbWVudGFsbHkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY291bnQoY291bnRGcm9tLCBjb3VudFRvLCBjb3VudERlY2ltYWxzLCBjb3VudER1cmF0aW9uLCBjYWxsYmFjaykge1xyXG4gIGNvbnN0IHN0YXJ0VmFsID0gTnVtYmVyKGNvdW50RnJvbSk7XHJcbiAgY29uc3QgZW5kVmFsID0gTnVtYmVyKGNvdW50VG8pO1xyXG4gIGNvbnN0IGNvdW50RG93biA9IHN0YXJ0VmFsID4gZW5kVmFsO1xyXG4gIGNvbnN0IGRlY2ltYWxzID0gTWF0aC5tYXgoMCwgY291bnREZWNpbWFscyk7XHJcbiAgY29uc3QgZGVjID0gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcclxuICBjb25zdCBkdXJhdGlvbiA9IE51bWJlcihjb3VudER1cmF0aW9uKSAqIDEwMDA7XHJcbiAgbGV0IHN0YXJ0VGltZTtcclxuXHJcbiAgZnVuY3Rpb24gcnVuQ291bnQodGltZXN0YW1wKSB7XHJcbiAgICBsZXQgZnJhbWVWYWw7XHJcbiAgICBjb25zdCBwcm9ncmVzcyA9IHRpbWVzdGFtcCAtIHN0YXJ0VGltZTtcclxuXHJcbiAgICBpZiAoY291bnREb3duKSB7XHJcbiAgICAgIGZyYW1lVmFsID0gc3RhcnRWYWwgLSBlYXNlT3V0RXhwbyhwcm9ncmVzcywgMCwgc3RhcnRWYWwgLSBlbmRWYWwsIGR1cmF0aW9uKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZyYW1lVmFsID0gZWFzZU91dEV4cG8ocHJvZ3Jlc3MsIHN0YXJ0VmFsLCBlbmRWYWwgLSBzdGFydFZhbCwgZHVyYXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb3VudERvd24pIHtcclxuICAgICAgZnJhbWVWYWwgPSBmcmFtZVZhbCA8IGVuZFZhbCA/IGVuZFZhbCA6IGZyYW1lVmFsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZnJhbWVWYWwgPSBmcmFtZVZhbCA+IGVuZFZhbCA/IGVuZFZhbCA6IGZyYW1lVmFsO1xyXG4gICAgfVxyXG5cclxuICAgIGZyYW1lVmFsID0gTWF0aC5yb3VuZChmcmFtZVZhbCAqIGRlYykgLyBkZWM7XHJcblxyXG4gICAgY29uc3QgdGljayA9IHByb2dyZXNzIDwgZHVyYXRpb247XHJcbiAgICBjYWxsYmFjayh7XHJcbiAgICAgIHZhbHVlOiBmcmFtZVZhbCxcclxuICAgICAgcHJvZ3Jlc3MsXHJcbiAgICAgIHRpbWVzdGFtcCxcclxuICAgICAgZmluaXNoZWQ6ICF0aWNrXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGljaykge1xyXG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHZhbCA9PiBydW5Db3VudCh2YWwpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGltZXN0YW1wID0+IHtcclxuICAgIHN0YXJ0VGltZSA9IHRpbWVzdGFtcDtcclxuICAgIHJldHVybiBydW5Db3VudCh0aW1lc3RhbXApO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogRGV0ZXJtaW5lIGRlY2ltYWxzIHBsYWNlc1xyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjaW1hbENoZWNrZXIoY291bnRUbykge1xyXG4gIGNvbnN0IGVuZFZhbCA9IE51bWJlcihjb3VudFRvKTtcclxuXHJcbiAgaWYgKGVuZFZhbCAlIDEgIT09IDAgJiYgTWF0aC5hYnMoZW5kVmFsKSA8PSAxMCkge1xyXG4gICAgcmV0dXJuIDI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gMDtcclxufVxyXG4iXX0=