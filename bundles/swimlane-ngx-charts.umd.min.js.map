{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/placement.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/throttle.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/position.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection-registery.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/charts/chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/visibility-observer.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/base-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axis-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/trim-label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/ticks.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/shape.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/style.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/alignment.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/show.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axes.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/id.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-linear-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-radial-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/events.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip-area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/timeline/timeline.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend-entry.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/scale-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/advanced-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/chart-common.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/view-dimensions.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-sets.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/color.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/domain.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/sort.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/types.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/advanced-pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-layout.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/linear-gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/ngx-charts.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polyfills.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","PlacementTypes","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","component","element","nativeElement","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","componentRef","attach","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","target","key","descriptor","configurable","enumerable","get","defineProperty","Injectable","ApplicationRef","ComponentFactoryResolver","Injector","verticalPosition","elDimensions","popoverDimensions","alignment","top","height","horizontalPosition","left","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","right","bottom","positionContent","determinePlacement","TooltipContentComponent","renderer","clz","type","cssClass","ngAfterViewInit","position","bind","_this","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","Component","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Input","ViewChild","HostBinding","HostListener","decorators","desc","c","getOwnPropertyDescriptor","Reflect","decorate","__decorate","InjectionRegisteryService","injectionService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","assign","has","set","TooltipService","_super","ChartComponent","showLegend","animations","legendLabelClick","EventEmitter","legendLabelActivate","legendLabelDeactivate","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","providers","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","Output","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","runOutsideAngular","Directive","NgZone","BaseChartComponent","chartElement","cd","scheme","schemeType","select","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","markForCheck","hostElem","parentNode","formatDates","g","label","name","toLocaleDateString","series","j","resizeSubscription","subscription","observableFromEvent","pipe","debounceTime","data","data_1","data_1_1","item","copy","_c","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","ChangeDetectorRef","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","trimLabel","max","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","roundedRect","w","h","_b","tl","tr","bl","br","retval","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","toLocaleString","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","activeTime","setActiveTime","activeVal","console","log","activeTimePath","tick","toString","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","getMaxTicks","maxScaleTicks","tickValues","domain","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","StyleTypes","AlignmentTypes","ShowTypes","NgModule","imports","CommonModule","declarations","exports","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","center","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","focus","mouseover","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","navigator","userAgent","match","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","document","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","formatLabel","escapeLabel","replace","&","'","`","\"","<",">","entryComponents","cache","id","newId","random","pow","CircleSeriesComponent","activate","deactivate","barVisible","ngOnInit","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","findIndex","visibleValue","mapDataPointToCircle","cx","seriesName","tooltipLabel","xScale","Number","color","cy","yScale","d1","range","colors","getColor","classNames","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","onClick","isActive","entry","activeEntries","find","activateCircle","deactivateCircle","CircleComponent","isArray","join","GridPanelSeriesComponent","gridPanels","getGridPanels","className","step","paddingInner","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","gradient","initialized","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","t","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","requestAnimationFrame","timestamp","runCount","frameVal","progress","round","finished","val","decimalChecker","abs","root","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","global","MouseEvent","createMouseEvent","bubbles","cancelable","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","_e","_f","includes","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","d3event","selection","invert","LegendComponent","horizontal","labelClick","labelActivate","labelDeactivate","legendEntries","getLegendEntries","items","formattedLabel","this_1","trackBy","index","LegendEntryComponent","toggle","ScaleLegendComponent","sanitizer","gradientValues","gradientString","direction","bypassSecurityTrustStyle","splits","pairs","reverse","forEach","DomSanitizer","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","GridPanelComponent","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","AxesModule","TooltipModule","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","AreaChartComponent","legendTitle","baseValue","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","xAxis","yAxis","showXAxisLabel","showYAxisLabel","legend","timeline","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","sort","a","aDate","getTime","bDate","autoScale","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","isDate","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","ChartCommonModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valuesDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","valueDomain","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","D0Types","BarVerticalStackedComponent","SeriesVerticalComponent","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","d0Type","bars","getLabel","bar","offset1","offset0","ariaLabel","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","SeriesHorizontal","dataLabelWidthChanged","click","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","circles","getCircles","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","hasRange","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","sin","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","isIE","test","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","textX","textY","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","PieChartModule","LineChartModule","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","invertColor","d3_color.rgb","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","valueType","TreeMapComponent","treemap","stratify","parentId","isRoot","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","text","getTickPath","smallAngle","lineGenerator","BarChartModule","SVGElement","HTMLDivElement","AreaChartModule","BubbleChartModule","HeatMapModule","PolarChartModule","NumberCardModule","TreeMapModule","GaugeModule","fieldType","groupByType","timeFormat","formatter"],"mappings":"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C,GACpChT,aAAY7X,EAAMypB,GAAU,CAAEhd,IAC9BqL,QAAO9X,EAAA,CAAG4X,EAAAA,aAAcgT,EAAYC,GAAkBpB,GAAU,CAAEhd,YE7CzDqe,GAAY,CACrB,CACEjc,KAAM,QACNkc,YAAY,EACZlH,MAAO,UACP9O,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACElG,KAAM,UACNkc,YAAY,EACZlH,MAAO,UACP9O,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACElG,KAAM,OACNkc,YAAY,EACZlH,MAAO,UACP9O,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACElG,KAAM,OACNkc,YAAY,EACZlH,MAAO,UACP9O,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAExF,CACElG,KAAM,QACNkc,YAAY,EACZlH,MAAO,aACP9O,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACElG,KAAM,MACNkc,YAAY,EACZlH,MAAO,aACP9O,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACElG,KAAM,OACNkc,YAAY,EACZlH,MAAO,aACP9O,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACElG,KAAM,QACNkc,YAAY,EACZlH,MAAO,UACP9O,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACElG,KAAM,QACNkc,YAAY,EACZlH,MAAO,UACP9O,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACElG,KAAM,SACNkc,YAAY,EACZlH,MAAO,UACP9O,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACElG,KAAM,UACNkc,YAAY,EACZlH,MAAO,UACP9O,OAAQ,CACN,UAC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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum PlacementTypes {\r\n  top = 'top' as any,\r\n  bottom = 'bottom' as any,\r\n  left = 'left' as any,\r\n  right = 'right' as any\r\n}\r\n","import {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Injectable,\r\n  Injector,\r\n  ViewContainerRef,\r\n  EmbeddedViewRef,\r\n  Type\r\n} from '@angular/core';\r\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\r\n\r\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\r\n  return x.element;\r\n}\r\n\r\n/**\r\n * Injection service is a helper to append components\r\n * dynamically to a known location in the DOM, most\r\n * noteably for dialogs/tooltips appending to body.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class InjectionService {\r\n  static globalRootViewContainer: ViewContainerRef = null;\r\n\r\n  /**\r\n   * Sets a default global root view container. This is useful for\r\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\r\n   *\r\n   * @param container\r\n   */\r\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\r\n    InjectionService.globalRootViewContainer = container;\r\n  }\r\n\r\n  private _container: ViewContainerRef;\r\n\r\n  constructor(\r\n    private applicationRef: ApplicationRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  /**\r\n   * Gets the root view container to inject the component to.\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\r\n    if (this._container) return this._container;\r\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\r\n\r\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\r\n\r\n    throw new Error(\r\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Overrides the default root view container. This is useful for\r\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\r\n   *\r\n   * @param container\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  setRootViewContainer(container: ViewContainerRef): void {\r\n    this._container = container;\r\n  }\r\n\r\n  /**\r\n   * Gets the html element for a component ref.\r\n   *\r\n   * @param componentRef\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\r\n    if (isViewContainerRef(component)) {\r\n      return component.element.nativeElement;\r\n    }\r\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\r\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n    }\r\n\r\n    // the top most component root node has no `hostView`\r\n    return component.location.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Gets the root component container html element.\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\r\n    return this.getComponentRootNode(component);\r\n  }\r\n\r\n  /**\r\n   * Projects the bindings onto the component\r\n   *\r\n   * @param component\r\n   * @param options\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\r\n    if (bindings) {\r\n      if (bindings.inputs !== undefined) {\r\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\r\n        for (const bindingName of bindingKeys) {\r\n          component.instance[bindingName] = bindings.inputs[bindingName];\r\n        }\r\n      }\r\n\r\n      if (bindings.outputs !== undefined) {\r\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\r\n        for (const eventName of eventKeys) {\r\n          component.instance[eventName] = bindings.outputs[eventName];\r\n        }\r\n      }\r\n    }\r\n\r\n    return component;\r\n  }\r\n\r\n  /**\r\n   * Appends a component to a adjacent location\r\n   *\r\n   * @param componentClass\r\n   * @param [options={}]\r\n   * @param [location]\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\r\n    if (!location) location = this.getRootViewContainer();\r\n    const appendLocation = this.getComponentRootNode(location);\r\n\r\n    const portalHost = new DomPortalHost(\r\n      appendLocation,\r\n      this.componentFactoryResolver,\r\n      this.applicationRef,\r\n      this.injector\r\n    );\r\n\r\n    const portal = new ComponentPortal(componentClass);\r\n\r\n    const componentRef = portalHost.attach(portal);\r\n    this.projectComponentBindings(componentRef, bindings);\r\n    return componentRef;\r\n  }\r\n}\r\n","/**\r\n * Throttle a function\r\n *\r\n */\r\nexport function throttle(func: any, wait: number, options?: any) {\r\n  options = options || {};\r\n  let context;\r\n  let args;\r\n  let result;\r\n  let timeout = null;\r\n  let previous = 0;\r\n\r\n  function later() {\r\n    previous = options.leading === false ? 0 : +new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  }\r\n\r\n  return function () {\r\n    const now = +new Date();\r\n\r\n    if (!previous && options.leading === false) {\r\n      previous = now;\r\n    }\r\n\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nexport function throttleable(duration: number, options?: any) {\r\n  return function innerDecorator(target, key, descriptor) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: descriptor.enumerable,\r\n      get: function getter() {\r\n        Object.defineProperty(this, key, {\r\n          configurable: true,\r\n          enumerable: descriptor.enumerable,\r\n          value: throttle(descriptor.value, duration, options)\r\n        });\r\n\r\n        return this[key];\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { PlacementTypes } from './placement.type';\r\n\r\nconst caretOffset = 7;\r\n\r\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\r\n  if (alignment === 'top') {\r\n    return elDimensions.top - caretOffset;\r\n  }\r\n\r\n  if (alignment === 'bottom') {\r\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\r\n  }\r\n\r\n  if (alignment === 'center') {\r\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\r\n  if (alignment === 'left') {\r\n    return elDimensions.left - caretOffset;\r\n  }\r\n\r\n  if (alignment === 'right') {\r\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\r\n  }\r\n\r\n  if (alignment === 'center') {\r\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Position helper for the popover directive.\r\n *\r\n * @export\r\n */\r\nexport class PositionHelper {\r\n  /**\r\n   * Calculate vertical alignment position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\r\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n\r\n    if (result + popoverDimensions.height > window.innerHeight) {\r\n      result = window.innerHeight - popoverDimensions.height;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate vertical caret position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\r\n    let result;\r\n\r\n    if (alignment === 'top') {\r\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\r\n    }\r\n\r\n    if (alignment === 'bottom') {\r\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\r\n    }\r\n\r\n    if (alignment === 'center') {\r\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\r\n    }\r\n\r\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\r\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate horz alignment position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\r\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n\r\n    if (result + popoverDimensions.width > window.innerWidth) {\r\n      result = window.innerWidth - popoverDimensions.width;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate horz caret position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\r\n    let result;\r\n\r\n    if (alignment === 'left') {\r\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\r\n    }\r\n\r\n    if (alignment === 'right') {\r\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\r\n    }\r\n\r\n    if (alignment === 'center') {\r\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\r\n    }\r\n\r\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\r\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Checks if the element's position should be flipped\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\r\n    let flip = false;\r\n\r\n    if (placement === 'right') {\r\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'left') {\r\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'top') {\r\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'bottom') {\r\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    return flip;\r\n  }\r\n\r\n  /**\r\n   * Position caret\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\r\n    let top = 0;\r\n    let left = 0;\r\n\r\n    if (placement === PlacementTypes.right) {\r\n      left = -7;\r\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.left) {\r\n      left = elmDim.width;\r\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.top) {\r\n      top = elmDim.height;\r\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.bottom) {\r\n      top = -7;\r\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    }\r\n\r\n    return { top, left };\r\n  }\r\n\r\n  /**\r\n   * Position content\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\r\n    let top = 0;\r\n    let left = 0;\r\n\r\n    if (placement === PlacementTypes.right) {\r\n      left = hostDim.left + hostDim.width + spacing;\r\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.left) {\r\n      left = hostDim.left - elmDim.width - spacing;\r\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.top) {\r\n      top = hostDim.top - elmDim.height - spacing;\r\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.bottom) {\r\n      top = hostDim.top + hostDim.height + spacing;\r\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n    }\r\n\r\n    return { top, left };\r\n  }\r\n\r\n  /**\r\n   * Determine placement based on flip\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\r\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\r\n\r\n    if (shouldFlip) {\r\n      if (placement === PlacementTypes.right) {\r\n        return PlacementTypes.left;\r\n      } else if (placement === PlacementTypes.left) {\r\n        return PlacementTypes.right;\r\n      } else if (placement === PlacementTypes.top) {\r\n        return PlacementTypes.bottom;\r\n      } else if (placement === PlacementTypes.bottom) {\r\n        return PlacementTypes.top;\r\n      }\r\n    }\r\n\r\n    return placement;\r\n  }\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ViewChild,\r\n  HostBinding,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\nimport { throttleable } from '../../utils/throttle';\r\nimport { PositionHelper, PlacementTypes } from './position';\r\n\r\nimport { StyleTypes } from './style.type';\r\nimport { AlignmentTypes } from './alignment.type';\r\n\r\n@Component({\r\n  selector: 'ngx-tooltip-content',\r\n  template: `\r\n    <div>\r\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\r\n      <div class=\"tooltip-content\">\r\n        <span *ngIf=\"!title\">\r\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\r\n        </span>\r\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\r\n      </div>\r\n    </div>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./tooltip.component.scss']\r\n})\r\nexport class TooltipContentComponent implements AfterViewInit {\r\n  @Input() host: any;\r\n  @Input() showCaret: boolean;\r\n  @Input() type: StyleTypes;\r\n  @Input() placement: PlacementTypes;\r\n  @Input() alignment: AlignmentTypes;\r\n  @Input() spacing: number;\r\n  @Input() cssClass: string;\r\n  @Input() title: string;\r\n  @Input() template: any;\r\n  @Input() context: any;\r\n\r\n  @ViewChild('caretElm') caretElm;\r\n\r\n  @HostBinding('class')\r\n  get cssClasses(): string {\r\n    let clz = 'ngx-charts-tooltip-content';\r\n    clz += ` position-${this.placement}`;\r\n    clz += ` type-${this.type}`;\r\n    clz += ` ${this.cssClass}`;\r\n    return clz;\r\n  }\r\n\r\n  constructor(public element: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(this.position.bind(this));\r\n  }\r\n\r\n  position(): void {\r\n    const nativeElm = this.element.nativeElement;\r\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\r\n\r\n    // if no dims were found, never show\r\n    if (!hostDim.height && !hostDim.width) return;\r\n\r\n    const elmDim = nativeElm.getBoundingClientRect();\r\n    this.checkFlip(hostDim, elmDim);\r\n    this.positionContent(nativeElm, hostDim, elmDim);\r\n\r\n    if (this.showCaret) {\r\n      this.positionCaret(hostDim, elmDim);\r\n    }\r\n\r\n    // animate its entry\r\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\r\n  }\r\n\r\n  positionContent(nativeElm, hostDim, elmDim): void {\r\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\r\n\r\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\r\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\r\n  }\r\n\r\n  positionCaret(hostDim, elmDim): void {\r\n    const caretElm = this.caretElm.nativeElement;\r\n    const caretDimensions = caretElm.getBoundingClientRect();\r\n    const { top, left } = PositionHelper.positionCaret(\r\n      this.placement,\r\n      elmDim,\r\n      hostDim,\r\n      caretDimensions,\r\n      this.alignment\r\n    );\r\n\r\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\r\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\r\n  }\r\n\r\n  checkFlip(hostDim, elmDim): void {\r\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\r\n  }\r\n\r\n  @HostListener('window:resize')\r\n  @throttleable(100)\r\n  onWindowResize(): void {\r\n    this.position();\r\n  }\r\n}\r\n","import { ComponentRef, Type } from '@angular/core';\r\nimport { InjectionService } from './injection.service';\r\n\r\nexport interface PartialBindings {\r\n  inputs?: object;\r\n  outputs?: object;\r\n}\r\n\r\nexport abstract class InjectionRegisteryService<T = any> {\r\n  protected abstract type: Type<T>;\r\n\r\n  protected defaults: PartialBindings = {};\r\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\r\n\r\n  constructor(public injectionService: InjectionService) {}\r\n\r\n  getByType(type: Type<T> = this.type) {\r\n    return this.components.get(type);\r\n  }\r\n\r\n  create(bindings: object): ComponentRef<T> {\r\n    return this.createByType(this.type, bindings);\r\n  }\r\n\r\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\r\n    bindings = this.assignDefaults(bindings);\r\n\r\n    const component = this.injectComponent(type, bindings);\r\n    this.register(type, component);\r\n\r\n    return component;\r\n  }\r\n\r\n  destroy(instance: ComponentRef<T>): void {\r\n    const compsByType = this.components.get(instance.componentType);\r\n\r\n    if (compsByType && compsByType.length) {\r\n      const idx = compsByType.indexOf(instance);\r\n\r\n      if (idx > -1) {\r\n        const component = compsByType[idx];\r\n        component.destroy();\r\n        compsByType.splice(idx, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  destroyAll(): void {\r\n    this.destroyByType(this.type);\r\n  }\r\n\r\n  destroyByType(type: Type<T>): void {\r\n    const comps = this.components.get(type);\r\n\r\n    if (comps && comps.length) {\r\n      let i = comps.length - 1;\r\n      while (i >= 0) {\r\n        this.destroy(comps[i--]);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\r\n    return this.injectionService.appendComponent(type, bindings);\r\n  }\r\n\r\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\r\n    const inputs = { ...this.defaults.inputs };\r\n    const outputs = { ...this.defaults.outputs };\r\n\r\n    if (!bindings.inputs && !bindings.outputs) {\r\n      bindings = { inputs: bindings };\r\n    }\r\n\r\n    if (inputs) {\r\n      bindings.inputs = { ...inputs, ...bindings.inputs };\r\n    }\r\n\r\n    if (outputs) {\r\n      bindings.outputs = { ...outputs, ...bindings.outputs };\r\n    }\r\n\r\n    return bindings;\r\n  }\r\n\r\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\r\n    if (!this.components.has(type)) {\r\n      this.components.set(type, []);\r\n    }\r\n\r\n    const types = this.components.get(type);\r\n    types.push(component);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { InjectionService } from './injection.service';\r\nimport { TooltipContentComponent } from './tooltip.component';\r\nimport { InjectionRegisteryService } from './injection-registery.service';\r\n@Injectable()\r\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\r\n  type: any = TooltipContentComponent;\r\n\r\n  constructor(injectionService: InjectionService) {\r\n    super(injectionService);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { TooltipService } from '../tooltip/tooltip.service';\r\n\r\n@Component({\r\n  providers: [TooltipService],\r\n  selector: 'ngx-charts-chart',\r\n  template: `\r\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\r\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\r\n        <ng-content></ng-content>\r\n      </svg>\r\n      <ngx-charts-scale-legend\r\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\r\n        class=\"chart-legend\"\r\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\r\n        [valueRange]=\"legendOptions.domain\"\r\n        [colors]=\"legendOptions.colors\"\r\n        [height]=\"view[1]\"\r\n        [width]=\"legendWidth\"\r\n      >\r\n      </ngx-charts-scale-legend>\r\n      <ngx-charts-legend\r\n        *ngIf=\"showLegend && legendType === 'legend'\"\r\n        class=\"chart-legend\"\r\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\r\n        [data]=\"legendOptions.domain\"\r\n        [title]=\"legendOptions.title\"\r\n        [colors]=\"legendOptions.colors\"\r\n        [height]=\"view[1]\"\r\n        [width]=\"legendWidth\"\r\n        [activeEntries]=\"activeEntries\"\r\n        (labelClick)=\"legendLabelClick.emit($event)\"\r\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\r\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\r\n      >\r\n      </ngx-charts-legend>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\r\n    ])\r\n  ]\r\n})\r\nexport class ChartComponent implements OnChanges {\r\n  @Input() view;\r\n  @Input() showLegend = false;\r\n  @Input() legendOptions: any;\r\n\r\n  // remove\r\n  @Input() data;\r\n  @Input() legendData;\r\n  @Input() legendType: any;\r\n  @Input() colors: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  chartWidth: any;\r\n  title: any;\r\n  legendWidth: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    let legendColumns = 0;\r\n    if (this.showLegend) {\r\n      this.legendType = this.getLegendType();\r\n\r\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\r\n        if (this.legendType === 'scaleLegend') {\r\n          legendColumns = 1;\r\n        } else {\r\n          legendColumns = 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    const chartColumns = 12 - legendColumns;\r\n\r\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\r\n    this.legendWidth =\r\n      !this.legendOptions || this.legendOptions.position === 'right'\r\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\r\n        : this.chartWidth;\r\n  }\r\n\r\n  getLegendType(): string {\r\n    if (this.legendOptions.scaleType === 'linear') {\r\n      return 'scaleLegend';\r\n    } else {\r\n      return 'legend';\r\n    }\r\n  }\r\n}\r\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\r\n\r\n/**\r\n * Visibility Observer\r\n */\r\n@Directive({\r\n  selector: 'visibility-observer'\r\n})\r\nexport class VisibilityObserver {\r\n  @Output() visible: EventEmitter<any> = new EventEmitter();\r\n\r\n  timeout: any;\r\n  isVisible: boolean = false;\r\n\r\n  constructor(private element: ElementRef, private zone: NgZone) {\r\n    this.runCheck();\r\n  }\r\n\r\n  destroy(): void {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  onVisibilityChange(): void {\r\n    // trigger zone recalc for columns\r\n    this.zone.run(() => {\r\n      this.isVisible = true;\r\n      this.visible.emit(true);\r\n    });\r\n  }\r\n\r\n  runCheck(): void {\r\n    const check = () => {\r\n      if (!this.element) {\r\n        return;\r\n      }\r\n\r\n      // https://davidwalsh.name/offsetheight-visibility\r\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n\r\n      if (offsetHeight && offsetWidth) {\r\n        clearTimeout(this.timeout);\r\n        this.onVisibilityChange();\r\n      } else {\r\n        clearTimeout(this.timeout);\r\n        this.zone.runOutsideAngular(() => {\r\n          this.timeout = setTimeout(() => check(), 100);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.zone.runOutsideAngular(() => {\r\n      this.timeout = setTimeout(() => check());\r\n    });\r\n  }\r\n}\r\n","import {\r\n  ElementRef,\r\n  NgZone,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { fromEvent as observableFromEvent } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { VisibilityObserver } from '../utils/visibility-observer';\r\n\r\n@Component({\r\n  selector: 'base-chart',\r\n  template: ` <div></div> `\r\n})\r\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\r\n  @Input() results: any;\r\n  @Input() view: [number, number];\r\n  @Input() scheme: any = 'cool';\r\n  @Input() schemeType: string = 'ordinal';\r\n  @Input() customColors: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  width: number;\r\n  height: number;\r\n  resizeSubscription: any;\r\n  visibilityObserver: VisibilityObserver;\r\n\r\n  constructor(protected chartElement: ElementRef, protected zone: NgZone, protected cd: ChangeDetectorRef) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.bindWindowResizeEvent();\r\n\r\n    // listen for visibility of the element for hidden by default scenario\r\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\r\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unbindEvents();\r\n    if (this.visibilityObserver) {\r\n      this.visibilityObserver.visible.unsubscribe();\r\n      this.visibilityObserver.destroy();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.results) {\r\n      this.results = this.cloneData(this.results);\r\n    } else {\r\n      this.results = [];\r\n    }\r\n\r\n    if (this.view) {\r\n      this.width = this.view[0];\r\n      this.height = this.view[1];\r\n    } else {\r\n      const dims = this.getContainerDims();\r\n      if (dims) {\r\n        this.width = dims.width;\r\n        this.height = dims.height;\r\n      }\r\n    }\r\n\r\n    // default values if width or height are 0 or undefined\r\n    if (!this.width) {\r\n      this.width = 600;\r\n    }\r\n\r\n    if (!this.height) {\r\n      this.height = 400;\r\n    }\r\n\r\n    this.width = Math.floor(this.width);\r\n    this.height = Math.floor(this.height);\r\n\r\n    if (this.cd) {\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  getContainerDims(): any {\r\n    let width;\r\n    let height;\r\n    const hostElem = this.chartElement.nativeElement;\r\n\r\n    if (hostElem.parentNode !== null) {\r\n      // Get the container dimensions\r\n      const dims = hostElem.parentNode.getBoundingClientRect();\r\n      width = dims.width;\r\n      height = dims.height;\r\n    }\r\n\r\n    if (width && height) {\r\n      return { width, height };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Converts all date objects that appear as name\r\n   * into formatted date strings\r\n   */\r\n  formatDates(): void {\r\n    for (let i = 0; i < this.results.length; i++) {\r\n      const g = this.results[i];\r\n      g.label = g.name;\r\n      if (g.label instanceof Date) {\r\n        g.label = g.label.toLocaleDateString();\r\n      }\r\n\r\n      if (g.series) {\r\n        for (let j = 0; j < g.series.length; j++) {\r\n          const d = g.series[j];\r\n          d.label = d.name;\r\n          if (d.label instanceof Date) {\r\n            d.label = d.label.toLocaleDateString();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected unbindEvents(): void {\r\n    if (this.resizeSubscription) {\r\n      this.resizeSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private bindWindowResizeEvent(): void {\r\n    const source = observableFromEvent(window, 'resize');\r\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\r\n      this.update();\r\n      if (this.cd) {\r\n        this.cd.markForCheck();\r\n      }\r\n    });\r\n    this.resizeSubscription = subscription;\r\n  }\r\n\r\n  /**\r\n   * Clones the data into a new object\r\n   *\r\n   * @memberOf BaseChart\r\n   */\r\n  private cloneData(data): any {\r\n    const results = [];\r\n\r\n    for (const item of data) {\r\n      const copy = {\r\n        name: item['name']\r\n      };\r\n\r\n      if (item['value'] !== undefined) {\r\n        copy['value'] = item['value'];\r\n      }\r\n\r\n      if (item['series'] !== undefined) {\r\n        copy['series'] = [];\r\n        for (const seriesItem of item['series']) {\r\n          const seriesItemCopy = Object.assign({}, seriesItem);\r\n          copy['series'].push(seriesItemCopy);\r\n        }\r\n      }\r\n\r\n      if (item['extra'] !== undefined) {\r\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\r\n      }\r\n\r\n      results.push(copy);\r\n    }\r\n\r\n    return results;\r\n  }\r\n}\r\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-axis-label]',\r\n  template: `\r\n    <svg:text\r\n      [attr.stroke-width]=\"strokeWidth\"\r\n      [attr.x]=\"x\"\r\n      [attr.y]=\"y\"\r\n      [attr.text-anchor]=\"textAnchor\"\r\n      [attr.transform]=\"transform\"\r\n    >\r\n      {{ label }}\r\n    </svg:text>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AxisLabelComponent implements OnChanges {\r\n  @Input() orient;\r\n  @Input() label;\r\n  @Input() offset;\r\n  @Input() width;\r\n  @Input() height;\r\n\r\n  x: any;\r\n  y: any;\r\n  transform: any;\r\n  strokeWidth: any;\r\n  textAnchor: any;\r\n  element: ElementRef;\r\n  textHeight = 25;\r\n  margin = 5;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.strokeWidth = '0.01';\r\n    this.textAnchor = 'middle';\r\n    this.transform = '';\r\n\r\n    switch (this.orient) {\r\n      case 'top':\r\n        this.y = this.offset;\r\n        this.x = this.width / 2;\r\n        break;\r\n      case 'bottom':\r\n        this.y = this.offset;\r\n        this.x = this.width / 2;\r\n        break;\r\n      case 'left':\r\n        this.y = -(this.offset + this.textHeight + this.margin);\r\n        this.x = -this.height / 2;\r\n        this.transform = 'rotate(270)';\r\n        break;\r\n      case 'right':\r\n        this.y = this.offset + this.margin;\r\n        this.x = -this.height / 2;\r\n        this.transform = 'rotate(270)';\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n}\r\n","export function trimLabel(s, max = 16): string {\r\n  if (typeof s !== 'string') {\r\n    if (typeof s === 'number') {\r\n      return s + '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  s = s.trim();\r\n  if (s.length <= max) {\r\n    return s;\r\n  } else {\r\n    return `${s.slice(0, max)}...`;\r\n  }\r\n}\r\n","export function reduceTicks(ticks, maxTicks) {\r\n  if (ticks.length > maxTicks) {\r\n    const reduced = [];\r\n    const modulus = Math.floor(ticks.length / maxTicks);\r\n    for (let i = 0; i < ticks.length; i++) {\r\n      if (i % modulus === 0) {\r\n        reduced.push(ticks[i]);\r\n      }\r\n    }\r\n    ticks = reduced;\r\n  }\r\n\r\n  return ticks;\r\n}\r\n","/**\r\n * Generates a rounded rectanglar path\r\n *\r\n * @export\r\n * @param x, y, w, h, r, tl, tr, bl, br\r\n */\r\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\r\n  let retval = '';\r\n\r\n  w = Math.floor(w);\r\n  h = Math.floor(h);\r\n\r\n  w = w === 0 ? 1 : w;\r\n  h = h === 0 ? 1 : h;\r\n\r\n  retval = `M${[x + r, y]}`;\r\n  retval += `h${w - 2 * r}`;\r\n\r\n  if (tr) {\r\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\r\n  } else {\r\n    retval += `h${r}v${r}`;\r\n  }\r\n\r\n  retval += `v${h - 2 * r}`;\r\n\r\n  if (br) {\r\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\r\n  } else {\r\n    retval += `v${r}h${-r}`;\r\n  }\r\n\r\n  retval += `h${2 * r - w}`;\r\n\r\n  if (bl) {\r\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\r\n  } else {\r\n    retval += `h${-r}v${-r}`;\r\n  }\r\n\r\n  retval += `v${2 * r - h}`;\r\n\r\n  if (tl) {\r\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\r\n  } else {\r\n    retval += `v${-r}h${r}`;\r\n  }\r\n\r\n  retval += `z`;\r\n\r\n  return retval;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ElementRef,\r\n  ViewChild,\r\n  SimpleChanges,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { reduceTicks } from './ticks.helper';\r\nimport { roundedRect } from '../../common/shape.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-x-axis-ticks]',\r\n  template: `\r\n    <svg:g #ticksel>\r\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\r\n        <title>{{ tickFormat(tick) }}</title>\r\n        <svg:text\r\n          stroke-width=\"0.01\"\r\n          [attr.text-anchor]=\"textAnchor\"\r\n          [attr.transform]=\"textTransform\"\r\n          [style.font-size]=\"'12px'\"\r\n        >\r\n          {{ tickTrim(tickFormat(tick)) }}\r\n        </svg:text>\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:path\r\n      *ngIf=\"activeTime\"\r\n      [attr.d]=\"activeTimePath\"\r\n      [attr.transform]=\"gridLineTransform()\"\r\n    />\r\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\r\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\r\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\r\n  @Input() scale;\r\n  @Input() orient;\r\n  @Input() tickArguments = [5];\r\n  @Input() tickValues: any[];\r\n  @Input() tickStroke = '#ccc';\r\n  @Input() trimTicks: boolean = true;\r\n  @Input() maxTickLength: number = 16;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() gridLineHeight;\r\n  @Input() width;\r\n  @Input() activeTime;\r\n  @Input() rotateTicks: boolean = true;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  verticalSpacing: number = 20;\r\n  rotateLabels: boolean = false;\r\n  innerTickSize: number = 6;\r\n  outerTickSize: number = 6;\r\n  tickPadding: number = 3;\r\n  textAnchor: string = 'middle';\r\n  maxTicksLength: number = 0;\r\n  maxAllowedLength: number = 16;\r\n  adjustedScale: any;\r\n  textTransform: any;\r\n  ticks: any;\r\n  tickFormat: (o: any) => any;\r\n  height: number = 0;\r\n  activeTimePath:string;\r\n\r\n  @ViewChild('ticksel') ticksElement: ElementRef;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  updateDims(): void {\r\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\r\n    if (height !== this.height) {\r\n      this.height = height;\r\n      this.dimensionsChanged.emit({ height });\r\n      setTimeout(() => this.updateDims());\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    const scale = this.scale;\r\n    this.ticks = this.getTicks();\r\n\r\n    if (this.tickFormatting) {\r\n      this.tickFormat = this.tickFormatting;\r\n    } else if (scale.tickFormat) {\r\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\r\n    } else {\r\n      this.tickFormat = function (d) {\r\n        if (d.constructor.name === 'Date') {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\r\n\r\n    this.adjustedScale = this.scale.bandwidth\r\n      ? function (d) {\r\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\r\n        }\r\n      : this.scale;\r\n\r\n    this.textTransform = '';\r\n    if (angle && angle !== 0) {\r\n      this.textTransform = `rotate(${angle})`;\r\n      this.textAnchor = 'end';\r\n      this.verticalSpacing = 10;\r\n    } else {\r\n      this.textAnchor = 'middle';\r\n    }\r\n\r\n    if(this.activeTime){\r\n      this.setActiveTime();\r\n    }\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  setActiveTime(): void {\r\n    let activeVal = this.adjustedScale(this.activeTime);\r\nconsole.log('setReferencelines');\r\n    this.activeTimePath = roundedRect(activeVal, this.height, 1, this.height, 0, [\r\n      false,\r\n      false,\r\n      false,\r\n      false\r\n    ]);\r\n  }\r\n  getRotationAngle(ticks): number {\r\n    let angle = 0;\r\n    this.maxTicksLength = 0;\r\n    for (let i = 0; i < ticks.length; i++) {\r\n      const tick = this.tickFormat(ticks[i]).toString();\r\n      let tickLength = tick.length;\r\n      if (this.trimTicks) {\r\n        tickLength = this.tickTrim(tick).length;\r\n      }\r\n\r\n      if (tickLength > this.maxTicksLength) {\r\n        this.maxTicksLength = tickLength;\r\n      }\r\n    }\r\n\r\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\r\n    const charWidth = 8; // need to measure this\r\n    const wordWidth = len * charWidth;\r\n\r\n    let baseWidth = wordWidth;\r\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\r\n\r\n    // calculate optimal angle\r\n    while (baseWidth > maxBaseWidth && angle > -90) {\r\n      angle -= 30;\r\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n  getTicks() {\r\n    let ticks;\r\n    const maxTicks = this.getMaxTicks(20);\r\n    const maxScaleTicks = this.getMaxTicks(100);\r\n\r\n    if (this.tickValues) {\r\n      ticks = this.tickValues;\r\n    } else if (this.scale.ticks) {\r\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\r\n    } else {\r\n      ticks = this.scale.domain();\r\n      ticks = reduceTicks(ticks, maxTicks);\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getMaxTicks(tickWidth: number): number {\r\n    return Math.floor(this.width / tickWidth);\r\n  }\r\n\r\n  tickTransform(tick): string {\r\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\r\n  }\r\n\r\n  gridLineTransform(): string {\r\n    return `translate(0,${-this.verticalSpacing - 5})`;\r\n  }\r\n\r\n  tickTrim(label: string): string {\r\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ViewChild,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-x-axis]',\r\n  template: `\r\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\r\n      <svg:g\r\n        ngx-charts-x-axis-ticks\r\n        *ngIf=\"xScale\"\r\n        [trimTicks]=\"trimTicks\"\r\n        [rotateTicks]=\"rotateTicks\"\r\n        [maxTickLength]=\"maxTickLength\"\r\n        [tickFormatting]=\"tickFormatting\"\r\n        [tickArguments]=\"tickArguments\"\r\n        [tickStroke]=\"tickStroke\"\r\n        [scale]=\"xScale\"\r\n        [orient]=\"xOrient\"\r\n        [showGridLines]=\"showGridLines\"\r\n        [gridLineHeight]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n        [tickValues]=\"ticks\"\r\n        [activeTime]=\"activeTime\"\r\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-axis-label\r\n        *ngIf=\"showLabel\"\r\n        [label]=\"labelText\"\r\n        [offset]=\"labelOffset\"\r\n        [orient]=\"'bottom'\"\r\n        [height]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class XAxisComponent implements OnChanges {\r\n  @Input() xScale;\r\n  @Input() dims;\r\n  @Input() trimTicks: boolean;\r\n  @Input() rotateTicks: boolean = true;\r\n  @Input() maxTickLength: number;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() showLabel;\r\n  @Input() labelText;\r\n  @Input() ticks: any[];\r\n  @Input() xAxisTickInterval;\r\n  @Input() xAxisTickCount: any;\r\n  @Input() xOrient: string = 'bottom';\r\n  @Input() xAxisOffset: number = 0;\r\n  @Input() activeTime;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  xAxisClassName: string = 'x axis';\r\n\r\n  tickArguments: any;\r\n  transform: any;\r\n  labelOffset: number = 0;\r\n  fill: string = 'none';\r\n  stroke: string = 'stroke';\r\n  tickStroke: string = '#ccc';\r\n  strokeWidth: string = 'none';\r\n  padding: number = 5;\r\n\r\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\r\n\r\n    if (typeof this.xAxisTickCount !== 'undefined') {\r\n      this.tickArguments = [this.xAxisTickCount];\r\n    }\r\n  }\r\n\r\n  emitTicksHeight({ height }): void {\r\n    const newLabelOffset = height + 25 + 5;\r\n    if (newLabelOffset !== this.labelOffset) {\r\n      this.labelOffset = newLabelOffset;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ height });\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  ElementRef,\r\n  ViewChild,\r\n  EventEmitter,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { reduceTicks } from './ticks.helper';\r\nimport { roundedRect } from '../../common/shape.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-y-axis-ticks]',\r\n  template: `\r\n    <svg:g #ticksel>\r\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\r\n        <title>{{ tickFormat(tick) }}</title>\r\n        <svg:text\r\n          stroke-width=\"0.01\"\r\n          [attr.dy]=\"dy\"\r\n          [attr.x]=\"x1\"\r\n          [attr.y]=\"y1\"\r\n          [attr.text-anchor]=\"textAnchor\"\r\n          [style.font-size]=\"'12px'\"\r\n        >\r\n          {{ tickTrim(tickFormat(tick)) }}\r\n        </svg:text>\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:path\r\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\r\n      class=\"reference-area\"\r\n      [attr.d]=\"referenceAreaPath\"\r\n      [attr.transform]=\"gridLineTransform()\"\r\n    />\r\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\r\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\r\n        <svg:line\r\n          *ngIf=\"orient === 'left'\"\r\n          class=\"gridline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"gridLineWidth\"\r\n        />\r\n        <svg:line\r\n          *ngIf=\"orient === 'right'\"\r\n          class=\"gridline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"-gridLineWidth\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:g *ngFor=\"let refLine of referenceLines\">\r\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\r\n        <svg:line\r\n          class=\"refline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"gridLineWidth\"\r\n          [attr.transform]=\"gridLineTransform()\"\r\n        />\r\n        <svg:g *ngIf=\"showRefLabels\">\r\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\r\n          <svg:text\r\n            class=\"refline-label\"\r\n            [attr.dy]=\"dy\"\r\n            [attr.y]=\"-6\"\r\n            [attr.x]=\"gridLineWidth\"\r\n            [attr.text-anchor]=\"textAnchor\"\r\n          >\r\n            {{ refLine.name }}\r\n          </svg:text>\r\n        </svg:g>\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\r\n  @Input() scale;\r\n  @Input() orient;\r\n  @Input() tickArguments = [5];\r\n  @Input() tickValues: any[];\r\n  @Input() tickStroke = '#ccc';\r\n  @Input() trimTicks: boolean = true;\r\n  @Input() maxTickLength: number = 16;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() gridLineWidth;\r\n  @Input() height;\r\n  @Input() referenceLines;\r\n  @Input() showRefLabels: boolean = false;\r\n  @Input() showRefLines: boolean = false;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  innerTickSize: any = 6;\r\n  tickPadding: any = 3;\r\n  tickSpacing: any;\r\n  verticalSpacing: number = 20;\r\n  textAnchor: any = 'middle';\r\n  dy: any;\r\n  x1: any;\r\n  x2: any;\r\n  y1: any;\r\n  y2: any;\r\n  adjustedScale: any;\r\n  transform: (o: any) => string;\r\n  tickFormat: (o: any) => string;\r\n  ticks: any;\r\n  width: number = 0;\r\n  outerTickSize: number = 6;\r\n  rotateLabels: boolean = false;\r\n  refMax: number;\r\n  refMin: number;\r\n  referenceLineLength: number = 0;\r\n  referenceAreaPath: string;\r\n\r\n  @ViewChild('ticksel') ticksElement: ElementRef;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  updateDims(): void {\r\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\r\n    if (width !== this.width) {\r\n      this.width = width;\r\n      this.dimensionsChanged.emit({ width });\r\n      setTimeout(() => this.updateDims());\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    let scale;\r\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\r\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\r\n\r\n    scale = this.scale;\r\n    this.ticks = this.getTicks();\r\n\r\n    if (this.tickFormatting) {\r\n      this.tickFormat = this.tickFormatting;\r\n    } else if (scale.tickFormat) {\r\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\r\n    } else {\r\n      this.tickFormat = function (d) {\r\n        if (d.constructor.name === 'Date') {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    this.adjustedScale = scale.bandwidth\r\n      ? function (d) {\r\n          return scale(d) + scale.bandwidth() * 0.5;\r\n        }\r\n      : scale;\r\n\r\n    if (this.showRefLines && this.referenceLines) {\r\n      this.setReferencelines();\r\n    }\r\n\r\n    switch (this.orient) {\r\n      case 'top':\r\n        this.transform = function (tick) {\r\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\r\n        };\r\n        this.textAnchor = 'middle';\r\n        this.y2 = this.innerTickSize * sign;\r\n        this.y1 = this.tickSpacing * sign;\r\n        this.dy = sign < 0 ? '0em' : '.71em';\r\n        break;\r\n      case 'bottom':\r\n        this.transform = function (tick) {\r\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\r\n        };\r\n        this.textAnchor = 'middle';\r\n        this.y2 = this.innerTickSize * sign;\r\n        this.y1 = this.tickSpacing * sign;\r\n        this.dy = sign < 0 ? '0em' : '.71em';\r\n        break;\r\n      case 'left':\r\n        this.transform = function (tick) {\r\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\r\n        };\r\n        this.textAnchor = 'end';\r\n        this.x2 = this.innerTickSize * -sign;\r\n        this.x1 = this.tickSpacing * -sign;\r\n        this.dy = '.32em';\r\n        break;\r\n      case 'right':\r\n        this.transform = function (tick) {\r\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\r\n        };\r\n        this.textAnchor = 'start';\r\n        this.x2 = this.innerTickSize * -sign;\r\n        this.x1 = this.tickSpacing * -sign;\r\n        this.dy = '.32em';\r\n        break;\r\n      default:\r\n    }\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  setReferencelines(): void {\r\n    this.refMin = this.adjustedScale(\r\n      Math.min.apply(\r\n        null,\r\n        this.referenceLines.map(item => item.value)\r\n      )\r\n    );\r\n    this.refMax = this.adjustedScale(\r\n      Math.max.apply(\r\n        null,\r\n        this.referenceLines.map(item => item.value)\r\n      )\r\n    );\r\n    this.referenceLineLength = this.referenceLines.length;\r\n\r\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\r\n      false,\r\n      false,\r\n      false,\r\n      false\r\n    ]);\r\n  }\r\n\r\n  getTicks(): any {\r\n    let ticks;\r\n    const maxTicks = this.getMaxTicks(20);\r\n    const maxScaleTicks = this.getMaxTicks(50);\r\n\r\n    if (this.tickValues) {\r\n      ticks = this.tickValues;\r\n    } else if (this.scale.ticks) {\r\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\r\n    } else {\r\n      ticks = this.scale.domain();\r\n      ticks = reduceTicks(ticks, maxTicks);\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getMaxTicks(tickHeight: number): number {\r\n    return Math.floor(this.height / tickHeight);\r\n  }\r\n\r\n  tickTransform(tick): string {\r\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\r\n  }\r\n\r\n  gridLineTransform(): string {\r\n    return `translate(5,0)`;\r\n  }\r\n\r\n  tickTrim(label: string): string {\r\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ViewChild,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-y-axis]',\r\n  template: `\r\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\r\n      <svg:g\r\n        ngx-charts-y-axis-ticks\r\n        *ngIf=\"yScale\"\r\n        [trimTicks]=\"trimTicks\"\r\n        [maxTickLength]=\"maxTickLength\"\r\n        [tickFormatting]=\"tickFormatting\"\r\n        [tickArguments]=\"tickArguments\"\r\n        [tickValues]=\"ticks\"\r\n        [tickStroke]=\"tickStroke\"\r\n        [scale]=\"yScale\"\r\n        [orient]=\"yOrient\"\r\n        [showGridLines]=\"showGridLines\"\r\n        [gridLineWidth]=\"dims.width\"\r\n        [referenceLines]=\"referenceLines\"\r\n        [showRefLines]=\"showRefLines\"\r\n        [showRefLabels]=\"showRefLabels\"\r\n        [height]=\"dims.height\"\r\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\r\n      />\r\n\r\n      <svg:g\r\n        ngx-charts-axis-label\r\n        *ngIf=\"showLabel\"\r\n        [label]=\"labelText\"\r\n        [offset]=\"labelOffset\"\r\n        [orient]=\"yOrient\"\r\n        [height]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YAxisComponent implements OnChanges {\r\n  @Input() yScale;\r\n  @Input() dims;\r\n  @Input() trimTicks: boolean;\r\n  @Input() maxTickLength: number;\r\n  @Input() tickFormatting;\r\n  @Input() ticks: any[];\r\n  @Input() showGridLines = false;\r\n  @Input() showLabel;\r\n  @Input() labelText;\r\n  @Input() yAxisTickInterval;\r\n  @Input() yAxisTickCount: any;\r\n  @Input() yOrient: string = 'left';\r\n  @Input() referenceLines;\r\n  @Input() showRefLines;\r\n  @Input() showRefLabels;\r\n  @Input() yAxisOffset: number = 0;\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  yAxisClassName: string = 'y axis';\r\n  tickArguments: any;\r\n  offset: any;\r\n  transform: any;\r\n  labelOffset: number = 15;\r\n  fill: string = 'none';\r\n  stroke: string = '#CCC';\r\n  tickStroke: string = '#CCC';\r\n  strokeWidth: number = 1;\r\n  padding: number = 5;\r\n\r\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.offset = -(this.yAxisOffset + this.padding);\r\n    if (this.yOrient === 'right') {\r\n      this.labelOffset = 65;\r\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\r\n    } else {\r\n      this.offset = this.offset;\r\n      this.transform = `translate(${this.offset} , 0)`;\r\n    }\r\n\r\n    if (this.yAxisTickCount !== undefined) {\r\n      this.tickArguments = [this.yAxisTickCount];\r\n    }\r\n  }\r\n\r\n  emitTicksWidth({ width }): void {\r\n    if (width !== this.labelOffset && this.yOrient === 'right') {\r\n      this.labelOffset = width + this.labelOffset;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ width });\r\n      }, 0);\r\n    } else if (width !== this.labelOffset) {\r\n      this.labelOffset = width;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ width });\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","export enum StyleTypes {\r\n  popover = 'popover' as any,\r\n  tooltip = 'tooltip' as any\r\n}\r\n","export enum AlignmentTypes {\r\n  left = 'left' as any,\r\n  center = 'center' as any,\r\n  right = 'right' as any\r\n}\r\n","export enum ShowTypes {\r\n  all = 'all' as any,\r\n  focus = 'focus' as any,\r\n  mouseover = 'mouseover' as any\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AxisLabelComponent } from './axis-label.component';\r\nimport { XAxisComponent } from './x-axis.component';\r\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\r\nimport { YAxisComponent } from './y-axis.component';\r\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\r\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\r\n})\r\nexport class AxesModule {}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewContainerRef,\r\n  Renderer2,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { PlacementTypes } from './position';\r\nimport { StyleTypes } from './style.type';\r\nimport { AlignmentTypes } from './alignment.type';\r\nimport { ShowTypes } from './show.type';\r\n\r\nimport { TooltipService } from './tooltip.service';\r\n\r\n@Directive({ selector: '[ngx-tooltip]' })\r\nexport class TooltipDirective implements OnDestroy {\r\n  @Input() tooltipCssClass: string = '';\r\n  @Input() tooltipTitle: string = '';\r\n  @Input() tooltipAppendToBody: boolean = true;\r\n  @Input() tooltipSpacing: number = 10;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipShowCaret: boolean = true;\r\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\r\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\r\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\r\n  @Input() tooltipCloseOnClickOutside: boolean = true;\r\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\r\n  @Input() tooltipHideTimeout: number = 300;\r\n  @Input() tooltipShowTimeout: number = 100;\r\n  @Input() tooltipTemplate: any;\r\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\r\n  @Input() tooltipContext: any;\r\n  @Input() tooltipImmediateExit: boolean = false;\r\n\r\n  @Output() show = new EventEmitter();\r\n  @Output() hide = new EventEmitter();\r\n\r\n  private get listensForFocus(): boolean {\r\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\r\n  }\r\n\r\n  private get listensForHover(): boolean {\r\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\r\n  }\r\n\r\n  private component: any;\r\n  private timeout: any;\r\n  private mouseLeaveContentEvent: any;\r\n  private mouseEnterContentEvent: any;\r\n  private documentClickEvent: any;\r\n\r\n  constructor(\r\n    private tooltipService: TooltipService,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.hideTooltip(true);\r\n  }\r\n\r\n  @HostListener('focusin')\r\n  onFocus(): void {\r\n    if (this.listensForFocus) {\r\n      this.showTooltip();\r\n    }\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur(): void {\r\n    if (this.listensForFocus) {\r\n      this.hideTooltip(true);\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    if (this.listensForHover) {\r\n      this.showTooltip();\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave', ['$event.target'])\r\n  onMouseLeave(target): void {\r\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\r\n      clearTimeout(this.timeout);\r\n\r\n      if (this.component) {\r\n        const contentDom = this.component.instance.element.nativeElement;\r\n        const contains = contentDom.contains(target);\r\n        if (contains) return;\r\n      }\r\n\r\n      this.hideTooltip(this.tooltipImmediateExit);\r\n    }\r\n  }\r\n\r\n  @HostListener('click')\r\n  onMouseClick() {\r\n    if (this.listensForHover) {\r\n      this.hideTooltip(true);\r\n    }\r\n  }\r\n\r\n  showTooltip(immediate?: boolean): void {\r\n    if (this.component || this.tooltipDisabled) return;\r\n\r\n    const time = immediate\r\n      ? 0\r\n      : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\r\n\r\n    clearTimeout(this.timeout);\r\n    this.timeout = setTimeout(() => {\r\n      this.tooltipService.destroyAll();\r\n\r\n      const options = this.createBoundOptions();\r\n      this.component = this.tooltipService.create(options);\r\n\r\n      // add a tiny timeout to avoid event re-triggers\r\n      setTimeout(() => {\r\n        if (this.component) {\r\n          this.addHideListeners(this.component.instance.element.nativeElement);\r\n        }\r\n      }, 10);\r\n\r\n      this.show.emit(true);\r\n    }, time);\r\n  }\r\n\r\n  addHideListeners(tooltip): void {\r\n    // on mouse enter, cancel the hide triggered by the leave\r\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\r\n      clearTimeout(this.timeout);\r\n    });\r\n\r\n    // content mouse leave listener\r\n    if (this.tooltipCloseOnMouseLeave) {\r\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\r\n        this.hideTooltip(this.tooltipImmediateExit);\r\n      });\r\n    }\r\n\r\n    // content close on click outside\r\n    if (this.tooltipCloseOnClickOutside) {\r\n      this.documentClickEvent = this.renderer.listen(document, 'click', event => {\r\n        const contains = tooltip.contains(event.target);\r\n        if (!contains) this.hideTooltip();\r\n      });\r\n    }\r\n  }\r\n\r\n  hideTooltip(immediate: boolean = false): void {\r\n    if (!this.component) return;\r\n\r\n    const destroyFn = () => {\r\n      // remove events\r\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\r\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\r\n      if (this.documentClickEvent) this.documentClickEvent();\r\n\r\n      // emit events\r\n      this.hide.emit(true);\r\n\r\n      // destroy component\r\n      this.tooltipService.destroy(this.component);\r\n      this.component = undefined;\r\n    };\r\n\r\n    clearTimeout(this.timeout);\r\n    if (!immediate) {\r\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\r\n    } else {\r\n      destroyFn();\r\n    }\r\n  }\r\n\r\n  private createBoundOptions(): any {\r\n    return {\r\n      title: this.tooltipTitle,\r\n      template: this.tooltipTemplate,\r\n      host: this.viewContainerRef.element,\r\n      placement: this.tooltipPlacement,\r\n      alignment: this.tooltipAlignment,\r\n      type: this.tooltipType,\r\n      showCaret: this.tooltipShowCaret,\r\n      cssClass: this.tooltipCssClass,\r\n      spacing: this.tooltipSpacing,\r\n      context: this.tooltipContext\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TooltipDirective } from './tooltip.directive';\r\nimport { TooltipContentComponent } from './tooltip.component';\r\nimport { TooltipService } from './tooltip.service';\r\n\r\nimport { InjectionService } from './injection.service';\r\n\r\n@NgModule({\r\n  declarations: [TooltipContentComponent, TooltipDirective],\r\n  providers: [InjectionService, TooltipService],\r\n  exports: [TooltipContentComponent, TooltipDirective],\r\n  imports: [CommonModule],\r\n  entryComponents: [TooltipContentComponent]\r\n})\r\nexport class TooltipModule {}\r\n","/**\r\n * Formats a label given a date, number or string.\r\n *\r\n * @export\r\n */\r\nexport function formatLabel(label: any): string {\r\n  if (label instanceof Date) {\r\n    label = label.toLocaleDateString();\r\n  } else {\r\n    label = label.toLocaleString();\r\n  }\r\n\r\n  return label;\r\n}\r\n\r\n/**\r\n * Escapes a label.\r\n *\r\n * @export\r\n */\r\nexport function escapeLabel(label: any): string {\r\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\r\n    return {\r\n      '&': '&amp;',\r\n      // tslint:disable-next-line: quotemark\r\n      \"'\": '&#x27;',\r\n      '`': '&#x60;',\r\n      '\"': '&quot;',\r\n      '<': '&lt;',\r\n      '>': '&gt;'\r\n    }[match];\r\n  });\r\n}\r\n","const cache = {};\r\n\r\n/**\r\n * Generates a short id.\r\n *\r\n * Description:\r\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\r\n *   This should only be used for JavaScript specific models.\r\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n *\r\n *   Example: `ebgf`\r\n */\r\nexport function id(): string {\r\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n\r\n  // append a 'a' because neo gets mad\r\n  newId = `a${newId}`;\r\n\r\n  // ensure not already used\r\n  if (!cache[newId]) {\r\n    cache[newId] = true;\r\n    return newId;\r\n  }\r\n\r\n  return id();\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { id } from '../utils/id';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-circle-series]',\r\n  template: `\r\n    <svg:g *ngIf=\"circle\">\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-linear-gradient\r\n          orientation=\"vertical\"\r\n          [name]=\"gradientId\"\r\n          [stops]=\"circle.gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:rect\r\n        *ngIf=\"barVisible && type === 'standard'\"\r\n        [@animationState]=\"'active'\"\r\n        [attr.x]=\"circle.cx - circle.radius\"\r\n        [attr.y]=\"circle.cy\"\r\n        [attr.width]=\"circle.radius * 2\"\r\n        [attr.height]=\"circle.height\"\r\n        [attr.fill]=\"gradientFill\"\r\n        class=\"tooltip-bar\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-circle\r\n        class=\"circle\"\r\n        [cx]=\"circle.cx\"\r\n        [cy]=\"circle.cy\"\r\n        [r]=\"circle.radius\"\r\n        [fill]=\"circle.color\"\r\n        [class.active]=\"isActive({ name: circle.seriesName })\"\r\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\r\n        [data]=\"circle.value\"\r\n        [classNames]=\"circle.classNames\"\r\n        (select)=\"onClick(circle.data)\"\r\n        (activate)=\"activateCircle()\"\r\n        (deactivate)=\"deactivateCircle()\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"circle.data\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0\r\n        }),\r\n        animate(250, style({ opacity: 1 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class CircleSeriesComponent implements OnChanges, OnInit {\r\n  @Input() data;\r\n  @Input() type = 'standard';\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors: ColorHelper;\r\n  @Input() scaleType;\r\n  @Input() visibleValue;\r\n  @Input() activeEntries: any[];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  areaPath: any;\r\n  circle: any; // active circle\r\n  barVisible: boolean = false;\r\n  gradientId: string;\r\n  gradientFill: string;\r\n\r\n  ngOnInit() {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.circle = this.getActiveCircle();\r\n  }\r\n\r\n  getActiveCircle(): {} {\r\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\r\n      const label = d.name;\r\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\r\n    });\r\n\r\n    if (indexActiveDataPoint === -1) {\r\n      // No valid point is 'active/hovered over' at this moment.\r\n      return undefined;\r\n    }\r\n\r\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\r\n  }\r\n\r\n  mapDataPointToCircle(d: any, i: number): any {\r\n    const seriesName = this.data.name;\r\n\r\n    const value = d.value;\r\n    const label = d.name;\r\n    const tooltipLabel = formatLabel(label);\r\n\r\n    let cx;\r\n    if (this.scaleType === 'time') {\r\n      cx = this.xScale(label);\r\n    } else if (this.scaleType === 'linear') {\r\n      cx = this.xScale(Number(label));\r\n    } else {\r\n      cx = this.xScale(label);\r\n    }\r\n\r\n    const cy = this.yScale(this.type === 'standard' ? value : d.d1);\r\n    const radius = 5;\r\n    const height = this.yScale.range()[0] - cy;\r\n    const opacity = 1;\r\n\r\n    let color;\r\n    if (this.colors.scaleType === 'linear') {\r\n      if (this.type === 'standard') {\r\n        color = this.colors.getColor(value);\r\n      } else {\r\n        color = this.colors.getColor(d.d1);\r\n      }\r\n    } else {\r\n      color = this.colors.getColor(seriesName);\r\n    }\r\n\r\n    const data = Object.assign({}, d, {\r\n      series: seriesName,\r\n      value,\r\n      name: label\r\n    });\r\n\r\n    return {\r\n      classNames: [`circle-data-${i}`],\r\n      value,\r\n      label,\r\n      data,\r\n      cx,\r\n      cy,\r\n      radius,\r\n      height,\r\n      tooltipLabel,\r\n      color,\r\n      opacity,\r\n      seriesName,\r\n      gradientStops: this.getGradientStops(color),\r\n      min: d.min,\r\n      max: d.max\r\n    };\r\n  }\r\n\r\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} â¢ ${escapeLabel(tooltipLabel)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\r\n    `;\r\n  }\r\n\r\n  getTooltipMinMaxText(min: any, max: any) {\r\n    if (min !== undefined || max !== undefined) {\r\n      let result = ' (';\r\n      if (min !== undefined) {\r\n        if (max === undefined) {\r\n          result += 'â¥';\r\n        }\r\n        result += min.toLocaleString();\r\n        if (max !== undefined) {\r\n          result += ' - ';\r\n        }\r\n      } else if (max !== undefined) {\r\n        result += 'â¤';\r\n      }\r\n      if (max !== undefined) {\r\n        result += max.toLocaleString();\r\n      }\r\n      result += ')';\r\n      return result;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  getGradientStops(color) {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color,\r\n        opacity: 0.2\r\n      },\r\n      {\r\n        offset: 100,\r\n        color,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  activateCircle(): void {\r\n    this.barVisible = true;\r\n    this.activate.emit({ name: this.data.name });\r\n  }\r\n\r\n  deactivateCircle(): void {\r\n    this.barVisible = false;\r\n    this.circle.opacity = 0;\r\n    this.deactivate.emit({ name: this.data.name });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  HostListener\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-circle]',\r\n  template: `\r\n    <svg:circle\r\n      [attr.cx]=\"cx\"\r\n      [attr.cy]=\"cy\"\r\n      [attr.r]=\"r\"\r\n      [attr.fill]=\"fill\"\r\n      [attr.stroke]=\"stroke\"\r\n      [attr.opacity]=\"circleOpacity\"\r\n      [attr.class]=\"classNames\"\r\n      [attr.pointer-events]=\"pointerEvents\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CircleComponent implements OnChanges {\r\n  @Input() cx;\r\n  @Input() cy;\r\n  @Input() r;\r\n  @Input() fill;\r\n  @Input() stroke;\r\n  @Input() data;\r\n  @Input() classNames;\r\n  @Input() circleOpacity;\r\n  @Input() pointerEvents;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\r\n    this.classNames += 'circle';\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-grid-panel]',\r\n  template: `\r\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GridPanelComponent {\r\n  @Input() path;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() x;\r\n  @Input() y;\r\n}\r\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-grid-panel-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-grid-panel\r\n      *ngFor=\"let gridPanel of gridPanels\"\r\n      [height]=\"gridPanel.height\"\r\n      [width]=\"gridPanel.width\"\r\n      [x]=\"gridPanel.x\"\r\n      [y]=\"gridPanel.y\"\r\n      [class.grid-panel]=\"true\"\r\n      [class.odd]=\"gridPanel.class === 'odd'\"\r\n      [class.even]=\"gridPanel.class === 'even'\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GridPanelSeriesComponent implements OnChanges {\r\n  gridPanels: any[];\r\n\r\n  @Input()\r\n  data;\r\n\r\n  @Input()\r\n  dims;\r\n\r\n  @Input()\r\n  xScale;\r\n\r\n  @Input()\r\n  yScale;\r\n\r\n  @Input()\r\n  orient;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.gridPanels = this.getGridPanels();\r\n  }\r\n\r\n  getGridPanels(): any[] {\r\n    return this.data.map(d => {\r\n      let offset;\r\n      let width;\r\n      let height;\r\n      let x;\r\n      let y;\r\n      let className = 'odd';\r\n\r\n      if (this.orient === 'vertical') {\r\n        const position: number = this.xScale(d.name);\r\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\r\n\r\n        if (positionIndex % 2 === 1) {\r\n          className = 'even';\r\n        }\r\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\r\n        width = this.xScale.bandwidth() + offset;\r\n        height = this.dims.height;\r\n        x = this.xScale(d.name) - offset / 2;\r\n        y = 0;\r\n      } else if (this.orient === 'horizontal') {\r\n        const position = this.yScale(d.name);\r\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\r\n\r\n        if (positionIndex % 2 === 1) {\r\n          className = 'even';\r\n        }\r\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\r\n\r\n        width = this.dims.width;\r\n        height = this.yScale.bandwidth() + offset;\r\n        x = 0;\r\n        y = this.yScale(d.name) - offset / 2;\r\n      }\r\n\r\n      return {\r\n        name: d.name,\r\n        class: className,\r\n        height,\r\n        width,\r\n        x,\r\n        y\r\n      };\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-svg-linear-gradient]',\r\n  template: `\r\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\r\n      <svg:stop\r\n        *ngFor=\"let stop of stops\"\r\n        [attr.offset]=\"stop.offset + '%'\"\r\n        [style.stop-color]=\"stop.color\"\r\n        [style.stop-opacity]=\"stop.opacity\"\r\n      />\r\n    </svg:linearGradient>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SvgLinearGradientComponent implements OnChanges {\r\n  @Input() orientation = 'vertical';\r\n  @Input() name;\r\n  @Input() stops: any[];\r\n\r\n  x1: any;\r\n  x2: any;\r\n  y1: any;\r\n  y2: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.x1 = '0%';\r\n    this.x2 = '0%';\r\n    this.y1 = '0%';\r\n    this.y2 = '0%';\r\n\r\n    if (this.orientation === 'horizontal') {\r\n      this.x2 = '100%';\r\n    } else if (this.orientation === 'vertical') {\r\n      this.y1 = '100%';\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-svg-radial-gradient]',\r\n  template: `\r\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\r\n      <svg:stop\r\n        *ngFor=\"let stop of stops\"\r\n        [attr.offset]=\"stop.offset + '%'\"\r\n        [style.stop-color]=\"stop.color\"\r\n        [style.stop-opacity]=\"stop.opacity\"\r\n      />\r\n    </svg:radialGradient>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SvgRadialGradientComponent implements OnChanges {\r\n  @Input() color: string;\r\n  @Input() name: string;\r\n  @Input() startOpacity: number;\r\n  @Input() endOpacity = 1;\r\n  @Input() cx: number = 0;\r\n  @Input() cy: number = 0;\r\n\r\n  @Input()\r\n  get stops(): any[] {\r\n    return this.stopsInput || this.stopsDefault;\r\n  }\r\n\r\n  set stops(value: any[]) {\r\n    this.stopsInput = value;\r\n  }\r\n\r\n  r: string;\r\n\r\n  private stopsInput: any[];\r\n  private stopsDefault: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.r = '30%';\r\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\r\n      this.stopsDefault = [\r\n        {\r\n          offset: 0,\r\n          color: this.color,\r\n          opacity: this.startOpacity\r\n        },\r\n        {\r\n          offset: 100,\r\n          color: this.color,\r\n          opacity: this.endOpacity\r\n        }\r\n      ];\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-area]',\r\n  template: `\r\n    <svg:defs *ngIf=\"gradient\">\r\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n    </svg:defs>\r\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AreaComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() path;\r\n  @Input() startingPath;\r\n  @Input() fill;\r\n  @Input() opacity = 1;\r\n  @Input() startOpacity = 0.5;\r\n  @Input() endOpacity = 1;\r\n  @Input() activeLabel;\r\n  @Input() gradient: boolean = false;\r\n  @Input() stops: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  gradientId: string;\r\n  gradientFill: string;\r\n  areaPath: string;\r\n  initialized: boolean = false;\r\n  gradientStops: any[];\r\n  hasGradient: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.initialized) {\r\n      this.loadAnimation();\r\n      this.initialized = true;\r\n    } else {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n\r\n    if (this.gradient || this.stops) {\r\n      this.gradientStops = this.getGradient();\r\n      this.hasGradient = true;\r\n    } else {\r\n      this.hasGradient = false;\r\n    }\r\n\r\n    this.updatePathEl();\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    this.areaPath = this.startingPath;\r\n    setTimeout(this.update.bind(this), 100);\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element).select('.area');\r\n\r\n    if (this.animations) {\r\n      node.transition().duration(750).attr('d', this.path);\r\n    } else {\r\n      node.attr('d', this.path);\r\n    }\r\n  }\r\n\r\n  getGradient() {\r\n    if (this.stops) {\r\n      return this.stops;\r\n    }\r\n\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.startOpacity\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: this.endOpacity\r\n      }\r\n    ];\r\n  }\r\n}\r\n","// Robert Penner's easeOutExpo\r\nfunction easeOutExpo(t, b, c, d) {\r\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\r\n}\r\n\r\n/**\r\n * Counts from a number to the end incrementally.\r\n */\r\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\r\n  const startVal = Number(countFrom);\r\n  const endVal = Number(countTo);\r\n  const countDown = startVal > endVal;\r\n  const decimals = Math.max(0, countDecimals);\r\n  const dec = Math.pow(10, decimals);\r\n  const duration = Number(countDuration) * 1000;\r\n  let startTime;\r\n\r\n  function runCount(timestamp) {\r\n    let frameVal;\r\n    const progress = timestamp - startTime;\r\n\r\n    if (countDown) {\r\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\r\n    } else {\r\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\r\n    }\r\n\r\n    if (countDown) {\r\n      frameVal = frameVal < endVal ? endVal : frameVal;\r\n    } else {\r\n      frameVal = frameVal > endVal ? endVal : frameVal;\r\n    }\r\n\r\n    frameVal = Math.round(frameVal * dec) / dec;\r\n\r\n    const tick = progress < duration;\r\n    callback({\r\n      value: frameVal,\r\n      progress,\r\n      timestamp,\r\n      finished: !tick\r\n    });\r\n\r\n    if (tick) {\r\n      return requestAnimationFrame(val => runCount(val));\r\n    }\r\n  }\r\n\r\n  return requestAnimationFrame(timestamp => {\r\n    startTime = timestamp;\r\n    return runCount(timestamp);\r\n  });\r\n}\r\n\r\n/**\r\n * Determine decimals places\r\n *\r\n * @export\r\n */\r\nexport function decimalChecker(countTo) {\r\n  const endVal = Number(countTo);\r\n\r\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\r\n    return 2;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","declare let global: any;\r\n\r\n// If we don't check whether 'window' and 'global' variables are defined,\r\n// code will fail in browser/node with 'variable is undefined' error.\r\nlet root: any;\r\nif (typeof window !== 'undefined') {\r\n  root = window;\r\n} else if (typeof global !== 'undefined') {\r\n  root = global;\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\r\n  prototype?: MouseEvent;\r\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\r\n};\r\n\r\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\r\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\r\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\r\n  if (typeof MouseEvent === 'function') {\r\n    // Sane browsers\r\n    return new MouseEvent(name, { bubbles, cancelable });\r\n  } else {\r\n    // IE\r\n    const event = document.createEvent('MouseEvent');\r\n    event.initEvent(name, bubbles, cancelable);\r\n    return event;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\r\nimport { count, decimalChecker } from './count.helper';\r\n\r\n/**\r\n * Count up component\r\n *\r\n * Loosely inspired by:\r\n *  - https://github.com/izupet/angular2-counto\r\n *  - https://inorganik.github.io/countUp.js/\r\n *\r\n * @export\r\n */\r\n@Component({\r\n  selector: '[ngx-charts-count-up]',\r\n  template: ` {{ value }} `\r\n})\r\nexport class CountUpDirective implements OnDestroy {\r\n  @Input() countDuration: number = 1;\r\n  @Input() countPrefix: string = '';\r\n  @Input() countSuffix: string = '';\r\n  @Input() valueFormatting: any;\r\n\r\n  @Input()\r\n  set countDecimals(val: number) {\r\n    this._countDecimals = val;\r\n  }\r\n\r\n  get countDecimals(): number {\r\n    if (this._countDecimals) return this._countDecimals;\r\n    return decimalChecker(this.countTo);\r\n  }\r\n\r\n  @Input()\r\n  set countTo(val) {\r\n    this._countTo = parseFloat(val);\r\n    this.start();\r\n  }\r\n\r\n  get countTo(): any {\r\n    return this._countTo;\r\n  }\r\n\r\n  @Input()\r\n  set countFrom(val) {\r\n    this._countFrom = parseFloat(val);\r\n    this.start();\r\n  }\r\n\r\n  get countFrom(): any {\r\n    return this._countFrom;\r\n  }\r\n\r\n  @Output() countChange = new EventEmitter();\r\n  @Output() countFinish = new EventEmitter();\r\n\r\n  nativeElement: any;\r\n\r\n  value: any = '';\r\n  formattedValue: string;\r\n\r\n  private animationReq: any;\r\n\r\n  private _countDecimals: number = 0;\r\n  private _countTo: number = 0;\r\n  private _countFrom: number = 0;\r\n\r\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\r\n    this.nativeElement = element.nativeElement;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n  }\r\n\r\n  start(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n\r\n    const valueFormatting =\r\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\r\n\r\n    const callback = ({ value, progress, finished }) => {\r\n      this.value = valueFormatting(value);\r\n      this.cd.markForCheck();\r\n      if (!finished) this.countChange.emit({ value: this.value, progress });\r\n      if (finished) this.countFinish.emit({ value: this.value, progress });\r\n    };\r\n\r\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { createMouseEvent } from '../events';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tooltip-area]',\r\n  template: `\r\n    <svg:g>\r\n      <svg:rect\r\n        class=\"tooltip-area\"\r\n        [attr.x]=\"0\"\r\n        y=\"0\"\r\n        [attr.width]=\"dims.width\"\r\n        [attr.height]=\"dims.height\"\r\n        style=\"opacity: 0; cursor: 'auto';\"\r\n        (mousemove)=\"mouseMove($event)\"\r\n        (mouseleave)=\"hideTooltip()\"\r\n      />\r\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\r\n        <xhtml:div class=\"area-tooltip-container\">\r\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\r\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\r\n            {{ getToolTipText(tooltipItem) }}\r\n          </xhtml:div>\r\n        </xhtml:div>\r\n      </ng-template>\r\n      <svg:rect\r\n        #tooltipAnchor\r\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\r\n        class=\"tooltip-anchor\"\r\n        [attr.x]=\"anchorPos\"\r\n        y=\"0\"\r\n        [attr.width]=\"1\"\r\n        [attr.height]=\"dims.height\"\r\n        [style.opacity]=\"anchorOpacity\"\r\n        [style.pointer-events]=\"'none'\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'right'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipSpacing]=\"15\"\r\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\r\n        [tooltipContext]=\"anchorValues\"\r\n        [tooltipImmediateExit]=\"true\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition('inactive => active', [\r\n        style({\r\n          opacity: 0\r\n        }),\r\n        animate(250, style({ opacity: 0.7 }))\r\n      ]),\r\n      transition('active => inactive', [\r\n        style({\r\n          opacity: 0.7\r\n        }),\r\n        animate(250, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class TooltipArea {\r\n  anchorOpacity: number = 0;\r\n  anchorPos: number = -1;\r\n  anchorValues: any[] = [];\r\n  lastAnchorPos: number;\r\n\r\n  @Input() dims;\r\n  @Input() xSet;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() results;\r\n  @Input() colors;\r\n  @Input() showPercentage: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() hover = new EventEmitter();\r\n\r\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\r\n\r\n  getValues(xVal): any[] {\r\n    const results = [];\r\n\r\n    for (const group of this.results) {\r\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\r\n      let groupName = group.name;\r\n      if (groupName instanceof Date) {\r\n        groupName = groupName.toLocaleDateString();\r\n      }\r\n\r\n      if (item) {\r\n        const label = item.name;\r\n        let val = item.value;\r\n        if (this.showPercentage) {\r\n          val = (item.d1 - item.d0).toFixed(2) + '%';\r\n        }\r\n        let color;\r\n        if (this.colors.scaleType === 'linear') {\r\n          let v = val;\r\n          if (item.d1) {\r\n            v = item.d1;\r\n          }\r\n          color = this.colors.getColor(v);\r\n        } else {\r\n          color = this.colors.getColor(group.name);\r\n        }\r\n\r\n        const data = Object.assign({}, item, {\r\n          value: val,\r\n          name: label,\r\n          series: groupName,\r\n          min: item.min,\r\n          max: item.max,\r\n          color\r\n        });\r\n\r\n        results.push(data);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  mouseMove(event) {\r\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\r\n\r\n    const closestIndex = this.findClosestPointIndex(xPos);\r\n    const closestPoint = this.xSet[closestIndex];\r\n    this.anchorPos = this.xScale(closestPoint);\r\n    this.anchorPos = Math.max(0, this.anchorPos);\r\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\r\n\r\n    this.anchorValues = this.getValues(closestPoint);\r\n    if (this.anchorPos !== this.lastAnchorPos) {\r\n      const ev = createMouseEvent('mouseleave');\r\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\r\n      this.anchorOpacity = 0.7;\r\n      this.hover.emit({\r\n        value: closestPoint\r\n      });\r\n      this.showTooltip();\r\n\r\n      this.lastAnchorPos = this.anchorPos;\r\n    }\r\n  }\r\n\r\n  findClosestPointIndex(xPos) {\r\n    let minIndex = 0;\r\n    let maxIndex = this.xSet.length - 1;\r\n    let minDiff = Number.MAX_VALUE;\r\n    let closestIndex = 0;\r\n\r\n    while (minIndex <= maxIndex) {\r\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\r\n      const currentElement = this.xScale(this.xSet[currentIndex]);\r\n\r\n      const curDiff = Math.abs(currentElement - xPos);\r\n\r\n      if (curDiff < minDiff) {\r\n        minDiff = curDiff;\r\n        closestIndex = currentIndex;\r\n      }\r\n\r\n      if (currentElement < xPos) {\r\n        minIndex = currentIndex + 1;\r\n      } else if (currentElement > xPos) {\r\n        maxIndex = currentIndex - 1;\r\n      } else {\r\n        minDiff = 0;\r\n        closestIndex = currentIndex;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return closestIndex;\r\n  }\r\n\r\n  showTooltip(): void {\r\n    const event = createMouseEvent('mouseenter');\r\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\r\n  }\r\n\r\n  hideTooltip(): void {\r\n    const event = createMouseEvent('mouseleave');\r\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\r\n    this.anchorOpacity = 0;\r\n    this.lastAnchorPos = -1;\r\n  }\r\n\r\n  getToolTipText(tooltipItem: any): string {\r\n    let result: string = '';\r\n    if (tooltipItem.series !== undefined) {\r\n      result += tooltipItem.series;\r\n    } else {\r\n      result += '???';\r\n    }\r\n    result += ': ';\r\n    if (tooltipItem.value !== undefined) {\r\n      result += tooltipItem.value.toLocaleString();\r\n    }\r\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\r\n      result += ' (';\r\n      if (tooltipItem.min !== undefined) {\r\n        if (tooltipItem.max === undefined) {\r\n          result += 'â¥';\r\n        }\r\n        result += tooltipItem.min.toLocaleString();\r\n        if (tooltipItem.max !== undefined) {\r\n          result += ' - ';\r\n        }\r\n      } else if (tooltipItem.max !== undefined) {\r\n        result += 'â¤';\r\n      }\r\n      if (tooltipItem.max !== undefined) {\r\n        result += tooltipItem.max.toLocaleString();\r\n      }\r\n      result += ')';\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { brushX } from 'd3-brush';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { select, event as d3event } from 'd3-selection';\r\nimport { id } from '../..//utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-timeline]',\r\n  template: `\r\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\r\n      <svg:filter [attr.id]=\"filterId\">\r\n        <svg:feColorMatrix\r\n          in=\"SourceGraphic\"\r\n          type=\"matrix\"\r\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\r\n        />\r\n      </svg:filter>\r\n      <svg:g class=\"embedded-chart\">\r\n        <ng-content></ng-content>\r\n      </svg:g>\r\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\r\n      <svg:g class=\"brush\"></svg:g>\r\n    </svg:g>\r\n  `,\r\n  styleUrls: ['./timeline.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class Timeline implements OnChanges {\r\n  @Input() view;\r\n  @Input() state;\r\n  @Input() results;\r\n  @Input() scheme;\r\n  @Input() customColors;\r\n  @Input() legend;\r\n  @Input() miniChart;\r\n  @Input() autoScale;\r\n  @Input() scaleType;\r\n  @Input() height: number = 50;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() onDomainChange = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  dims: any;\r\n  xDomain: any[];\r\n  xScale: any;\r\n  brush: any;\r\n  transform: string;\r\n  initialized: boolean = false;\r\n  filterId: any;\r\n  filter: any;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n\r\n    if (!this.initialized) {\r\n      this.addBrush();\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    this.dims = this.getDims();\r\n    this.height = this.dims.height;\r\n    const offsetY = this.view[1] - this.height;\r\n\r\n    this.xDomain = this.getXDomain();\r\n    this.xScale = this.getXScale();\r\n\r\n    if (this.brush) {\r\n      this.updateBrush();\r\n    }\r\n\r\n    this.transform = `translate(0 , ${offsetY})`;\r\n\r\n    this.filterId = 'filter' + id().toString();\r\n    this.filter = `url(#${this.filterId})`;\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.name)) {\r\n          values.push(d.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    let domain = [];\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n    } else {\r\n      domain = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getXScale() {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\r\n    }\r\n\r\n    return scale;\r\n  }\r\n\r\n  addBrush(): void {\r\n    if (this.brush) return;\r\n\r\n    const height = this.height;\r\n    const width = this.view[0];\r\n\r\n    this.brush = brushX()\r\n      .extent([\r\n        [0, 0],\r\n        [width, height]\r\n      ])\r\n      .on('brush end', () => {\r\n        const selection = d3event.selection || this.xScale.range();\r\n        const newDomain = selection.map(this.xScale.invert);\r\n\r\n        this.onDomainChange.emit(newDomain);\r\n        this.cd.markForCheck();\r\n      });\r\n\r\n    select(this.element).select('.brush').call(this.brush);\r\n  }\r\n\r\n  updateBrush(): void {\r\n    if (!this.brush) return;\r\n\r\n    const height = this.height;\r\n    const width = this.view[0];\r\n\r\n    this.brush.extent([\r\n      [0, 0],\r\n      [width, height]\r\n    ]);\r\n    select(this.element).select('.brush').call(this.brush);\r\n\r\n    // clear hardcoded properties so they can be defined by CSS\r\n    select(this.element)\r\n      .select('.selection')\r\n      .attr('fill', undefined)\r\n      .attr('stroke', undefined)\r\n      .attr('fill-opacity', undefined);\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getDims(): any {\r\n    const width = this.view[0];\r\n\r\n    const dims = {\r\n      width,\r\n      height: this.height\r\n    };\r\n\r\n    return dims;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectorRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { formatLabel } from '../label.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-legend',\r\n  template: `\r\n    <div [style.width.px]=\"width\">\r\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\r\n        <span class=\"legend-title-text\">{{ title }}</span>\r\n      </header>\r\n      <div class=\"legend-wrap\">\r\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\r\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\r\n            <ngx-charts-legend-entry\r\n              [label]=\"entry.label\"\r\n              [formattedLabel]=\"entry.formattedLabel\"\r\n              [color]=\"entry.color\"\r\n              [isActive]=\"isActive(entry)\"\r\n              (select)=\"labelClick.emit($event)\"\r\n              (activate)=\"activate($event)\"\r\n              (deactivate)=\"deactivate($event)\"\r\n            >\r\n            </ngx-charts-legend-entry>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LegendComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() title;\r\n  @Input() colors;\r\n  @Input() height;\r\n  @Input() width;\r\n  @Input() activeEntries;\r\n  @Input() horizontal = false;\r\n\r\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  legendEntries: any[] = [];\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.cd.markForCheck();\r\n    this.legendEntries = this.getLegendEntries();\r\n  }\r\n\r\n  getLegendEntries(): any[] {\r\n    const items = [];\r\n\r\n    for (const label of this.data) {\r\n      const formattedLabel = formatLabel(label);\r\n\r\n      const idx = items.findIndex(i => {\r\n        return i.label === formattedLabel;\r\n      });\r\n\r\n      if (idx === -1) {\r\n        items.push({\r\n          label,\r\n          formattedLabel,\r\n          color: this.colors.getColor(label)\r\n        });\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.label === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  activate(item) {\r\n    this.labelActivate.emit(item);\r\n  }\r\n\r\n  deactivate(item) {\r\n    this.labelDeactivate.emit(item);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.label;\r\n  }\r\n}\r\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-legend-entry',\r\n  template: `\r\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\r\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\r\n      <span class=\"legend-label-text\">\r\n        {{ trimmedLabel }}\r\n      </span>\r\n    </span>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LegendEntryComponent {\r\n  @Input() color: string;\r\n  @Input() label: any;\r\n  @Input() formattedLabel: string;\r\n  @Input() isActive: boolean = false;\r\n\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  get trimmedLabel(): string {\r\n    return this.formattedLabel || '(empty)';\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit({ name: this.label });\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit({ name: this.label });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-scale-legend',\r\n  template: `\r\n    <div\r\n      class=\"scale-legend\"\r\n      [class.horizontal-legend]=\"horizontal\"\r\n      [style.height.px]=\"horizontal ? undefined : height\"\r\n      [style.width.px]=\"width\"\r\n    >\r\n      <div class=\"scale-legend-label\">\r\n        <span>{{ valueRange[1].toLocaleString() }}</span>\r\n      </div>\r\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\r\n      <div class=\"scale-legend-label\">\r\n        <span>{{ valueRange[0].toLocaleString() }}</span>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./scale-legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScaleLegendComponent implements OnChanges {\r\n  @Input() valueRange;\r\n  @Input() colors;\r\n  @Input() height;\r\n  @Input() width;\r\n  @Input() horizontal = false;\r\n\r\n  gradient: any;\r\n\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\r\n    const direction = this.horizontal ? 'right' : 'bottom';\r\n    this.gradient = this.sanitizer.bypassSecurityTrustStyle(`linear-gradient(to ${direction}, ${gradientValues})`);\r\n  }\r\n\r\n  /**\r\n   * Generates the string used in the gradient stylesheet properties\r\n   * @param colors array of colors\r\n   * @param splits array of splits on a scale of (0, 1)\r\n   */\r\n  gradientString(colors, splits): string {\r\n    // add the 100%\r\n    splits.push(1);\r\n    const pairs = [];\r\n    colors.reverse().forEach((c, i) => {\r\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\r\n    });\r\n\r\n    return pairs.join(', ');\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { formatLabel } from '../label.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-advanced-legend',\r\n  template: `\r\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\r\n      <div\r\n        *ngIf=\"animations\"\r\n        class=\"total-value\"\r\n        ngx-charts-count-up\r\n        [countTo]=\"roundedTotal\"\r\n        [valueFormatting]=\"valueFormatting\"\r\n      ></div>\r\n      <div class=\"total-value\" *ngIf=\"!animations\">\r\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\r\n      </div>\r\n      <div class=\"total-label\">\r\n        {{ label }}\r\n      </div>\r\n      <div class=\"legend-items-container\">\r\n        <div class=\"legend-items\">\r\n          <div\r\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\r\n            tabindex=\"-1\"\r\n            class=\"legend-item\"\r\n            (mouseenter)=\"activate.emit(legendItem.data)\"\r\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\r\n            (click)=\"select.emit(legendItem.data)\"\r\n          >\r\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\r\n            <div\r\n              *ngIf=\"animations\"\r\n              class=\"item-value\"\r\n              ngx-charts-count-up\r\n              [countTo]=\"legendItem._value\"\r\n              [valueFormatting]=\"valueFormatting\"\r\n            ></div>\r\n            <div *ngIf=\"!animations\" class=\"item-value\">\r\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\r\n            </div>\r\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\r\n            <div\r\n              *ngIf=\"animations\"\r\n              class=\"item-percent\"\r\n              ngx-charts-count-up\r\n              [countTo]=\"legendItem.percentage\"\r\n              [countSuffix]=\"'%'\"\r\n            ></div>\r\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./advanced-legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AdvancedLegendComponent implements OnChanges {\r\n  @Input() width: number;\r\n  @Input() data;\r\n  @Input() colors;\r\n  @Input() label: string = 'Total';\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  legendItems: any[] = [];\r\n  total: number;\r\n  roundedTotal: number;\r\n\r\n  @Input() valueFormatting: (value: number) => any;\r\n  @Input() labelFormatting: (value: string) => any = label => label;\r\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\r\n\r\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getTotal(): number {\r\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n  }\r\n\r\n  update(): void {\r\n    this.total = this.getTotal();\r\n    this.roundedTotal = this.total;\r\n\r\n    this.legendItems = this.getLegendItems();\r\n  }\r\n\r\n  getLegendItems(): any {\r\n    return this.data.map(d => {\r\n      const label = formatLabel(d.name);\r\n      const value = d.value;\r\n      const color = this.colors.getColor(label);\r\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\r\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\r\n\r\n      return {\r\n        _value: value,\r\n        data: d,\r\n        value,\r\n        color,\r\n        label: formattedLabel,\r\n        displayLabel: trimLabel(formattedLabel, 20),\r\n        origialLabel: d.name,\r\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\r\n      };\r\n    });\r\n  }\r\n\r\n  trackBy(item) {\r\n    return item.formattedLabel;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ChartComponent } from './charts/chart.component';\r\nimport { BaseChartComponent } from './base-chart.component';\r\nimport { AxesModule } from './axes/axes.module';\r\nimport { TooltipModule } from './tooltip/tooltip.module';\r\nimport { CircleSeriesComponent } from './circle-series.component';\r\nimport { CircleComponent } from './circle.component';\r\nimport { GridPanelComponent } from './grid-panel.component';\r\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\r\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\r\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\r\nimport { AreaComponent } from './area.component';\r\nimport { CountUpDirective } from './count/count.directive';\r\nimport { TooltipArea } from './tooltip-area.component';\r\nimport { Timeline } from './timeline/timeline.component';\r\nimport { VisibilityObserver } from '../utils/visibility-observer';\r\nimport { LegendComponent } from './legend/legend.component';\r\nimport { LegendEntryComponent } from './legend/legend-entry.component';\r\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\r\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\r\n\r\nconst COMPONENTS = [\r\n  AreaComponent,\r\n  BaseChartComponent,\r\n  CountUpDirective,\r\n  TooltipArea,\r\n  ChartComponent,\r\n  LegendComponent,\r\n  LegendEntryComponent,\r\n  ScaleLegendComponent,\r\n  CircleComponent,\r\n  CircleSeriesComponent,\r\n  GridPanelComponent,\r\n  GridPanelSeriesComponent,\r\n  SvgLinearGradientComponent,\r\n  SvgRadialGradientComponent,\r\n  Timeline,\r\n  AdvancedLegendComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule, AxesModule, TooltipModule],\r\n  declarations: [...COMPONENTS, VisibilityObserver],\r\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\r\n})\r\nexport class ChartCommonModule {}\r\n","export interface ViewDimensions {\r\n  width: number;\r\n  height: number;\r\n  xOffset: number;\r\n}\r\n\r\nexport function calculateViewDimensions({\r\n  width,\r\n  height,\r\n  margins,\r\n  showXAxis = false,\r\n  showYAxis = false,\r\n  xAxisHeight = 0,\r\n  yAxisWidth = 0,\r\n  showXLabel = false,\r\n  showYLabel = false,\r\n  showLegend = false,\r\n  legendType = 'ordinal',\r\n  legendPosition = 'right',\r\n  columns = 12\r\n}): ViewDimensions {\r\n  let xOffset = margins[3];\r\n  let chartWidth = width;\r\n  let chartHeight = height - margins[0] - margins[2];\r\n\r\n  if (showLegend && legendPosition === 'right') {\r\n    if (legendType === 'ordinal') {\r\n      columns -= 2;\r\n    } else {\r\n      columns -= 1;\r\n    }\r\n  }\r\n\r\n  chartWidth = (chartWidth * columns) / 12;\r\n\r\n  chartWidth = chartWidth - margins[1] - margins[3];\r\n\r\n  if (showXAxis) {\r\n    chartHeight -= 5;\r\n    chartHeight -= xAxisHeight;\r\n\r\n    if (showXLabel) {\r\n      // text height + spacing between axis label and tick labels\r\n      const offset = 25 + 5;\r\n      chartHeight -= offset;\r\n    }\r\n  }\r\n\r\n  if (showYAxis) {\r\n    chartWidth -= 5;\r\n    chartWidth -= yAxisWidth;\r\n    xOffset += yAxisWidth;\r\n    xOffset += 10;\r\n\r\n    if (showYLabel) {\r\n      // text height + spacing between axis label and tick labels\r\n      const offset = 25 + 5;\r\n      chartWidth -= offset;\r\n      xOffset += offset;\r\n    }\r\n  }\r\n\r\n  chartWidth = Math.max(0, chartWidth);\r\n  chartHeight = Math.max(0, chartHeight);\r\n\r\n  return {\r\n    width: Math.floor(chartWidth),\r\n    height: Math.floor(chartHeight),\r\n    xOffset: Math.floor(xOffset)\r\n  };\r\n}\r\n","export let colorSets = [\r\n  {\r\n    name: 'vivid',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#647c8a',\r\n      '#3f51b5',\r\n      '#2196f3',\r\n      '#00b862',\r\n      '#afdf0a',\r\n      '#a7b61a',\r\n      '#f3e562',\r\n      '#ff9800',\r\n      '#ff5722',\r\n      '#ff4514'\r\n    ]\r\n  },\r\n  {\r\n    name: 'natural',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#bf9d76',\r\n      '#e99450',\r\n      '#d89f59',\r\n      '#f2dfa7',\r\n      '#a5d7c6',\r\n      '#7794b1',\r\n      '#afafaf',\r\n      '#707160',\r\n      '#ba9383',\r\n      '#d9d5c3'\r\n    ]\r\n  },\r\n  {\r\n    name: 'cool',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#a8385d',\r\n      '#7aa3e5',\r\n      '#a27ea8',\r\n      '#aae3f5',\r\n      '#adcded',\r\n      '#a95963',\r\n      '#8796c0',\r\n      '#7ed3ed',\r\n      '#50abcc',\r\n      '#ad6886'\r\n    ]\r\n  },\r\n  {\r\n    name: 'fire',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\r\n  },\r\n  {\r\n    name: 'solar',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#fff8e1',\r\n      '#ffecb3',\r\n      '#ffe082',\r\n      '#ffd54f',\r\n      '#ffca28',\r\n      '#ffc107',\r\n      '#ffb300',\r\n      '#ffa000',\r\n      '#ff8f00',\r\n      '#ff6f00'\r\n    ]\r\n  },\r\n  {\r\n    name: 'air',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#e1f5fe',\r\n      '#b3e5fc',\r\n      '#81d4fa',\r\n      '#4fc3f7',\r\n      '#29b6f6',\r\n      '#03a9f4',\r\n      '#039be5',\r\n      '#0288d1',\r\n      '#0277bd',\r\n      '#01579b'\r\n    ]\r\n  },\r\n  {\r\n    name: 'aqua',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#e0f7fa',\r\n      '#b2ebf2',\r\n      '#80deea',\r\n      '#4dd0e1',\r\n      '#26c6da',\r\n      '#00bcd4',\r\n      '#00acc1',\r\n      '#0097a7',\r\n      '#00838f',\r\n      '#006064'\r\n    ]\r\n  },\r\n  {\r\n    name: 'flame',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#A10A28',\r\n      '#D3342D',\r\n      '#EF6D49',\r\n      '#FAAD67',\r\n      '#FDDE90',\r\n      '#DBED91',\r\n      '#A9D770',\r\n      '#6CBA67',\r\n      '#2C9653',\r\n      '#146738'\r\n    ]\r\n  },\r\n  {\r\n    name: 'ocean',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#1D68FB',\r\n      '#33C0FC',\r\n      '#4AFFFE',\r\n      '#AFFFFF',\r\n      '#FFFC63',\r\n      '#FDBD2D',\r\n      '#FC8A25',\r\n      '#FA4F1E',\r\n      '#FA141B',\r\n      '#BA38D1'\r\n    ]\r\n  },\r\n  {\r\n    name: 'forest',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#55C22D',\r\n      '#C1F33D',\r\n      '#3CC099',\r\n      '#AFFFFF',\r\n      '#8CFC9D',\r\n      '#76CFFA',\r\n      '#BA60FB',\r\n      '#EE6490',\r\n      '#C42A1C',\r\n      '#FC9F32'\r\n    ]\r\n  },\r\n  {\r\n    name: 'horizon',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#2597FB',\r\n      '#65EBFD',\r\n      '#99FDD0',\r\n      '#FCEE4B',\r\n      '#FEFCFA',\r\n      '#FDD6E3',\r\n      '#FCB1A8',\r\n      '#EF6F7B',\r\n      '#CB96E8',\r\n      '#EFDEE0'\r\n    ]\r\n  },\r\n  {\r\n    name: 'neons',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#FF3333',\r\n      '#FF33FF',\r\n      '#CC33FF',\r\n      '#0000FF',\r\n      '#33CCFF',\r\n      '#33FFFF',\r\n      '#33FF66',\r\n      '#CCFF33',\r\n      '#FFCC00',\r\n      '#FF6600'\r\n    ]\r\n  },\r\n  {\r\n    name: 'picnic',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#FAC51D',\r\n      '#66BD6D',\r\n      '#FAA026',\r\n      '#29BB9C',\r\n      '#E96B56',\r\n      '#55ACD2',\r\n      '#B7332F',\r\n      '#2C83C9',\r\n      '#9166B8',\r\n      '#92E7E8'\r\n    ]\r\n  },\r\n  {\r\n    name: 'night',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#2B1B5A',\r\n      '#501356',\r\n      '#183356',\r\n      '#28203F',\r\n      '#391B3C',\r\n      '#1E2B3C',\r\n      '#120634',\r\n      '#2D0432',\r\n      '#051932',\r\n      '#453080',\r\n      '#75267D',\r\n      '#2C507D',\r\n      '#4B3880',\r\n      '#752F7D',\r\n      '#35547D'\r\n    ]\r\n  },\r\n  {\r\n    name: 'nightLights',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#4e31a5',\r\n      '#9c25a7',\r\n      '#3065ab',\r\n      '#57468b',\r\n      '#904497',\r\n      '#46648b',\r\n      '#32118d',\r\n      '#a00fb3',\r\n      '#1052a2',\r\n      '#6e51bd',\r\n      '#b63cc3',\r\n      '#6c97cb',\r\n      '#8671c1',\r\n      '#b455be',\r\n      '#7496c3'\r\n    ]\r\n  }\r\n];\r\n","import { range } from 'd3-array';\r\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\r\n\r\nimport { colorSets } from '../utils/color-sets';\r\n\r\nexport class ColorHelper {\r\n  scale: any;\r\n  scaleType: any;\r\n  colorDomain: any[];\r\n  domain: any;\r\n  customColors: any;\r\n\r\n  constructor(scheme, type, domain, customColors?) {\r\n    if (typeof scheme === 'string') {\r\n      scheme = colorSets.find(cs => {\r\n        return cs.name === scheme;\r\n      });\r\n    }\r\n    this.colorDomain = scheme.domain;\r\n    this.scaleType = type;\r\n    this.domain = domain;\r\n    this.customColors = customColors;\r\n\r\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\r\n  }\r\n\r\n  generateColorScheme(scheme, type, domain) {\r\n    if (typeof scheme === 'string') {\r\n      scheme = colorSets.find(cs => {\r\n        return cs.name === scheme;\r\n      });\r\n    }\r\n    let colorScale;\r\n    if (type === 'quantile') {\r\n      colorScale = scaleQuantile().range(scheme.domain).domain(domain);\r\n    } else if (type === 'ordinal') {\r\n      colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\r\n    } else if (type === 'linear') {\r\n      // linear schemes must have at least 2 colors\r\n      const colorDomain = [...scheme.domain];\r\n      if (colorDomain.length === 1) {\r\n        colorDomain.push(colorDomain[0]);\r\n        this.colorDomain = colorDomain;\r\n      }\r\n\r\n      const points = range(0, 1, 1.0 / colorDomain.length);\r\n      colorScale = scaleLinear().domain(points).range(colorDomain);\r\n    }\r\n\r\n    return colorScale;\r\n  }\r\n\r\n  getColor(value) {\r\n    if (value === undefined || value === null) {\r\n      throw new Error('Value can not be null');\r\n    }\r\n    if (this.scaleType === 'linear') {\r\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\r\n\r\n      return this.scale(valueScale(value));\r\n    } else {\r\n      if (typeof this.customColors === 'function') {\r\n        return this.customColors(value);\r\n      }\r\n\r\n      const formattedValue = value.toString();\r\n      let found: any; // todo type customColors\r\n      if (this.customColors && this.customColors.length > 0) {\r\n        found = this.customColors.find(mapping => {\r\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\r\n        });\r\n      }\r\n\r\n      if (found) {\r\n        return found.value;\r\n      } else {\r\n        return this.scale(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  getLinearGradientStops(value, start) {\r\n    if (start === undefined) {\r\n      start = this.domain[0];\r\n    }\r\n\r\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\r\n\r\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\r\n\r\n    const endColor = this.getColor(value);\r\n\r\n    // generate the stops\r\n    const startVal = valueScale(start);\r\n    const startColor = this.getColor(start);\r\n\r\n    const endVal = valueScale(value);\r\n    let i = 1;\r\n    let currentVal = startVal;\r\n    const stops = [];\r\n\r\n    stops.push({\r\n      color: startColor,\r\n      offset: startVal,\r\n      originalOffset: startVal,\r\n      opacity: 1\r\n    });\r\n\r\n    while (currentVal < endVal && i < this.colorDomain.length) {\r\n      const color = this.colorDomain[i];\r\n      const offset = colorValueScale(color);\r\n      if (offset <= startVal) {\r\n        i++;\r\n        continue;\r\n      }\r\n\r\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\r\n        break;\r\n      }\r\n\r\n      stops.push({\r\n        color,\r\n        offset,\r\n        opacity: 1\r\n      });\r\n      currentVal = offset;\r\n      i++;\r\n    }\r\n\r\n    if (stops[stops.length - 1].offset < 100) {\r\n      stops.push({\r\n        color: endColor,\r\n        offset: endVal,\r\n        opacity: 1\r\n      });\r\n    }\r\n\r\n    if (endVal === startVal) {\r\n      stops[0].offset = 0;\r\n      stops[1].offset = 100;\r\n    } else {\r\n      // normalize the offsets into percentages\r\n      if (stops[stops.length - 1].offset !== 100) {\r\n        for (const s of stops) {\r\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\r\n        }\r\n      }\r\n    }\r\n\r\n    return stops;\r\n  }\r\n}\r\n","/**\r\n * Based on the data, return an array with unique values.\r\n *\r\n * @export\r\n * @returns array\r\n */\r\nexport function getUniqueXDomainValues(results: any[]): any[] {\r\n  const valueSet = new Set();\r\n  for (const result of results) {\r\n    for (const d of result.series) {\r\n      valueSet.add(d.name);\r\n    }\r\n  }\r\n  return Array.from(valueSet);\r\n}\r\n\r\n/**\r\n * Get the scaleType of enumerable of values.\r\n * @returns  'time', 'linear' or 'ordinal'\r\n */\r\nexport function getScaleType(values: any[], checkDateType = true): string {\r\n  if (checkDateType) {\r\n    const allDates = values.every(value => value instanceof Date);\r\n    if (allDates) {\r\n      return 'time';\r\n    }\r\n  }\r\n\r\n  const allNumbers = values.every(value => typeof value === 'number');\r\n  if (allNumbers) {\r\n    return 'linear';\r\n  }\r\n\r\n  return 'ordinal';\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [baseValue]=\"baseValue\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [gradient]=\"gradient\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [baseValue]=\"baseValue\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() state;\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() baseValue: any = 'auto';\r\n  @Input() autoScale;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xSet: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  scaleType: string;\r\n  series: any;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const values = [...domain];\r\n    if (!this.autoScale) {\r\n      values.push(0);\r\n    }\r\n    if (this.baseValue !== 'auto') {\r\n      values.push(this.baseValue);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getScaleType(values): string {\r\n    let date = true;\r\n    let num = true;\r\n    for (const value of values) {\r\n      if (!this.isDate(value)) {\r\n        date = false;\r\n      }\r\n      if (typeof value !== 'number') {\r\n        num = false;\r\n      }\r\n    }\r\n\r\n    if (date) {\r\n      return 'time';\r\n    }\r\n\r\n    if (num) {\r\n      return 'linear';\r\n    }\r\n\r\n    return 'ordinal';\r\n  }\r\n\r\n  isDate(value): boolean {\r\n    if (value instanceof Date) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [scaleType]=\"scaleType\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [gradient]=\"gradient\"\r\n              normalized=\"true\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [showPercentage]=\"true\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                type=\"stacked\"\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            normalized=\"true\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  scaleType: string;\r\n  xDomain: any[];\r\n  xSet: any[]; // the set of all values on the X Axis\r\n  yDomain: any[];\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  tooltipAreas: any[];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let d0 = 0;\r\n\r\n      let total = 0;\r\n      for (const group of this.results) {\r\n        const d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n        if (d) {\r\n          total += d.value;\r\n        }\r\n      }\r\n\r\n      for (const group of this.results) {\r\n        let d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          d.d0 = d0;\r\n          d.d1 = d0 + d.value;\r\n          d0 += d.value;\r\n        } else {\r\n          d = {\r\n            name: val,\r\n            value: 0,\r\n            d0,\r\n            d1: d0\r\n          };\r\n          group.series.push(d);\r\n        }\r\n\r\n        if (total > 0) {\r\n          d.d0 = (d.d0 * 100) / total;\r\n          d.d1 = (d.d1 * 100) / total;\r\n        } else {\r\n          d.d0 = 0;\r\n          d.d1 = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    return [0, 100];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [scaleType]=\"scaleType\"\r\n              [gradient]=\"gradient\"\r\n              [activeEntries]=\"activeEntries\"\r\n              stacked=\"true\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                type=\"stacked\"\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            stacked=\"true\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  scaleType: string;\r\n  xDomain: any[];\r\n  xSet: any[]; // the set of all values on the X Axis\r\n  yDomain: any[];\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let d0 = 0;\r\n      for (const group of this.results) {\r\n        let d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          d.d0 = d0;\r\n          d.d1 = d0 + d.value;\r\n          d0 += d.value;\r\n        } else {\r\n          d = {\r\n            name: val,\r\n            value: 0,\r\n            d0,\r\n            d1: d0\r\n          };\r\n          group.series.push(d);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let sum = 0;\r\n      for (const group of this.results) {\r\n        const d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          sum += d.value;\r\n        }\r\n      }\r\n\r\n      domain.push(sum);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item) {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","export function sortLinear(data, property, direction = 'asc') {\r\n  return data.sort((a, b) => {\r\n    if (direction === 'asc') {\r\n      return a[property] - b[property];\r\n    } else {\r\n      return b[property] - a[property];\r\n    }\r\n  });\r\n}\r\n\r\nexport function sortByDomain(data, property, direction = 'asc', domain) {\r\n  return data.sort((a, b) => {\r\n    const aVal = a[property];\r\n    const bVal = b[property];\r\n\r\n    const aIdx = domain.indexOf(aVal);\r\n    const bIdx = domain.indexOf(bVal);\r\n\r\n    if (direction === 'asc') {\r\n      return aIdx - bIdx;\r\n    } else {\r\n      return bIdx - aIdx;\r\n    }\r\n  });\r\n}\r\n\r\nexport function sortByTime(data, property, direction = 'asc') {\r\n  return data.sort((a, b) => {\r\n    const aDate = a[property].getTime();\r\n    const bDate = b[property].getTime();\r\n\r\n    if (direction === 'asc') {\r\n      if (aDate > bDate) return 1;\r\n      if (bDate > aDate) return -1;\r\n      return 0;\r\n    } else {\r\n      if (aDate > bDate) return -1;\r\n      if (bDate > aDate) return 1;\r\n      return 0;\r\n    }\r\n  });\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { area } from 'd3-shape';\r\n\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-area-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-area\r\n      class=\"area-series\"\r\n      [data]=\"data\"\r\n      [path]=\"path\"\r\n      [fill]=\"colors.getColor(data.name)\"\r\n      [stops]=\"gradientStops\"\r\n      [startingPath]=\"startingPath\"\r\n      [opacity]=\"opacity\"\r\n      [gradient]=\"gradient || hasGradient\"\r\n      [animations]=\"animations\"\r\n      [class.active]=\"isActive(data)\"\r\n      [class.inactive]=\"isInactive(data)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AreaSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() baseValue: any = 'auto';\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() stacked: boolean = false;\r\n  @Input() normalized: boolean = false;\r\n  @Input() gradient;\r\n  @Input() curve;\r\n  @Input() activeEntries: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  opacity: number;\r\n  path: string;\r\n  startingPath: string;\r\n\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradient();\r\n\r\n    let currentArea;\r\n    let startingArea;\r\n\r\n    const xProperty = d => {\r\n      const label = d.name;\r\n      return this.xScale(label);\r\n    };\r\n\r\n    if (this.stacked || this.normalized) {\r\n      currentArea = area<any>()\r\n        .x(xProperty)\r\n        .y0((d, i) => this.yScale(d.d0))\r\n        .y1((d, i) => this.yScale(d.d1));\r\n\r\n      startingArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(d => this.yScale.range()[0])\r\n        .y1(d => this.yScale.range()[0]);\r\n    } else {\r\n      currentArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\r\n        .y1(d => this.yScale(d.value));\r\n\r\n      startingArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\r\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\r\n    }\r\n\r\n    currentArea.curve(this.curve);\r\n    startingArea.curve(this.curve);\r\n\r\n    this.opacity = 0.8;\r\n\r\n    let data = this.data.series;\r\n    if (this.scaleType === 'linear') {\r\n      data = sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      data = sortByTime(data, 'name');\r\n    } else {\r\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n    }\r\n\r\n    this.path = currentArea(data);\r\n    this.startingPath = startingArea(data);\r\n  }\r\n\r\n  updateGradient() {\r\n    if (this.colors.scaleType === 'linear') {\r\n      this.hasGradient = true;\r\n      if (this.stacked || this.normalized) {\r\n        const d0values = this.data.series.map(d => d.d0);\r\n        const d1values = this.data.series.map(d => d.d1);\r\n        const max = Math.max(...d1values);\r\n        const min = Math.min(...d0values);\r\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n      } else {\r\n        const values = this.data.series.map(d => d.value);\r\n        const max = Math.max(...values);\r\n        this.gradientStops = this.colors.getLinearGradientStops(max);\r\n      }\r\n    } else {\r\n      this.hasGradient = false;\r\n      this.gradientStops = undefined;\r\n    }\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AreaChartComponent } from './area-chart.component';\r\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\r\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\r\nimport { AreaSeriesComponent } from './area-series.component';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\r\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\r\n})\r\nexport class AreaChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\nimport { roundedRect } from '../common/shape.helper';\r\nimport { id } from '../utils/id';\r\n\r\n/* tslint:disable-next-line */\r\nimport { transition } from 'd3-transition';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bar]',\r\n  template: `\r\n    <svg:defs *ngIf=\"hasGradient\">\r\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n    </svg:defs>\r\n    <svg:path\r\n      class=\"bar\"\r\n      stroke=\"none\"\r\n      role=\"img\"\r\n      tabIndex=\"-1\"\r\n      [class.active]=\"isActive\"\r\n      [class.hidden]=\"hideBar\"\r\n      [attr.d]=\"path\"\r\n      [attr.aria-label]=\"ariaLabel\"\r\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\r\n      (click)=\"select.emit(data)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BarComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() data: any;\r\n  @Input() width: number;\r\n  @Input() height: number;\r\n  @Input() x: number;\r\n  @Input() y: number;\r\n  @Input() orientation;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() gradient: boolean = false;\r\n  @Input() offset = 0;\r\n  @Input() isActive: boolean = false;\r\n  @Input() stops: any[];\r\n  @Input() animations: boolean = true;\r\n  @Input() ariaLabel: string;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: any;\r\n  path: any;\r\n  gradientId: any;\r\n  gradientFill: any;\r\n  startOpacity: any;\r\n  gradientStops: any[];\r\n  hasGradient: boolean = false;\r\n  hideBar: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.roundEdges) {\r\n      this.loadAnimation();\r\n    }\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n\r\n    if (this.gradient || this.stops) {\r\n      this.gradientStops = this.getGradient();\r\n      this.hasGradient = true;\r\n    } else {\r\n      this.hasGradient = false;\r\n    }\r\n\r\n    this.updatePathEl();\r\n    this.checkToHideBar();\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    this.path = this.getStartingPath();\r\n    setTimeout(this.update.bind(this), 100);\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element).select('.bar');\r\n    const path = this.getPath();\r\n    if (this.animations) {\r\n      node.transition().duration(500).attr('d', path);\r\n    } else {\r\n      node.attr('d', path);\r\n    }\r\n  }\r\n\r\n  getGradient() {\r\n    if (this.stops) {\r\n      return this.stops;\r\n    }\r\n\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.getStartOpacity()\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  getStartingPath() {\r\n    if (!this.animations) {\r\n      return this.getPath();\r\n    }\r\n\r\n    let radius = this.getRadius();\r\n    let path;\r\n\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        radius = Math.min(this.height, radius);\r\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        radius = Math.min(this.width, radius);\r\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\r\n      }\r\n    } else {\r\n      if (this.orientation === 'vertical') {\r\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\r\n      }\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  getPath() {\r\n    let radius = this.getRadius();\r\n    let path;\r\n\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        radius = Math.min(this.height, radius);\r\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        radius = Math.min(this.width, radius);\r\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n      }\r\n    } else {\r\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  getRadius(): number {\r\n    let radius = 0;\r\n\r\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\r\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\r\n    }\r\n\r\n    return radius;\r\n  }\r\n\r\n  getStartOpacity(): number {\r\n    if (this.roundEdges) {\r\n      return 0.2;\r\n    } else {\r\n      return 0.5;\r\n    }\r\n  }\r\n\r\n  get edges() {\r\n    let edges = [false, false, false, false];\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        if (this.data.value > 0) {\r\n          edges = [true, true, false, false];\r\n        } else {\r\n          edges = [false, false, true, true];\r\n        }\r\n      } else if (this.orientation === 'horizontal') {\r\n        if (this.data.value > 0) {\r\n          edges = [false, true, false, true];\r\n        } else {\r\n          edges = [true, false, true, false];\r\n        }\r\n      }\r\n    }\r\n    return edges;\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n\r\n  private checkToHideBar() {\r\n    this.hideBar =\r\n      this.noBarWhenZero &&\r\n      ((this.orientation === 'vertical' && this.height === 0) ||\r\n        (this.orientation === 'horizontal' && this.width === 0));\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-horizontal\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"results\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\r\n        ></svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BarHorizontalComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() xScaleMax: number;\r\n  @Input() xScaleMin: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  yScale: any;\r\n  xScale: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getXScale(): any {\r\n    this.xDomain = this.getXDomain();\r\n\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(): any {\r\n    this.yDomain = this.getYDomain();\r\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    const values = this.results.map(d => d.value);\r\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\r\n\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\r\n    return [min, max];\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.yDomain;\r\n    } else {\r\n      domain = this.xDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.xDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (event.index === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-2d',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-grid-panel-series\r\n          [xScale]=\"valueScale\"\r\n          [yScale]=\"groupScale\"\r\n          [data]=\"results\"\r\n          [dims]=\"dims\"\r\n          orient=\"horizontal\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"valueScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"groupScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            [xScale]=\"valueScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [yScale]=\"innerScale\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [roundEdges]=\"roundEdges\"\r\n            [animations]=\"animations\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontal2DComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() groupPadding = 16;\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() xScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valuesDomain: any[];\r\n  groupScale: any;\r\n  innerScale: any;\r\n  valueScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valuesDomain = this.getValueDomain();\r\n\r\n    this.groupScale = this.getGroupScale();\r\n    this.innerScale = this.getInnerScale();\r\n    this.valueScale = this.getValueScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.height])\r\n      .paddingInner(spacing)\r\n      .paddingOuter(spacing / 2)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getInnerScale(): any {\r\n    const height = this.groupScale.bandwidth();\r\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\r\n  }\r\n\r\n  getValueScale(): any {\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valuesDomain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(0, ${this.groupScale(group.label)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valuesDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valuesDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            type=\"normalized\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    return [0, 100];\r\n  }\r\n\r\n  getYScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group): string {\r\n    return `translate(0, ${this.yScale(group.name)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            type=\"stacked\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() xScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n    let smallest = 0;\r\n    let biggest = 0;\r\n    for (const group of this.results) {\r\n      let smallestSum = 0;\r\n      let biggestSum = 0;\r\n      for (const d of group.series) {\r\n        if (d.value < 0) {\r\n          smallestSum += d.value;\r\n        } else {\r\n          biggestSum += d.value;\r\n        }\r\n        smallest = d.value < smallest ? d.value : smallest;\r\n        biggest = d.value > biggest ? d.value : biggest;\r\n      }\r\n      domain.push(smallestSum);\r\n      domain.push(biggestSum);\r\n    }\r\n    domain.push(smallest);\r\n    domain.push(biggest);\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getYScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group): string {\r\n    return `translate(0, ${this.yScale(group.name)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-vertical\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"results\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n          (select)=\"onClick($event)\"\r\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\r\n        ></svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BarVerticalComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() yScaleMax: number;\r\n  @Input() yScaleMin: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xScale: any;\r\n  yScale: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin: any[] = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  getXScale(): any {\r\n    this.xDomain = this.getXDomain();\r\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\r\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    this.yDomain = this.getYDomain();\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  getYDomain(): [number, number] {\r\n    const values = this.results.map(d => d.value);\r\n\r\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\r\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\r\n      min = Math.min(min, ...this.yAxisTicks);\r\n    }\r\n\r\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\r\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\r\n      max = Math.max(max, ...this.yAxisTicks);\r\n    }\r\n    return [min, max];\r\n  }\r\n\r\n  onClick(data: DataItem) {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.xDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.xDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (event.index === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-2d',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-grid-panel-series\r\n          [xScale]=\"groupScale\"\r\n          [yScale]=\"valueScale\"\r\n          [data]=\"results\"\r\n          [dims]=\"dims\"\r\n          orient=\"vertical\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"groupScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"valueScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-vertical\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [xScale]=\"innerScale\"\r\n          [yScale]=\"valueScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"group.series\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [seriesName]=\"group.name\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (select)=\"onClick($event, group)\"\r\n          (activate)=\"onActivate($event, group)\"\r\n          (deactivate)=\"onDeactivate($event, group)\"\r\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVertical2DComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() scaleType = 'ordinal';\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() groupPadding = 16;\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() yScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valuesDomain: any[];\r\n  groupScale: any;\r\n  innerScale: any;\r\n  valueScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valuesDomain = this.getValueDomain();\r\n\r\n    this.groupScale = this.getGroupScale();\r\n    this.innerScale = this.getInnerScale();\r\n    this.valueScale = this.getValueScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  getGroupScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.width])\r\n      .paddingInner(spacing)\r\n      .paddingOuter(spacing / 2)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getInnerScale(): any {\r\n    const width = this.groupScale.bandwidth();\r\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\r\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\r\n  }\r\n\r\n  getValueScale(): any {\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valuesDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.groupScale(group.label)}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valuesDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valuesDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-vertical\r\n            type=\"normalized\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    return [0, 100];\r\n  }\r\n\r\n  getXScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.xScale(group.name)}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\nexport enum D0Types {\r\n  positive = 'positive',\r\n  negative = 'negative'\r\n}\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-series-vertical]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-bar\r\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\r\n      [@animationState]=\"'active'\"\r\n      [@.disabled]=\"!animations\"\r\n      [width]=\"bar.width\"\r\n      [height]=\"bar.height\"\r\n      [x]=\"bar.x\"\r\n      [y]=\"bar.y\"\r\n      [fill]=\"bar.color\"\r\n      [stops]=\"bar.gradientStops\"\r\n      [data]=\"bar.data\"\r\n      [orientation]=\"'vertical'\"\r\n      [roundEdges]=\"bar.roundEdges\"\r\n      [gradient]=\"gradient\"\r\n      [ariaLabel]=\"bar.ariaLabel\"\r\n      [isActive]=\"isActive(bar.data)\"\r\n      (select)=\"onClick($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"tooltipPlacement\"\r\n      [tooltipType]=\"tooltipType\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"bar.data\"\r\n      [noBarWhenZero]=\"noBarWhenZero\"\r\n      [animations]=\"animations\"\r\n    ></svg:g>\r\n    <svg:g *ngIf=\"showDataLabel\">\r\n      <svg:g\r\n        ngx-charts-bar-label\r\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\r\n        [barX]=\"b.x\"\r\n        [barY]=\"b.y\"\r\n        [barWidth]=\"b.width\"\r\n        [barHeight]=\"b.height\"\r\n        [value]=\"b.total\"\r\n        [valueFormatting]=\"dataLabelFormatting\"\r\n        [orientation]=\"'vertical'\"\r\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(500, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class SeriesVerticalComponent implements OnChanges {\r\n  @Input() dims;\r\n  @Input() type = 'standard';\r\n  @Input() series;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() seriesName: string;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() roundEdges: boolean;\r\n  @Input() animations: boolean = true;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dataLabelHeightChanged = new EventEmitter();\r\n\r\n  tooltipPlacement: string;\r\n  tooltipType: string;\r\n\r\n  bars: any;\r\n  x: any;\r\n  y: any;\r\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\r\n\r\n  ngOnChanges(changes): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateTooltipSettings();\r\n    let width;\r\n    if (this.series.length) {\r\n      width = this.xScale.bandwidth();\r\n    }\r\n    width = Math.round(width);\r\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\r\n\r\n    const d0 = {\r\n      [D0Types.positive]: 0,\r\n      [D0Types.negative]: 0\r\n    };\r\n    let d0Type = D0Types.positive;\r\n\r\n    let total;\r\n    if (this.type === 'normalized') {\r\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n    }\r\n\r\n    this.bars = this.series.map((d, index) => {\r\n      let value = d.value;\r\n      const label = this.getLabel(d);\r\n      const formattedLabel = formatLabel(label);\r\n      const roundEdges = this.roundEdges;\r\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\r\n\r\n      const bar: any = {\r\n        value,\r\n        label,\r\n        roundEdges,\r\n        data: d,\r\n        width,\r\n        formattedLabel,\r\n        height: 0,\r\n        x: 0,\r\n        y: 0\r\n      };\r\n\r\n      if (this.type === 'standard') {\r\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\r\n        bar.x = this.xScale(label);\r\n\r\n        if (value < 0) {\r\n          bar.y = this.yScale(0);\r\n        } else {\r\n          bar.y = this.yScale(value);\r\n        }\r\n      } else if (this.type === 'stacked') {\r\n        const offset0 = d0[d0Type];\r\n        const offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\r\n        bar.x = 0;\r\n        bar.y = this.yScale(offset1);\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n      } else if (this.type === 'normalized') {\r\n        let offset0 = d0[d0Type];\r\n        let offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        if (total > 0) {\r\n          offset0 = (offset0 * 100) / total;\r\n          offset1 = (offset1 * 100) / total;\r\n        } else {\r\n          offset0 = 0;\r\n          offset1 = 0;\r\n        }\r\n\r\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\r\n        bar.x = 0;\r\n        bar.y = this.yScale(offset1);\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n        value = (offset1 - offset0).toFixed(2) + '%';\r\n      }\r\n\r\n      if (this.colors.scaleType === 'ordinal') {\r\n        bar.color = this.colors.getColor(label);\r\n      } else {\r\n        if (this.type === 'standard') {\r\n          bar.color = this.colors.getColor(value);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\r\n        } else {\r\n          bar.color = this.colors.getColor(bar.offset1);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\r\n        }\r\n      }\r\n\r\n      let tooltipLabel = formattedLabel;\r\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\r\n      if (this.seriesName) {\r\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\r\n        bar.data.series = this.seriesName;\r\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\r\n      }\r\n\r\n      bar.tooltipText = this.tooltipDisabled\r\n        ? undefined\r\n        : `\r\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\r\n        <span class=\"tooltip-val\">${\r\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\r\n        }</span>\r\n      `;\r\n\r\n      return bar;\r\n    });\r\n\r\n    this.updateDataLabels();\r\n  }\r\n\r\n  updateDataLabels() {\r\n    if (this.type === 'stacked') {\r\n      this.barsForDataLabels = [];\r\n      const section: any = {};\r\n      section.series = this.seriesName;\r\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\r\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\r\n      section.total = totalPositive + totalNegative;\r\n      section.x = 0;\r\n      section.y = 0;\r\n      if (section.total > 0) {\r\n        section.height = this.yScale(totalPositive);\r\n      } else {\r\n        section.height = this.yScale(totalNegative);\r\n      }\r\n      section.width = this.xScale.bandwidth();\r\n      this.barsForDataLabels.push(section);\r\n    } else {\r\n      this.barsForDataLabels = this.series.map(d => {\r\n        const section: any = {};\r\n        section.series = this.seriesName ? this.seriesName : d.label;\r\n        section.total = d.value;\r\n        section.x = this.xScale(d.label);\r\n        section.y = this.yScale(0);\r\n        section.height = this.yScale(section.total) - this.yScale(0);\r\n        section.width = this.xScale.bandwidth();\r\n        return section;\r\n      });\r\n    }\r\n  }\r\n\r\n  updateTooltipSettings() {\r\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\r\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getLabel(dataItem): string {\r\n    if (dataItem.label) {\r\n      return dataItem.label;\r\n    }\r\n    return dataItem.name;\r\n  }\r\n\r\n  trackBy(index, bar): string {\r\n    return bar.label;\r\n  }\r\n\r\n  trackDataLabelBy(index, barLabel) {\r\n    return index + '#' + barLabel.series + '#' + barLabel.total;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-vertical\r\n            type=\"stacked\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVerticalStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() yScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  tickFormatting: (label: string) => string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    const domain = [];\r\n    let smallest = 0;\r\n    let biggest = 0;\r\n    for (const group of this.results) {\r\n      let smallestSum = 0;\r\n      let biggestSum = 0;\r\n      for (const d of group.series) {\r\n        if (d.value < 0) {\r\n          smallestSum += d.value;\r\n        } else {\r\n          biggestSum += d.value;\r\n        }\r\n        smallest = d.value < smallest ? d.value : smallest;\r\n        biggest = d.value > biggest ? d.value : biggest;\r\n      }\r\n      domain.push(smallestSum);\r\n      domain.push(biggestSum);\r\n    }\r\n    domain.push(smallest);\r\n    domain.push(biggest);\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getXScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\r\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { D0Types } from './series-vertical.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-series-horizontal]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-bar\r\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\r\n      [@animationState]=\"'active'\"\r\n      [width]=\"bar.width\"\r\n      [height]=\"bar.height\"\r\n      [x]=\"bar.x\"\r\n      [y]=\"bar.y\"\r\n      [fill]=\"bar.color\"\r\n      [stops]=\"bar.gradientStops\"\r\n      [data]=\"bar.data\"\r\n      [orientation]=\"'horizontal'\"\r\n      [roundEdges]=\"bar.roundEdges\"\r\n      (select)=\"click($event)\"\r\n      [gradient]=\"gradient\"\r\n      [isActive]=\"isActive(bar.data)\"\r\n      [ariaLabel]=\"bar.ariaLabel\"\r\n      [animations]=\"animations\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"tooltipPlacement\"\r\n      [tooltipType]=\"tooltipType\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"bar.data\"\r\n      [noBarWhenZero]=\"noBarWhenZero\"\r\n    ></svg:g>\r\n    <svg:g *ngIf=\"showDataLabel\">\r\n      <svg:g\r\n        ngx-charts-bar-label\r\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\r\n        [barX]=\"b.x\"\r\n        [barY]=\"b.y\"\r\n        [barWidth]=\"b.width\"\r\n        [barHeight]=\"b.height\"\r\n        [value]=\"b.total\"\r\n        [valueFormatting]=\"dataLabelFormatting\"\r\n        [orientation]=\"'horizontal'\"\r\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(500, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class SeriesHorizontal implements OnChanges {\r\n  bars: any;\r\n  x: any;\r\n  y: any;\r\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\r\n\r\n  @Input() dims;\r\n  @Input() type = 'standard';\r\n  @Input() series;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() seriesName: string;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() roundEdges: boolean;\r\n  @Input() animations: boolean = true;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dataLabelWidthChanged = new EventEmitter();\r\n\r\n  tooltipPlacement: string;\r\n  tooltipType: string;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateTooltipSettings();\r\n    const d0 = {\r\n      [D0Types.positive]: 0,\r\n      [D0Types.negative]: 0\r\n    };\r\n    let d0Type: D0Types;\r\n    d0Type = D0Types.positive;\r\n    let total;\r\n    if (this.type === 'normalized') {\r\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n    }\r\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\r\n\r\n    this.bars = this.series.map((d, index) => {\r\n      let value = d.value;\r\n      const label = this.getLabel(d);\r\n      const formattedLabel = formatLabel(label);\r\n      const roundEdges = this.roundEdges;\r\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\r\n\r\n      const bar: any = {\r\n        value,\r\n        label,\r\n        roundEdges,\r\n        data: d,\r\n        formattedLabel\r\n      };\r\n\r\n      bar.height = this.yScale.bandwidth();\r\n\r\n      if (this.type === 'standard') {\r\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\r\n        if (value < 0) {\r\n          bar.x = this.xScale(value);\r\n        } else {\r\n          bar.x = this.xScale(xScaleMin);\r\n        }\r\n        bar.y = this.yScale(label);\r\n      } else if (this.type === 'stacked') {\r\n        const offset0 = d0[d0Type];\r\n        const offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\r\n        bar.x = this.xScale(offset0);\r\n        bar.y = 0;\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n      } else if (this.type === 'normalized') {\r\n        let offset0 = d0[d0Type];\r\n        let offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        if (total > 0) {\r\n          offset0 = (offset0 * 100) / total;\r\n          offset1 = (offset1 * 100) / total;\r\n        } else {\r\n          offset0 = 0;\r\n          offset1 = 0;\r\n        }\r\n\r\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\r\n        bar.x = this.xScale(offset0);\r\n        bar.y = 0;\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n        value = (offset1 - offset0).toFixed(2) + '%';\r\n      }\r\n\r\n      if (this.colors.scaleType === 'ordinal') {\r\n        bar.color = this.colors.getColor(label);\r\n      } else {\r\n        if (this.type === 'standard') {\r\n          bar.color = this.colors.getColor(value);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\r\n        } else {\r\n          bar.color = this.colors.getColor(bar.offset1);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\r\n        }\r\n      }\r\n\r\n      let tooltipLabel = formattedLabel;\r\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\r\n      if (this.seriesName) {\r\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\r\n        bar.data.series = this.seriesName;\r\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\r\n      }\r\n\r\n      bar.tooltipText = this.tooltipDisabled\r\n        ? undefined\r\n        : `\r\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\r\n        <span class=\"tooltip-val\">${\r\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\r\n        }</span>\r\n      `;\r\n\r\n      return bar;\r\n    });\r\n\r\n    this.updateDataLabels();\r\n  }\r\n\r\n  updateDataLabels() {\r\n    if (this.type === 'stacked') {\r\n      this.barsForDataLabels = [];\r\n      const section: any = {};\r\n      section.series = this.seriesName;\r\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\r\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\r\n      section.total = totalPositive + totalNegative;\r\n      section.x = 0;\r\n      section.y = 0;\r\n      // if total is positive then we show it on the right, otherwise on the left\r\n      if (section.total > 0) {\r\n        section.width = this.xScale(totalPositive);\r\n      } else {\r\n        section.width = this.xScale(totalNegative);\r\n      }\r\n      section.height = this.yScale.bandwidth();\r\n      this.barsForDataLabels.push(section);\r\n    } else {\r\n      this.barsForDataLabels = this.series.map(d => {\r\n        const section: any = {};\r\n        section.series = this.seriesName ? this.seriesName : d.label;\r\n        section.total = d.value;\r\n        section.x = this.xScale(0);\r\n        section.y = this.yScale(d.label);\r\n        section.width = this.xScale(section.total) - this.xScale(0);\r\n        section.height = this.yScale.bandwidth();\r\n        return section;\r\n      });\r\n    }\r\n  }\r\n\r\n  updateTooltipSettings() {\r\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\r\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  getLabel(dataItem): string {\r\n    if (dataItem.label) {\r\n      return dataItem.label;\r\n    }\r\n    return dataItem.name;\r\n  }\r\n\r\n  trackBy(index, bar) {\r\n    return bar.label;\r\n  }\r\n\r\n  trackDataLabelBy(index, barLabel) {\r\n    return index + '#' + barLabel.series + '#' + barLabel.total;\r\n  }\r\n\r\n  click(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { formatLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bar-label]',\r\n  template: `\r\n    <svg:text\r\n      class=\"textDataLabel\"\r\n      alignment-baseline=\"middle\"\r\n      [attr.text-anchor]=\"textAnchor\"\r\n      [attr.transform]=\"transform\"\r\n      [attr.x]=\"x\"\r\n      [attr.y]=\"y\"\r\n    >\r\n      {{ formatedValue }}\r\n    </svg:text>\r\n  `,\r\n  styleUrls: ['./bar-label.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BarLabelComponent implements OnChanges {\r\n  @Input() value;\r\n  @Input() valueFormatting: any;\r\n  @Input() barX;\r\n  @Input() barY;\r\n  @Input() barWidth;\r\n  @Input() barHeight;\r\n  @Input() orientation;\r\n\r\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: any;\r\n  x: number;\r\n  y: number;\r\n  horizontalPadding: number = 2;\r\n  verticalPadding: number = 5;\r\n  formatedValue: string;\r\n  transform: string;\r\n  textAnchor: string;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getSize(): any {\r\n    const h = this.element.getBoundingClientRect().height;\r\n    const w = this.element.getBoundingClientRect().width;\r\n    return { height: h, width: w, negative: this.value < 0 };\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dimensionsChanged.emit(this.getSize());\r\n  }\r\n\r\n  update(): void {\r\n    if (this.valueFormatting) {\r\n      this.formatedValue = this.valueFormatting(this.value);\r\n    } else {\r\n      this.formatedValue = formatLabel(this.value);\r\n    }\r\n\r\n    if (this.orientation === 'horizontal') {\r\n      this.x = this.barX + this.barWidth;\r\n      // if the value is negative then it's on the left of the x0.\r\n      // we need to put the data label in front of the bar\r\n      if (this.value < 0) {\r\n        this.x = this.x - this.horizontalPadding;\r\n        this.textAnchor = 'end';\r\n      } else {\r\n        this.x = this.x + this.horizontalPadding;\r\n        this.textAnchor = 'start';\r\n      }\r\n      this.y = this.barY + this.barHeight / 2;\r\n    } else {\r\n      // orientation must be \"vertical\"\r\n      this.x = this.barX + this.barWidth / 2;\r\n      this.y = this.barY + this.barHeight;\r\n\r\n      if (this.value < 0) {\r\n        this.y = this.y + this.verticalPadding;\r\n        this.textAnchor = 'end';\r\n      } else {\r\n        this.y = this.y - this.verticalPadding;\r\n        this.textAnchor = 'start';\r\n      }\r\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { BarComponent } from './bar.component';\r\nimport { BarHorizontalComponent } from './bar-horizontal.component';\r\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\r\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\r\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\r\nimport { BarVerticalComponent } from './bar-vertical.component';\r\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\r\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\r\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\r\nimport { SeriesHorizontal } from './series-horizontal.component';\r\nimport { SeriesVerticalComponent } from './series-vertical.component';\r\nimport { BarLabelComponent } from './bar-label.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [\r\n    BarComponent,\r\n    BarHorizontalComponent,\r\n    BarHorizontal2DComponent,\r\n    BarHorizontalNormalizedComponent,\r\n    BarHorizontalStackedComponent,\r\n    BarVerticalComponent,\r\n    BarVertical2DComponent,\r\n    BarVerticalNormalizedComponent,\r\n    BarVerticalStackedComponent,\r\n    BarLabelComponent,\r\n    SeriesHorizontal,\r\n    SeriesVerticalComponent\r\n  ],\r\n  exports: [\r\n    BarComponent,\r\n    BarHorizontalComponent,\r\n    BarHorizontal2DComponent,\r\n    BarHorizontalNormalizedComponent,\r\n    BarHorizontalStackedComponent,\r\n    BarVerticalComponent,\r\n    BarVertical2DComponent,\r\n    BarVerticalNormalizedComponent,\r\n    BarVerticalStackedComponent,\r\n    BarLabelComponent,\r\n    SeriesHorizontal,\r\n    SeriesVerticalComponent\r\n  ]\r\n})\r\nexport class BarChartModule {}\r\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\n\r\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\r\n  let domain: number[] = [];\r\n  if (scaleType === 'linear') {\r\n    values = values.map(v => Number(v));\r\n    if (!autoScale) {\r\n      values.push(0);\r\n    }\r\n  }\r\n\r\n  if (scaleType === 'time' || scaleType === 'linear') {\r\n    const min = minVal ? minVal : Math.min(...values);\r\n    const max = maxVal ? maxVal : Math.max(...values);\r\n\r\n    domain = [min, max];\r\n  } else {\r\n    domain = values;\r\n  }\r\n\r\n  return domain;\r\n}\r\n\r\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\r\n  let scale: any;\r\n\r\n  if (scaleType === 'time') {\r\n    scale = scaleTime().range(range).domain(domain);\r\n  } else if (scaleType === 'linear') {\r\n    scale = scaleLinear().range(range).domain(domain);\r\n\r\n    if (roundDomains) {\r\n      scale = scale.nice();\r\n    }\r\n  } else if (scaleType === 'ordinal') {\r\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\r\n  }\r\n\r\n  return scale;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { getScaleType } from '../common/domain.helper';\r\nimport { getDomain, getScale } from './bubble-chart.utils';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bubble-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [dims]=\"dims\"\r\n          [xScale]=\"xScale\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        />\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        />\r\n        <svg:rect\r\n          class=\"bubble-chart-area\"\r\n          x=\"0\"\r\n          y=\"0\"\r\n          [attr.width]=\"dims.width\"\r\n          [attr.height]=\"dims.height\"\r\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\r\n          (mouseenter)=\"deactivateAll()\"\r\n        />\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-bubble-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [rScale]=\"rScale\"\r\n              [xScaleType]=\"xScaleType\"\r\n              [yScaleType]=\"yScaleType\"\r\n              [xAxisLabel]=\"xAxisLabel\"\r\n              [yAxisLabel]=\"yAxisLabel\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              (select)=\"onClick($event, series)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n            />\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BubbleChartComponent extends BaseChartComponent {\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis: boolean = true;\r\n  @Input() yAxis: boolean = true;\r\n  @Input() showXAxisLabel: boolean;\r\n  @Input() showYAxisLabel: boolean;\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() maxRadius = 10;\r\n  @Input() minRadius = 3;\r\n  @Input() autoScale: boolean;\r\n  @Input() schemeType = 'ordinal';\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: any;\r\n  @Input() yScaleMax: any;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  colors: ColorHelper;\r\n  scaleType = 'linear';\r\n  margin = [10, 20, 10, 20];\r\n  bubblePadding = [0, 0, 0, 0];\r\n  data: any;\r\n\r\n  legendOptions: any;\r\n  transform: string;\r\n\r\n  clipPath: string;\r\n  clipPathId: string;\r\n\r\n  seriesDomain: any[];\r\n  xDomain: any[];\r\n  yDomain: any[];\r\n  rDomain: number[];\r\n\r\n  xScaleType: string;\r\n  yScaleType: string;\r\n\r\n  yScale: any;\r\n  xScale: any;\r\n  rScale: any;\r\n\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n\r\n  activeEntries: any[] = [];\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.seriesDomain = this.results.map(d => d.name);\r\n    this.rDomain = this.getRDomain();\r\n    this.xDomain = this.getXDomain();\r\n    this.yDomain = this.getYDomain();\r\n\r\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\r\n\r\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\r\n\r\n    this.data = this.results;\r\n\r\n    this.minRadius = Math.max(this.minRadius, 1);\r\n    this.maxRadius = Math.max(this.maxRadius, 1);\r\n\r\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\r\n\r\n    this.bubblePadding = [0, 0, 0, 0];\r\n    this.setScales();\r\n\r\n    this.bubblePadding = this.getBubblePadding();\r\n    this.setScales();\r\n\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getBubblePadding() {\r\n    let yMin = 0;\r\n    let xMin = 0;\r\n    let yMax = this.dims.height;\r\n    let xMax = this.dims.width;\r\n\r\n    for (const s of this.data) {\r\n      for (const d of s.series) {\r\n        const r = this.rScale(d.r);\r\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\r\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\r\n        xMin = Math.max(r - cx, xMin);\r\n        yMin = Math.max(r - cy, yMin);\r\n        yMax = Math.max(cy + r, yMax);\r\n        xMax = Math.max(cx + r, xMax);\r\n      }\r\n    }\r\n\r\n    xMax = Math.max(xMax - this.dims.width, 0);\r\n    yMax = Math.max(yMax - this.dims.height, 0);\r\n\r\n    return [yMin, xMax, yMax, xMin];\r\n  }\r\n\r\n  setScales() {\r\n    let width = this.dims.width;\r\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\r\n      width = width - this.bubblePadding[1];\r\n    }\r\n    let height = this.dims.height;\r\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\r\n      height = height - this.bubblePadding[2];\r\n    }\r\n    this.xScale = this.getXScale(this.xDomain, width);\r\n    this.yScale = this.getYScale(this.yDomain, height);\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\r\n  }\r\n\r\n  getRScale(domain, range): any {\r\n    const scale = scaleLinear().range(range).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getLegendOptions(): any {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      position: this.legendPosition,\r\n      title: undefined\r\n    };\r\n\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.rDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    const values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.x)) {\r\n          values.push(d.x);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.xScaleType = getScaleType(values);\r\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.y)) {\r\n          values.push(d.y);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.yScaleType = getScaleType(values);\r\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\r\n  }\r\n\r\n  getRDomain(): number[] {\r\n    let min = Infinity;\r\n    let max = -Infinity;\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        const value = Number(d.r) || 1;\r\n        min = Math.min(min, value);\r\n        max = Math.max(max, value);\r\n      }\r\n    }\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bubble-series]',\r\n  template: `\r\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\r\n      <svg:g [attr.transform]=\"circle.transform\">\r\n        <svg:g\r\n          ngx-charts-circle\r\n          [@animationState]=\"'active'\"\r\n          class=\"circle\"\r\n          [cx]=\"0\"\r\n          [cy]=\"0\"\r\n          [r]=\"circle.radius\"\r\n          [fill]=\"circle.color\"\r\n          [style.opacity]=\"circle.opacity\"\r\n          [class.active]=\"circle.isActive\"\r\n          [pointerEvents]=\"'all'\"\r\n          [data]=\"circle.value\"\r\n          [classNames]=\"circle.classNames\"\r\n          (select)=\"onClick(circle.data)\"\r\n          (activate)=\"activateCircle(circle)\"\r\n          (deactivate)=\"deactivateCircle(circle)\"\r\n          ngx-tooltip\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipPlacement]=\"'top'\"\r\n          [tooltipType]=\"'tooltip'\"\r\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipContext]=\"circle.data\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0,\r\n          transform: 'scale(0)'\r\n        }),\r\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BubbleSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() rScale;\r\n  @Input() xScaleType;\r\n  @Input() yScaleType;\r\n  @Input() colors;\r\n  @Input() visibleValue;\r\n  @Input() activeEntries: any[];\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  areaPath: any;\r\n  circles: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.circles = this.getCircles();\r\n  }\r\n\r\n  getCircles(): any[] {\r\n    const seriesName = this.data.name;\r\n\r\n    return this.data.series\r\n      .map((d, i) => {\r\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\r\n          const y = d.y;\r\n          const x = d.x;\r\n          const r = d.r;\r\n\r\n          const radius = this.rScale(r || 1);\r\n          const tooltipLabel = formatLabel(d.name);\r\n\r\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\r\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\r\n\r\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\r\n\r\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\r\n          const opacity = isActive ? 1 : 0.3;\r\n\r\n          const data = Object.assign({}, d, {\r\n            series: seriesName,\r\n            name: d.name,\r\n            value: d.y,\r\n            x: d.x,\r\n            radius: d.r\r\n          });\r\n\r\n          return {\r\n            data,\r\n            x,\r\n            y,\r\n            r,\r\n            classNames: [`circle-data-${i}`],\r\n            value: y,\r\n            label: x,\r\n            cx,\r\n            cy,\r\n            radius,\r\n            tooltipLabel,\r\n            color,\r\n            opacity,\r\n            seriesName,\r\n            isActive,\r\n            transform: `translate(${cx},${cy})`\r\n          };\r\n        }\r\n      })\r\n      .filter(circle => circle !== undefined);\r\n  }\r\n\r\n  getTooltipText(circle): string {\r\n    const hasRadius = typeof circle.r !== 'undefined';\r\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\r\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\r\n\r\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\r\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\r\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\r\n    const x = formatLabel(circle.x);\r\n    const y = formatLabel(circle.y);\r\n    const name =\r\n      hasSeriesName && hasTooltipLabel\r\n        ? `${circle.seriesName} â¢ ${circle.tooltipLabel}`\r\n        : circle.seriesName + circle.tooltipLabel;\r\n    const tooltipTitle =\r\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\r\n\r\n    return `\r\n      ${tooltipTitle}\r\n      <span class=\"tooltip-label\">\r\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\r\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\r\n      </span>\r\n      <span class=\"tooltip-val\">\r\n        ${escapeLabel(radiusValue)}\r\n      </span>\r\n    `;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isVisible(circle): boolean {\r\n    if (this.activeEntries.length > 0) {\r\n      return this.isActive({ name: circle.seriesName });\r\n    }\r\n\r\n    return circle.opacity !== 0;\r\n  }\r\n\r\n  activateCircle(circle): void {\r\n    circle.barVisible = true;\r\n    this.activate.emit({ name: this.data.name });\r\n  }\r\n\r\n  deactivateCircle(circle): void {\r\n    circle.barVisible = false;\r\n    this.deactivate.emit({ name: this.data.name });\r\n  }\r\n\r\n  trackBy(index, circle): string {\r\n    return `${circle.data.series} ${circle.data.name}`;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { BubbleChartComponent } from './bubble-chart.component';\r\nimport { BubbleSeriesComponent } from './bubble-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\r\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\r\n})\r\nexport class BubbleChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  HostListener\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\n\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-heat-map-cell]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\r\n      <defs *ngIf=\"gradient\">\r\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n      </defs>\r\n      <svg:rect\r\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\r\n        rx=\"3\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        class=\"cell\"\r\n        style=\"cursor: pointer\"\r\n        (click)=\"onClick()\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HeatMapCellComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() data;\r\n  @Input() label;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  transform: string;\r\n  activeRange: any[];\r\n  startOpacity: number;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  gradientStops: any[];\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.transform = `translate(${this.x} , ${this.y})`;\r\n\r\n    this.startOpacity = 0.3;\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n    this.gradientStops = this.getGradientStops();\r\n\r\n    if (this.animations) {\r\n      this.loadAnimation();\r\n    }\r\n  }\r\n\r\n  getGradientStops() {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.startOpacity\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element).select('.cell');\r\n    node.attr('opacity', 0);\r\n    this.animateToCurrentForm();\r\n  }\r\n\r\n  animateToCurrentForm(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    node.transition().duration(750).attr('opacity', 1);\r\n  }\r\n\r\n  onClick() {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-heat-map-cell-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-heat-map-cell\r\n      *ngFor=\"let c of cells; trackBy: trackBy\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [fill]=\"c.fill\"\r\n      [data]=\"c.data\"\r\n      (select)=\"onClick(c.cell)\"\r\n      (activate)=\"activate.emit(c.cell)\"\r\n      (deactivate)=\"deactivate.emit(c.cell)\"\r\n      [gradient]=\"gradient\"\r\n      [animations]=\"animations\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\r\n  @Input() data;\r\n  @Input() colors;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() gradient: boolean;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  cells: any[];\r\n\r\n  ngOnInit() {\r\n    if (!this.tooltipText) {\r\n      this.tooltipText = this.getTooltipText;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.cells = this.getCells();\r\n  }\r\n\r\n  getCells() {\r\n    const cells = [];\r\n\r\n    this.data.map(row => {\r\n      row.series.map(cell => {\r\n        const value = cell.value;\r\n        cell.series = row.name;\r\n\r\n        cells.push({\r\n          row,\r\n          cell,\r\n          x: this.xScale(row.name),\r\n          y: this.yScale(cell.name),\r\n          width: this.xScale.bandwidth(),\r\n          height: this.yScale.bandwidth(),\r\n          fill: this.colors.getColor(value),\r\n          data: value,\r\n          label: formatLabel(cell.name),\r\n          series: row.name\r\n        });\r\n      });\r\n    });\r\n\r\n    return cells;\r\n  }\r\n\r\n  getTooltipText({ label, data, series }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(series)} â¢ ${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.tooltipText;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { scaleBand } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-heat-map',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [animations]=\"animations\"\r\n      [legendOptions]=\"legendOptions\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:rect\r\n          *ngFor=\"let rect of rects\"\r\n          [attr.x]=\"rect.x\"\r\n          [attr.y]=\"rect.y\"\r\n          [attr.rx]=\"rect.rx\"\r\n          [attr.width]=\"rect.width\"\r\n          [attr.height]=\"rect.height\"\r\n          [attr.fill]=\"rect.fill\"\r\n        />\r\n        <svg:g\r\n          ngx-charts-heat-map-cell-series\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [data]=\"results\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipText]=\"tooltipText\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event, undefined)\"\r\n          (deactivate)=\"onDeactivate($event, undefined)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class HeatMapComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() gradient: boolean;\r\n  @Input() innerPadding: number | number[] = 8;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() min: any;\r\n  @Input() max: any;\r\n  @Input() activeEntries: any[] = [];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xDomain: any[];\r\n  yDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  color: any;\r\n  colors: ColorHelper;\r\n  colorScale: any;\r\n  transform: string;\r\n  rects: any[];\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  scaleType: string = 'linear';\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.formatDates();\r\n\r\n    this.xDomain = this.getXDomain();\r\n    this.yDomain = this.getYDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.scaleType = getScaleType(this.valueDomain, false);\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.scaleType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.scaleType === 'linear') {\r\n      let min = this.min;\r\n      let max = this.max;\r\n      if (!this.min) {\r\n        min = Math.min(0, ...this.valueDomain);\r\n      }\r\n      if (!this.max) {\r\n        max = Math.max(...this.valueDomain);\r\n      }\r\n      this.valueDomain = [min, max];\r\n    }\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n    this.rects = this.getRects();\r\n  }\r\n\r\n  getXDomain(): any {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.name)) {\r\n        domain.push(group.name);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.name)) {\r\n          domain.push(d.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  /**\r\n   * Converts the input to gap paddingInner in fraction\r\n   * Supports the following inputs:\r\n   *    Numbers: 8\r\n   *    Strings: \"8\", \"8px\", \"8%\"\r\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\r\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\r\n   *\r\n   * @memberOf HeatMapComponent\r\n   */\r\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\r\n    if (typeof value === 'string') {\r\n      value = value\r\n        .replace('[', '')\r\n        .replace(']', '')\r\n        .replace('px', '')\r\n        // tslint:disable-next-line: quotemark\r\n        .replace(\"'\", '');\r\n\r\n      if (value.includes(',')) {\r\n        value = value.split(',');\r\n      }\r\n    }\r\n    if (Array.isArray(value) && typeof index === 'number') {\r\n      return this.getDimension(value[index], null, N, L);\r\n    }\r\n    if (typeof value === 'string' && value.includes('%')) {\r\n      return +value.replace('%', '') / 100;\r\n    }\r\n    return N / (L / +value + 1);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\r\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\r\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\r\n  }\r\n\r\n  getRects(): any[] {\r\n    const rects = [];\r\n\r\n    this.xDomain.map(xVal => {\r\n      this.yDomain.map(yVal => {\r\n        rects.push({\r\n          x: this.xScale(xVal),\r\n          y: this.yScale(yVal),\r\n          rx: 3,\r\n          width: this.xScale.bandwidth(),\r\n          height: this.yScale.bandwidth(),\r\n          fill: 'rgba(200,200,200,0.03)'\r\n        });\r\n      });\r\n    });\r\n\r\n    return rects;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    return {\r\n      scaleType: this.scaleType,\r\n      domain: this.valueDomain,\r\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\r\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { HeatMapCellComponent } from './heat-map-cell.component';\r\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\r\nimport { HeatMapComponent } from './heat-map.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\r\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\r\n})\r\nexport class HeatMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { select } from 'd3-selection';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-line]',\r\n  template: `\r\n    <svg:path\r\n      [@animationState]=\"'active'\"\r\n      class=\"line\"\r\n      [attr.d]=\"initialPath\"\r\n      [attr.fill]=\"fill\"\r\n      [attr.stroke]=\"stroke\"\r\n      stroke-width=\"1.5px\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          strokeDasharray: 2000,\r\n          strokeDashoffset: 2000\r\n        }),\r\n        animate(\r\n          1000,\r\n          style({\r\n            strokeDashoffset: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class LineComponent implements OnChanges {\r\n  @Input() path;\r\n  @Input() stroke;\r\n  @Input() data;\r\n  @Input() fill: string = 'none';\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  initialized: boolean = false;\r\n  initialPath: string;\r\n\r\n  constructor(private element: ElementRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.initialized) {\r\n      this.initialized = true;\r\n      this.initialPath = this.path;\r\n    } else {\r\n      this.updatePathEl();\r\n    }\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element.nativeElement).select('.line');\r\n\r\n    if (this.animations) {\r\n      node.transition().duration(750).attr('d', this.path);\r\n    } else {\r\n      node.attr('d', this.path);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-line-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [activeTime]=\"activeTime\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [referenceLines]=\"referenceLines\"\r\n          [showRefLines]=\"showRefLines\"\r\n          [showRefLabels]=\"showRefLabels\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-line-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [curve]=\"curve\"\r\n              [rangeFillOpacity]=\"rangeFillOpacity\"\r\n              [hasRange]=\"hasRange\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [scaleType]=\"scaleType\"\r\n        [legend]=\"legend\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-line-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [curve]=\"curve\"\r\n            [hasRange]=\"hasRange\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class LineChartComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() autoScale;\r\n  @Input() timeline;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() showRefLines: boolean = false;\r\n  @Input() referenceLines: any;\r\n  @Input() showRefLabels: boolean = true;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n  @Input() activeTime;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xSet: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  yScale: any;\r\n  xScale: any;\r\n  colors: ColorHelper;\r\n  scaleType: string;\r\n  transform: string;\r\n  clipPath: string;\r\n  clipPathId: string;\r\n  series: any;\r\n  areaPath: any;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n  hasRange: boolean; // whether the line has a min-max range around it\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (domain.indexOf(d.value) < 0) {\r\n          domain.push(d.value);\r\n        }\r\n        if (d.min !== undefined) {\r\n          this.hasRange = true;\r\n          if (domain.indexOf(d.min) < 0) {\r\n            domain.push(d.min);\r\n          }\r\n        }\r\n        if (d.max !== undefined) {\r\n          this.hasRange = true;\r\n          if (domain.indexOf(d.max) < 0) {\r\n            domain.push(d.max);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const values = [...domain];\r\n    if (!this.autoScale) {\r\n      values.push(0);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime().range([0, width]).domain(domain);\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear().range([0, width]).domain(domain);\r\n\r\n      if (this.roundDomains) {\r\n        scale = scale.nice();\r\n      }\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\r\n    }\r\n\r\n    return scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    this.deactivateAll();\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { area, line } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-line-series]',\r\n  template: `\r\n    <svg:g>\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-linear-gradient\r\n          *ngIf=\"hasGradient\"\r\n          orientation=\"vertical\"\r\n          [name]=\"gradientId\"\r\n          [stops]=\"gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:g\r\n        ngx-charts-area\r\n        class=\"line-highlight\"\r\n        [data]=\"data\"\r\n        [path]=\"areaPath\"\r\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\r\n        [opacity]=\"0.25\"\r\n        [startOpacity]=\"0\"\r\n        [gradient]=\"true\"\r\n        [stops]=\"areaGradientStops\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n        [animations]=\"animations\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-line\r\n        class=\"line-series\"\r\n        [data]=\"data\"\r\n        [path]=\"path\"\r\n        [stroke]=\"stroke\"\r\n        [animations]=\"animations\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-area\r\n        *ngIf=\"hasRange\"\r\n        class=\"line-series-range\"\r\n        [data]=\"data\"\r\n        [path]=\"outerPath\"\r\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n        [opacity]=\"rangeFillOpacity\"\r\n        [animations]=\"animations\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LineSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() curve: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() hasRange: boolean;\r\n  @Input() animations: boolean = true;\r\n\r\n  path: string;\r\n  outerPath: string;\r\n  areaPath: string;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n  areaGradientStops: any[];\r\n  stroke: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradients();\r\n\r\n    const data = this.sortData(this.data.series);\r\n\r\n    const lineGen = this.getLineGenerator();\r\n    this.path = lineGen(data) || '';\r\n\r\n    const areaGen = this.getAreaGenerator();\r\n    this.areaPath = areaGen(data) || '';\r\n\r\n    if (this.hasRange) {\r\n      const range = this.getRangeGenerator();\r\n      this.outerPath = range(data) || '';\r\n    }\r\n\r\n    if (this.hasGradient) {\r\n      this.stroke = this.gradientUrl;\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      if (max === min) {\r\n        this.stroke = this.colors.getColor(max);\r\n      }\r\n    } else {\r\n      this.stroke = this.colors.getColor(this.data.name);\r\n    }\r\n  }\r\n\r\n  getLineGenerator(): any {\r\n    return line<any>()\r\n      .x(d => {\r\n        const label = d.name;\r\n        let value;\r\n        if (this.scaleType === 'time') {\r\n          value = this.xScale(label);\r\n        } else if (this.scaleType === 'linear') {\r\n          value = this.xScale(Number(label));\r\n        } else {\r\n          value = this.xScale(label);\r\n        }\r\n        return value;\r\n      })\r\n      .y(d => this.yScale(d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  getRangeGenerator(): any {\r\n    return area<any>()\r\n      .x(d => {\r\n        const label = d.name;\r\n        let value;\r\n        if (this.scaleType === 'time') {\r\n          value = this.xScale(label);\r\n        } else if (this.scaleType === 'linear') {\r\n          value = this.xScale(Number(label));\r\n        } else {\r\n          value = this.xScale(label);\r\n        }\r\n        return value;\r\n      })\r\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\r\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  getAreaGenerator(): any {\r\n    const xProperty = d => {\r\n      const label = d.name;\r\n      return this.xScale(label);\r\n    };\r\n\r\n    return area<any>()\r\n      .x(xProperty)\r\n      .y0(() => this.yScale.range()[0])\r\n      .y1(d => this.yScale(d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  sortData(data) {\r\n    if (this.scaleType === 'linear') {\r\n      data = sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      data = sortByTime(data, 'name');\r\n    } else {\r\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  updateGradients() {\r\n    if (this.colors.scaleType === 'linear') {\r\n      this.hasGradient = true;\r\n      this.gradientId = 'grad' + id().toString();\r\n      this.gradientUrl = `url(#${this.gradientId})`;\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\r\n    } else {\r\n      this.hasGradient = false;\r\n      this.gradientStops = undefined;\r\n      this.areaGradientStops = undefined;\r\n    }\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { LineComponent } from './line.component';\r\nimport { LineChartComponent } from './line-chart.component';\r\nimport { LineSeriesComponent } from './line-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\r\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\r\n})\r\nexport class LineChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { curveCardinalClosed } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { getScaleType } from '../common/domain.helper';\r\nimport { isDate } from '../utils/types';\r\n\r\nconst twoPI = 2 * Math.PI;\r\n\r\n@Component({\r\n  selector: 'ngx-charts-polar-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\r\n        <svg:g [attr.transform]=\"transformPlot\">\r\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\r\n          <svg:g *ngIf=\"showGridLines\">\r\n            <svg:circle\r\n              *ngFor=\"let r of radiusTicks\"\r\n              class=\"gridline-path radial-gridline-path\"\r\n              cx=\"0\"\r\n              cy=\"0\"\r\n              [attr.r]=\"r\"\r\n            />\r\n          </svg:g>\r\n          <svg:g *ngIf=\"xAxis\">\r\n            <svg:g\r\n              ngx-charts-pie-label\r\n              *ngFor=\"let tick of thetaTicks\"\r\n              [data]=\"tick\"\r\n              [radius]=\"outerRadius\"\r\n              [label]=\"tick.label\"\r\n              [max]=\"outerRadius\"\r\n              [value]=\"showGridLines ? 1 : outerRadius\"\r\n              [explodeSlices]=\"true\"\r\n              [animations]=\"animations\"\r\n              [labelTrim]=\"labelTrim\"\r\n              [labelTrimSize]=\"labelTrimSize\"\r\n            ></svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          [attr.transform]=\"transformYAxis\"\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yAxisScale\"\r\n          [dims]=\"yAxisDims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-axis-label\r\n          *ngIf=\"xAxis && showXAxisLabel\"\r\n          [label]=\"xAxisLabel\"\r\n          [offset]=\"labelOffset\"\r\n          [orient]=\"'bottom'\"\r\n          [height]=\"dims.height\"\r\n          [width]=\"dims.width\"\r\n        ></svg:g>\r\n        <svg:g [attr.transform]=\"transformPlot\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-polar-series\r\n              [gradient]=\"gradient\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [curve]=\"curve\"\r\n              [rangeFillOpacity]=\"rangeFillOpacity\"\r\n              [animations]=\"animations\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              (select)=\"onClick($event)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n            />\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: [\r\n    '../common/base-chart.component.scss',\r\n    '../pie-chart/pie-chart.component.scss',\r\n    './polar-chart.component.scss'\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class PolarChartComponent extends BaseChartComponent {\r\n  @Input() legend: boolean;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis: boolean;\r\n  @Input() yAxis: boolean;\r\n  @Input() showXAxisLabel: boolean;\r\n  @Input() showYAxisLabel: boolean;\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() autoScale: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveCardinalClosed;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() rangeFillOpacity: number = 0.15;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: (o: any) => any;\r\n  @Input() yAxisTickFormatting: (o: any) => any;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() showSeriesOnHover: boolean = true;\r\n  @Input() gradient: boolean = false;\r\n  @Input() yAxisMinScale: number = 0;\r\n  @Input() labelTrim: boolean = true;\r\n  @Input() labelTrimSize: number = 10;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  yAxisDims: ViewDimensions;\r\n  labelOffset: number;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  yScale: any; // -> rScale\r\n  xScale: any; // -> tScale\r\n  yAxisScale: any; // -> yScale\r\n  colors: ColorHelper;\r\n  scaleType: string;\r\n  transform: string;\r\n  transformPlot: string;\r\n  transformYAxis: string;\r\n  transformXAxis: string;\r\n  series: any; // ???\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n  thetaTicks: any[];\r\n  radiusTicks: number[];\r\n  outerRadius: number;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.setDims();\r\n\r\n    this.setScales();\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.setTicks();\r\n  }\r\n\r\n  setDims() {\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    const halfWidth = Math.floor(this.dims.width / 2);\r\n    const halfHeight = Math.floor(this.dims.height / 2);\r\n\r\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\r\n\r\n    const yOffset = Math.max(0, halfHeight - outerRadius);\r\n\r\n    this.yAxisDims = {\r\n      ...this.dims,\r\n      width: halfWidth\r\n    };\r\n\r\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\r\n    this.transformYAxis = `translate(0, ${yOffset})`;\r\n    this.labelOffset = this.dims.height + 40;\r\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\r\n  }\r\n\r\n  setScales() {\r\n    const xValues = this.getXValues();\r\n    this.scaleType = getScaleType(xValues);\r\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, twoPI);\r\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\r\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\r\n  }\r\n\r\n  setTicks() {\r\n    let tickFormat;\r\n    if (this.xAxisTickFormatting) {\r\n      tickFormat = this.xAxisTickFormatting;\r\n    } else if (this.xScale.tickFormat) {\r\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\r\n    } else {\r\n      tickFormat = d => {\r\n        if (isDate(d)) {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    const outerRadius = this.outerRadius;\r\n    const s = 1.1;\r\n\r\n    this.thetaTicks = this.xDomain.map(d => {\r\n      const startAngle = this.xScale(d);\r\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\r\n      const label = tickFormat(d);\r\n\r\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\r\n      const pos = [dd, s * startPos[1]];\r\n      return {\r\n        innerRadius: 0,\r\n        outerRadius,\r\n        startAngle,\r\n        endAngle: startAngle,\r\n        value: outerRadius,\r\n        label,\r\n        startPos,\r\n        pos\r\n      };\r\n    });\r\n\r\n    const minDistance = 10;\r\n\r\n    /* from pie chart, abstract out -*/\r\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\r\n      const a = this.thetaTicks[i];\r\n\r\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\r\n        const b = this.thetaTicks[j];\r\n        // if they're on the same side\r\n        if (b.pos[0] * a.pos[0] > 0) {\r\n          // if they're overlapping\r\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\r\n          if (o > 0) {\r\n            // push the second up or down\r\n            b.pos[1] += Math.sign(b.pos[0]) * o;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\r\n  }\r\n\r\n  getXValues(): any[] {\r\n    const values = [];\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.name)) {\r\n          values.push(d.name);\r\n        }\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  getXDomain(values = this.getXValues()): any[] {\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      return [min, max];\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      return [min, max];\r\n    }\r\n    return values;\r\n  }\r\n\r\n  getYValues(): any[] {\r\n    const domain = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (domain.indexOf(d.value) < 0) {\r\n          domain.push(d.value);\r\n        }\r\n        if (d.min !== undefined) {\r\n          if (domain.indexOf(d.min) < 0) {\r\n            domain.push(d.min);\r\n          }\r\n        }\r\n        if (d.max !== undefined) {\r\n          if (domain.indexOf(d.max) < 0) {\r\n            domain.push(d.max);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(domain = this.getYValues()): any[] {\r\n    let min = Math.min(...domain);\r\n    const max = Math.max(this.yAxisMinScale, ...domain);\r\n\r\n    min = Math.max(0, min);\r\n    if (!this.autoScale) {\r\n      min = Math.min(0, min);\r\n    }\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    switch (this.scaleType) {\r\n      case 'time':\r\n        return scaleTime().range([0, width]).domain(domain);\r\n      case 'linear':\r\n        const scale = scaleLinear().range([0, width]).domain(domain);\r\n        return this.roundDomains ? scale.nice() : scale;\r\n      default:\r\n        return scalePoint()\r\n          .range([0, width - twoPI / domain.length])\r\n          .padding(0)\r\n          .domain(domain);\r\n    }\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([0, height]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    if (this.schemeType === 'ordinal') {\r\n      return {\r\n        scaleType: this.schemeType,\r\n        colors: this.colors,\r\n        domain: this.seriesDomain,\r\n        title: this.legendTitle,\r\n        position: this.legendPosition\r\n      };\r\n    }\r\n    return {\r\n      scaleType: this.schemeType,\r\n      colors: this.colors.scale,\r\n      domain: this.yDomain,\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n}\r\n","export function isDate(value) {\r\n  return toString.call(value) === '[object Date]';\r\n}\r\n\r\nexport function isNumber(value) {\r\n  return typeof value === 'number';\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { lineRadial } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\nimport { escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-polar-series]',\r\n  template: `\r\n    <svg:g class=\"polar-charts-series\">\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-radial-gradient\r\n          *ngIf=\"hasGradient\"\r\n          orientation=\"vertical\"\r\n          [color]=\"seriesColor\"\r\n          [name]=\"gradientId\"\r\n          [startOpacity]=\"0.25\"\r\n          [endOpacity]=\"1\"\r\n          [stops]=\"gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:g\r\n        ngx-charts-line\r\n        class=\"polar-series-path\"\r\n        [path]=\"path\"\r\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\r\n        [class.active]=\"active\"\r\n        [class.inactive]=\"inactive\"\r\n        [attr.fill-opacity]=\"rangeFillOpacity\"\r\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\r\n        [animations]=\"animations\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-circle\r\n        *ngFor=\"let circle of circles\"\r\n        class=\"circle\"\r\n        [cx]=\"circle.cx\"\r\n        [cy]=\"circle.cy\"\r\n        [r]=\"circleRadius\"\r\n        [fill]=\"circle.color\"\r\n        [style.opacity]=\"inactive ? 0.2 : 1\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        tooltipType=\"tooltip\"\r\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"circle.data\"\r\n        (select)=\"select.emit(circle.data)\"\r\n        (activate)=\"activate.emit({ name: circle.data.series })\"\r\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PolarSeriesComponent implements OnChanges {\r\n  @Input() name;\r\n  @Input() data;\r\n  @Input() xScale; // Theta\r\n  @Input() yScale; // R\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() curve: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: (o: any) => string;\r\n  @Input() gradient: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  path: string;\r\n  circles: any[];\r\n  circleRadius: number = 3;\r\n\r\n  outerPath: string;\r\n  areaPath: string;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n  areaGradientStops: any[];\r\n  seriesColor: string;\r\n\r\n  active: boolean;\r\n  inactive: boolean;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradients();\r\n\r\n    const line = this.getLineGenerator();\r\n\r\n    const data = this.sortData(this.data.series);\r\n\r\n    const seriesName = this.data.name;\r\n    const linearScaleType = this.colors.scaleType === 'linear';\r\n    const min = this.yScale.domain()[0];\r\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\r\n\r\n    this.path = line(data) || '';\r\n\r\n    this.circles = data.map(d => {\r\n      const a = this.getAngle(d);\r\n      const r = this.getRadius(d);\r\n      const value = d.value;\r\n\r\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\r\n\r\n      const cData = Object.assign({}, d, {\r\n        series: seriesName,\r\n        value,\r\n        name: d.name\r\n      });\r\n\r\n      return {\r\n        data: cData,\r\n        cx: r * Math.sin(a),\r\n        cy: -r * Math.cos(a),\r\n        value,\r\n        color,\r\n        label: d.name\r\n      };\r\n    });\r\n\r\n    this.active = this.isActive(this.data);\r\n    this.inactive = this.isInactive(this.data);\r\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\r\n  }\r\n\r\n  getAngle(d) {\r\n    const label = d.name;\r\n    if (this.scaleType === 'time') {\r\n      return this.xScale(label);\r\n    } else if (this.scaleType === 'linear') {\r\n      return this.xScale(Number(label));\r\n    }\r\n    return this.xScale(label);\r\n  }\r\n\r\n  getRadius(d) {\r\n    return this.yScale(d.value);\r\n  }\r\n\r\n  getLineGenerator(): any {\r\n    return lineRadial<any>()\r\n      .angle(d => this.getAngle(d))\r\n      .radius(d => this.getRadius(d))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  sortData(data) {\r\n    if (this.scaleType === 'linear') {\r\n      return sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      return sortByTime(data, 'name');\r\n    }\r\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n\r\n  defaultTooltipText({ label, value }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} â¢ ${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  updateGradients() {\r\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\r\n\r\n    if (!this.hasGradient) {\r\n      return;\r\n    }\r\n\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n\r\n    if (this.colors.scaleType === 'linear') {\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n    } else {\r\n      this.gradientStops = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-advanced-pie-chart',\r\n  template: `\r\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\r\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\r\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\r\n            <svg:g\r\n              ngx-charts-pie-series\r\n              [colors]=\"colors\"\r\n              [series]=\"results\"\r\n              [innerRadius]=\"innerRadius\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [outerRadius]=\"outerRadius\"\r\n              [gradient]=\"gradient\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              [tooltipText]=\"tooltipText\"\r\n              (select)=\"onClick($event)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n              [animations]=\"animations\"\r\n            ></svg:g>\r\n          </svg:g>\r\n        </ngx-charts-chart>\r\n      </div>\r\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\r\n        <ngx-charts-advanced-legend\r\n          [data]=\"results\"\r\n          [colors]=\"colors\"\r\n          [width]=\"width - dims.width - margin[1]\"\r\n          [label]=\"label\"\r\n          [animations]=\"animations\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"nameFormatting\"\r\n          [percentageFormatting]=\"percentageFormatting\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event, true)\"\r\n          (deactivate)=\"onDeactivate($event, true)\"\r\n        >\r\n        </ngx-charts-advanced-legend>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AdvancedPieChartComponent extends BaseChartComponent {\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() label: string = 'Total';\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  data: any;\r\n  dims: ViewDimensions;\r\n  domain: any[];\r\n  outerRadius: number;\r\n  innerRadius: number;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  legendWidth: number;\r\n  margin = [20, 20, 20, 20];\r\n\r\n  @Input() valueFormatting: (value: number) => any;\r\n  @Input() nameFormatting: (value: string) => any;\r\n  @Input() percentageFormatting: (value: number) => any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: (this.width * 4) / 12.0,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n    this.setColors();\r\n\r\n    const xOffset = this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\r\n\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\r\n    this.innerRadius = this.outerRadius * 0.75;\r\n\r\n    this.transform = `translate(${xOffset} , ${yOffset})`;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data: DataItem) {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { arc } from 'd3-shape';\r\n\r\nimport { trimLabel } from '../common/trim-label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-label]',\r\n  template: `\r\n    <title>{{ label }}</title>\r\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\r\n      <svg:text\r\n        class=\"pie-label\"\r\n        [class.animation]=\"animations\"\r\n        dy=\".35em\"\r\n        [style.textAnchor]=\"textAnchor()\"\r\n        [style.shapeRendering]=\"'crispEdges'\"\r\n      >\r\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\r\n      </svg:text>\r\n    </svg:g>\r\n    <svg:path\r\n      [attr.d]=\"line\"\r\n      [attr.stroke]=\"color\"\r\n      fill=\"none\"\r\n      class=\"pie-label-line line\"\r\n      [class.animation]=\"animations\"\r\n    ></svg:path>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieLabelComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() radius;\r\n  @Input() label;\r\n  @Input() color;\r\n  @Input() max;\r\n  @Input() value;\r\n  @Input() explodeSlices;\r\n  @Input() animations: boolean = true;\r\n  @Input() labelTrim: boolean = true;\r\n  @Input() labelTrimSize: number = 10;\r\n\r\n  trimLabel: (label: string, max?: number) => string;\r\n  line: string;\r\n\r\n  private readonly isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\r\n\r\n  constructor() {\r\n    this.trimLabel = trimLabel;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    let startRadius = this.radius;\r\n    if (this.explodeSlices) {\r\n      startRadius = (this.radius * this.value) / this.max;\r\n    }\r\n\r\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\r\n\r\n    // Calculate innerPos then scale outer position to match label position\r\n    const innerPos = innerArc.centroid(this.data);\r\n\r\n    let scale = this.data.pos[1] / innerPos[1];\r\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\r\n      scale = 1;\r\n    }\r\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\r\n\r\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\r\n  }\r\n\r\n  get textX(): number {\r\n    return this.data.pos[0];\r\n  }\r\n\r\n  get textY(): number {\r\n    return this.data.pos[1];\r\n  }\r\n\r\n  get styleTransform(): string {\r\n    return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\r\n  }\r\n\r\n  get attrTransform(): string {\r\n    return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\r\n  }\r\n\r\n  get textTransition(): string {\r\n    return this.isIE || !this.animations ? null : 'transform 0.75s';\r\n  }\r\n\r\n  textAnchor(): any {\r\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\r\n  }\r\n\r\n  midAngle(d): number {\r\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { interpolate } from 'd3-interpolate';\r\nimport { select } from 'd3-selection';\r\nimport { arc } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\n/* tslint:disable */\r\nimport { MouseEvent } from '../events';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-arc]',\r\n  template: `\r\n    <svg:g class=\"arc-group\">\r\n      <svg:defs *ngIf=\"gradient\">\r\n        <svg:g\r\n          ngx-charts-svg-radial-gradient\r\n          [color]=\"fill\"\r\n          orientation=\"vertical\"\r\n          [name]=\"radialGradientId\"\r\n          [startOpacity]=\"startOpacity\"\r\n        />\r\n      </svg:defs>\r\n      <svg:path\r\n        [attr.d]=\"path\"\r\n        class=\"arc\"\r\n        [class.active]=\"isActive\"\r\n        [attr.fill]=\"getGradient()\"\r\n        (click)=\"onClick()\"\r\n        (dblclick)=\"onDblClick($event)\"\r\n        (mouseenter)=\"activate.emit(data)\"\r\n        (mouseleave)=\"deactivate.emit(data)\"\r\n        [style.pointer-events]=\"getPointerEvents()\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieArcComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() startAngle: number = 0;\r\n  @Input() endAngle: number = Math.PI * 2;\r\n  @Input() innerRadius;\r\n  @Input() outerRadius;\r\n  @Input() cornerRadius: number = 0;\r\n  @Input() value;\r\n  @Input() max;\r\n  @Input() data;\r\n  @Input() explodeSlices: boolean = false;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animate: boolean = true;\r\n  @Input() pointerEvents: boolean = true;\r\n  @Input() isActive: boolean = false;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dblclick = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  path: any;\r\n  startOpacity: number;\r\n  radialGradientId: string;\r\n  linearGradientId: string;\r\n  gradientFill: string;\r\n  initialized: boolean = false;\r\n  private _timeout;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getGradient() {\r\n    return this.gradient ? this.gradientFill : this.fill;\r\n  }\r\n\r\n  getPointerEvents() {\r\n    return this.pointerEvents ? 'auto' : 'none';\r\n  }\r\n\r\n  update(): void {\r\n    const calc = this.calculateArc();\r\n    this.startOpacity = 0.5;\r\n    this.radialGradientId = 'linearGrad' + id().toString();\r\n    this.gradientFill = `url(#${this.radialGradientId})`;\r\n\r\n    if (this.animate) {\r\n      if (this.initialized) {\r\n        this.updateAnimation();\r\n      } else {\r\n        this.loadAnimation();\r\n        this.initialized = true;\r\n      }\r\n    } else {\r\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\r\n    }\r\n  }\r\n\r\n  calculateArc(): any {\r\n    let outerRadius = this.outerRadius;\r\n    if (this.explodeSlices && this.innerRadius === 0) {\r\n      outerRadius = (this.outerRadius * this.value) / this.max;\r\n    }\r\n\r\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element)\r\n      .selectAll('.arc')\r\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\r\n\r\n    const calc = this.calculateArc();\r\n\r\n    node\r\n      .transition()\r\n      .attrTween('d', function (d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const copyOfD = Object.assign({}, d);\r\n        copyOfD.endAngle = copyOfD.startAngle;\r\n        const interpolater = interpolate(copyOfD, copyOfD);\r\n        (<any>this)._current = interpolater(0);\r\n        return function (t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      })\r\n      .transition()\r\n      .duration(750)\r\n      .attrTween('d', function (d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const interpolater = interpolate((<any>this)._current, d);\r\n        (<any>this)._current = interpolater(0);\r\n        return function (t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      });\r\n  }\r\n\r\n  updateAnimation(): void {\r\n    const node = select(this.element)\r\n      .selectAll('.arc')\r\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\r\n\r\n    const calc = this.calculateArc();\r\n\r\n    node\r\n      .transition()\r\n      .duration(750)\r\n      .attrTween('d', function (d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const interpolater = interpolate((<any>this)._current, d);\r\n        (<any>this)._current = interpolater(0);\r\n        return function (t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      });\r\n  }\r\n\r\n  onClick(): void {\r\n    clearTimeout(this._timeout);\r\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\r\n  }\r\n\r\n  onDblClick(event: MouseEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    clearTimeout(this._timeout);\r\n\r\n    this.dblclick.emit({\r\n      data: this.data,\r\n      nativeEvent: event\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-pie-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\r\n        <svg:g\r\n          ngx-charts-pie-series\r\n          [colors]=\"colors\"\r\n          [series]=\"data\"\r\n          [showLabels]=\"labels\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [trimLabels]=\"trimLabels\"\r\n          [maxLabelLength]=\"maxLabelLength\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [innerRadius]=\"innerRadius\"\r\n          [outerRadius]=\"outerRadius\"\r\n          [explodeSlices]=\"explodeSlices\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipText]=\"tooltipText\"\r\n          (dblclick)=\"dblclick.emit($event)\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieChartComponent extends BaseChartComponent {\r\n  @Input() labels = false;\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() explodeSlices = false;\r\n  @Input() doughnut = false;\r\n  @Input() arcWidth = 0.25;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() labelFormatting: any;\r\n  @Input() trimLabels: boolean = true;\r\n  @Input() maxLabelLength: number = 10;\r\n  @Input() tooltipText: any;\r\n  @Output() dblclick = new EventEmitter();\r\n  // optional margins\r\n  @Input() margins: number[];\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  translation: string;\r\n  outerRadius: number;\r\n  innerRadius: number;\r\n  data: any;\r\n  colors: ColorHelper;\r\n  domain: any;\r\n  dims: any;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\r\n      this.margins = [30, 80, 30, 80];\r\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\r\n      // default value for margins\r\n      this.margins = [20, 20, 20, 20];\r\n    }\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margins,\r\n      showLegend: this.legend,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    const xOffset = this.margins[3] + this.dims.width / 2;\r\n    const yOffset = this.margins[0] + this.dims.height / 2;\r\n    this.translation = `translate(${xOffset}, ${yOffset})`;\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\r\n    if (this.labels) {\r\n      // make room for labels\r\n      this.outerRadius /= 3;\r\n    } else {\r\n      this.outerRadius /= 2;\r\n    }\r\n    this.innerRadius = 0;\r\n    if (this.doughnut) {\r\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\r\n    }\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    // sort data according to domain\r\n    this.data = this.results.sort((a, b) => {\r\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\r\n    });\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      domain: this.domain,\r\n      colors: this.colors,\r\n      title: this.legendTitle,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  private hasNoOptionalMarginsSet(): boolean {\r\n    return !this.margins || this.margins.length <= 0;\r\n  }\r\n}\r\n","import { scaleBand } from 'd3-scale';\r\n\r\nexport function gridSize(dims, len, minWidth) {\r\n  let rows = 1;\r\n  let cols = len;\r\n  const width = dims.width;\r\n\r\n  if (width > minWidth) {\r\n    while (width / cols < minWidth) {\r\n      rows += 1;\r\n      cols = Math.ceil(len / rows);\r\n    }\r\n  }\r\n\r\n  return [cols, rows];\r\n}\r\n\r\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\r\n  const xScale: any = scaleBand<number>();\r\n  const yScale: any = scaleBand<number>();\r\n  const width = dims.width;\r\n  const height = dims.height;\r\n\r\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\r\n\r\n  const xDomain = [];\r\n  const yDomain = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    yDomain.push(i);\r\n  }\r\n  for (let i = 0; i < columns; i++) {\r\n    xDomain.push(i);\r\n  }\r\n  xScale.domain(xDomain);\r\n  yScale.domain(yDomain);\r\n\r\n  xScale.rangeRound([0, width], 0.1);\r\n  yScale.rangeRound([0, height], 0.1);\r\n\r\n  const res = [];\r\n  const total = designatedTotal ? designatedTotal : getTotal(data);\r\n  const cardWidth = xScale.bandwidth();\r\n  const cardHeight = yScale.bandwidth();\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    res[i] = {};\r\n    res[i].data = {\r\n      name: data[i] ? data[i].name : '',\r\n      value: data[i] ? data[i].value : undefined,\r\n      extra: data[i] ? data[i].extra : undefined,\r\n      label: data[i] ? data[i].label : ''\r\n    };\r\n    res[i].x = xScale(i % columns);\r\n    res[i].y = yScale(Math.floor(i / columns));\r\n    res[i].width = cardWidth;\r\n    res[i].height = cardHeight;\r\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\r\n    res[i].data.total = total;\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nfunction getTotal(results) {\r\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { min } from 'd3-array';\r\nimport { format } from 'd3-format';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { gridLayout } from '../common/grid-layout.helper';\r\nimport { formatLabel } from '../common/label.helper';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-pie-grid',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\r\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\r\n          <svg:g\r\n            ngx-charts-pie-grid-series\r\n            [colors]=\"series.colors\"\r\n            [data]=\"series.data\"\r\n            [innerRadius]=\"series.innerRadius\"\r\n            [outerRadius]=\"series.outerRadius\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event)\"\r\n            ngx-tooltip\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipPlacement]=\"'top'\"\r\n            [tooltipType]=\"'tooltip'\"\r\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [tooltipContext]=\"series.data[0].data\"\r\n            (activate)=\"onActivate($event)\"\r\n            (deactivate)=\"onDeactivate($event)\"\r\n          />\r\n          <svg:text\r\n            *ngIf=\"animations\"\r\n            class=\"label percent-label\"\r\n            dy=\"-0.5em\"\r\n            x=\"0\"\r\n            y=\"5\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"series.percent\"\r\n            [countSuffix]=\"'%'\"\r\n            text-anchor=\"middle\"\r\n          ></svg:text>\r\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\r\n            {{ series.percent.toLocaleString() }}\r\n          </svg:text>\r\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\r\n            {{ series.label }}\r\n          </svg:text>\r\n          <svg:text\r\n            *ngIf=\"animations\"\r\n            class=\"label\"\r\n            dy=\"1.23em\"\r\n            x=\"0\"\r\n            [attr.y]=\"series.outerRadius\"\r\n            text-anchor=\"middle\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"series.total\"\r\n            [countPrefix]=\"label + ': '\"\r\n          ></svg:text>\r\n          <svg:text\r\n            *ngIf=\"!animations\"\r\n            class=\"label\"\r\n            dy=\"1.23em\"\r\n            x=\"0\"\r\n            [attr.y]=\"series.outerRadius\"\r\n            text-anchor=\"middle\"\r\n          >\r\n            {{ label }}: {{ series.total.toLocaleString() }}\r\n          </svg:text>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieGridComponent extends BaseChartComponent {\r\n  @Input() designatedTotal: number;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: (o: any) => any;\r\n  @Input() label: string = 'Total';\r\n  @Input() minWidth: number = 150;\r\n  @Input() activeEntries: any[] = [];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  dims: ViewDimensions;\r\n  data: any[];\r\n  transform: string;\r\n  series: any[];\r\n  domain: any[];\r\n  colorScale: ColorHelper;\r\n  margin = [20, 20, 20, 20];\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\r\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\r\n\r\n    this.series = this.getSeries();\r\n    this.setColors();\r\n\r\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\r\n  }\r\n\r\n  defaultTooltipText({ data }): string {\r\n    const label = trimLabel(formatLabel(data.name));\r\n    const val = data.value.toLocaleString();\r\n    return `\r\n      <span class=\"tooltip-label\">${label}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  getSeries(): any[] {\r\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\r\n\r\n    return this.data.map(d => {\r\n      const baselineLabelHeight = 20;\r\n      const padding = 10;\r\n      const name = d.data.name;\r\n      const label = formatLabel(name);\r\n      const value = d.data.value;\r\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\r\n      const innerRadius = radius * 0.9;\r\n\r\n      let count = 0;\r\n      const colors = () => {\r\n        count += 1;\r\n        if (count === 1) {\r\n          return 'rgba(100,100,100,0.3)';\r\n        } else {\r\n          return this.colorScale.getColor(label);\r\n        }\r\n      };\r\n\r\n      const xPos = d.x + (d.width - padding) / 2;\r\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\r\n\r\n      return {\r\n        transform: `translate(${xPos}, ${yPos})`,\r\n        colors,\r\n        innerRadius,\r\n        outerRadius: radius,\r\n        name,\r\n        label: trimLabel(label),\r\n        total: value,\r\n        value,\r\n        percent: format('.1%')(d.data.percent),\r\n        data: [\r\n          d,\r\n          {\r\n            data: {\r\n              other: true,\r\n              value: total - value,\r\n              name: d.data.name\r\n            }\r\n          }\r\n        ]\r\n      };\r\n    });\r\n  }\r\n\r\n  getTotal(): any {\r\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { pie } from 'd3-shape';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-grid-series]',\r\n  template: `\r\n    <svg:g class=\"pie-grid-arcs\">\r\n      <svg:g\r\n        ngx-charts-pie-arc\r\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\r\n        [attr.class]=\"arc.class\"\r\n        [startAngle]=\"arc.startAngle\"\r\n        [endAngle]=\"arc.endAngle\"\r\n        [innerRadius]=\"innerRadius\"\r\n        [outerRadius]=\"outerRadius\"\r\n        [fill]=\"color(arc)\"\r\n        [value]=\"arc.data.value\"\r\n        [data]=\"arc.data\"\r\n        [gradient]=\"false\"\r\n        [pointerEvents]=\"arc.pointerEvents\"\r\n        [animate]=\"arc.animate\"\r\n        (select)=\"onClick($event)\"\r\n        (activate)=\"activate.emit($event)\"\r\n        (deactivate)=\"deactivate.emit($event)\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieGridSeriesComponent implements OnChanges {\r\n  @Input() colors;\r\n  @Input() data;\r\n  @Input() innerRadius = 70;\r\n  @Input() outerRadius = 80;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  layout: any;\r\n  arcs: any;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.layout = pie<any, any>()\r\n      .value(d => d.data.value)\r\n      .sort(null);\r\n\r\n    this.arcs = this.getArcs();\r\n  }\r\n\r\n  getArcs(): any[] {\r\n    return this.layout(this.data).map((arc, index) => {\r\n      const label = arc.data.data.name;\r\n      const other = arc.data.data.other;\r\n\r\n      if (index === 0) {\r\n        arc.startAngle = 0;\r\n      }\r\n\r\n      const color = this.colors(label);\r\n      return {\r\n        data: arc.data.data,\r\n        class: 'arc ' + 'arc' + index,\r\n        fill: color,\r\n        startAngle: other ? 0 : arc.startAngle,\r\n        endAngle: arc.endAngle,\r\n        animate: this.animations && !other,\r\n        pointerEvents: !other\r\n      };\r\n    });\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(this.data[0].data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.data.name;\r\n  }\r\n\r\n  label(arc): string {\r\n    return arc.data.name;\r\n  }\r\n\r\n  color(arc): any {\r\n    return this.colors(this.label(arc));\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  SimpleChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { max } from 'd3-array';\r\nimport { arc, pie } from 'd3-shape';\r\n\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-series]',\r\n  template: `\r\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\r\n      <svg:g\r\n        ngx-charts-pie-label\r\n        *ngIf=\"labelVisible(arc)\"\r\n        [data]=\"arc\"\r\n        [radius]=\"outerRadius\"\r\n        [color]=\"color(arc)\"\r\n        [label]=\"labelText(arc)\"\r\n        [labelTrim]=\"trimLabels\"\r\n        [labelTrimSize]=\"maxLabelLength\"\r\n        [max]=\"max\"\r\n        [value]=\"arc.value\"\r\n        [explodeSlices]=\"explodeSlices\"\r\n        [animations]=\"animations\"\r\n      ></svg:g>\r\n      <svg:g\r\n        ngx-charts-pie-arc\r\n        [startAngle]=\"arc.startAngle\"\r\n        [endAngle]=\"arc.endAngle\"\r\n        [innerRadius]=\"innerRadius\"\r\n        [outerRadius]=\"outerRadius\"\r\n        [fill]=\"color(arc)\"\r\n        [value]=\"arc.data.value\"\r\n        [gradient]=\"gradient\"\r\n        [data]=\"arc.data\"\r\n        [max]=\"max\"\r\n        [explodeSlices]=\"explodeSlices\"\r\n        [isActive]=\"isActive(arc.data)\"\r\n        [animate]=\"animations\"\r\n        (select)=\"onClick($event)\"\r\n        (activate)=\"activate.emit($event)\"\r\n        (deactivate)=\"deactivate.emit($event)\"\r\n        (dblclick)=\"dblclick.emit($event)\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"arc.data\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieSeriesComponent implements OnChanges {\r\n  @Input() colors;\r\n  @Input() series: any = [];\r\n  @Input() dims;\r\n  @Input() innerRadius = 60;\r\n  @Input() outerRadius = 80;\r\n  @Input() explodeSlices;\r\n  @Input() showLabels;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() labelFormatting: any;\r\n  @Input() trimLabels: boolean = true;\r\n  @Input() maxLabelLength: number = 10;\r\n  @Input() tooltipText: (o: any) => any;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dblclick = new EventEmitter();\r\n\r\n  max: number;\r\n  data: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    const pieGenerator = pie<any, any>()\r\n      .value(d => d.value)\r\n      .sort(null);\r\n\r\n    const arcData = pieGenerator(this.series);\r\n\r\n    this.max = max(arcData, d => {\r\n      return d.value;\r\n    });\r\n\r\n    this.data = this.calculateLabelPositions(arcData);\r\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\r\n  }\r\n\r\n  midAngle(d): number {\r\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n  }\r\n\r\n  outerArc(): any {\r\n    const factor = 1.5;\r\n\r\n    return arc()\r\n      .innerRadius(this.outerRadius * factor)\r\n      .outerRadius(this.outerRadius * factor);\r\n  }\r\n\r\n  calculateLabelPositions(pieData): any {\r\n    const factor = 1.5;\r\n    const minDistance = 10;\r\n    const labelPositions = pieData;\r\n\r\n    labelPositions.forEach(d => {\r\n      d.pos = this.outerArc().centroid(d);\r\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\r\n    });\r\n\r\n    for (let i = 0; i < labelPositions.length - 1; i++) {\r\n      const a = labelPositions[i];\r\n      if (!this.labelVisible(a)) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = i + 1; j < labelPositions.length; j++) {\r\n        const b = labelPositions[j];\r\n        if (!this.labelVisible(b)) {\r\n          continue;\r\n        }\r\n        // if they're on the same side\r\n        if (b.pos[0] * a.pos[0] > 0) {\r\n          // if they're overlapping\r\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\r\n          if (o > 0) {\r\n            // push the second up or down\r\n            b.pos[1] += Math.sign(b.pos[0]) * o;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return labelPositions;\r\n  }\r\n\r\n  labelVisible(myArc): boolean {\r\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\r\n  }\r\n\r\n  getTooltipTitle(a) {\r\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\r\n  }\r\n\r\n  labelText(myArc): string {\r\n    if (this.labelFormatting) {\r\n      return this.labelFormatting(myArc.data.name);\r\n    }\r\n    return this.label(myArc);\r\n  }\r\n\r\n  label(myArc): string {\r\n    return formatLabel(myArc.data.name);\r\n  }\r\n\r\n  defaultTooltipText(myArc): string {\r\n    const label = this.label(myArc);\r\n    const val = formatLabel(myArc.data.value);\r\n\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n\r\n  color(myArc): any {\r\n    return this.colors.getColor(this.label(myArc));\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.data.name;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\r\nimport { PieLabelComponent } from './pie-label.component';\r\nimport { PieArcComponent } from './pie-arc.component';\r\nimport { PieChartComponent } from './pie-chart.component';\r\nimport { PieGridComponent } from './pie-grid.component';\r\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\r\nimport { PieSeriesComponent } from './pie-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [\r\n    AdvancedPieChartComponent,\r\n    PieLabelComponent,\r\n    PieArcComponent,\r\n    PieChartComponent,\r\n    PieGridComponent,\r\n    PieGridSeriesComponent,\r\n    PieSeriesComponent\r\n  ],\r\n  exports: [\r\n    AdvancedPieChartComponent,\r\n    PieLabelComponent,\r\n    PieArcComponent,\r\n    PieChartComponent,\r\n    PieGridComponent,\r\n    PieGridSeriesComponent,\r\n    PieSeriesComponent\r\n  ]\r\n})\r\nexport class PieChartModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { PolarChartComponent } from './polar-chart.component';\r\nimport { PolarSeriesComponent } from './polar-series.component';\r\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\r\nimport { LineChartModule } from '../line-chart/line-chart.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\r\n  declarations: [PolarChartComponent, PolarSeriesComponent],\r\n  exports: [PolarChartComponent, PolarSeriesComponent]\r\n})\r\nexport class PolarChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ViewChild,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  NgZone,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { roundedRect } from '../common/shape.helper';\r\nimport { escapeLabel } from '../common/label.helper';\r\nimport { decimalChecker, count } from '../common/count/count.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-card]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\r\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\r\n      <svg:path\r\n        *ngIf=\"bandColor && bandColor !== color\"\r\n        class=\"card-band\"\r\n        [attr.fill]=\"bandColor\"\r\n        [attr.transform]=\"transformBand\"\r\n        stroke=\"none\"\r\n        [attr.d]=\"bandPath\"\r\n      />\r\n      <title>{{ label }}</title>\r\n      <svg:foreignObject\r\n        class=\"trimmed-label\"\r\n        x=\"5\"\r\n        [attr.x]=\"textPadding[3]\"\r\n        [attr.y]=\"cardHeight - textPadding[2]\"\r\n        [attr.width]=\"textWidth\"\r\n        [attr.height]=\"labelFontSize + textPadding[2]\"\r\n        alignment-baseline=\"hanging\"\r\n      >\r\n        <xhtml:p\r\n          [style.color]=\"textColor\"\r\n          [style.fontSize.px]=\"labelFontSize\"\r\n          [style.lineHeight.px]=\"labelFontSize\"\r\n          [innerHTML]=\"formattedLabel\"\r\n        >\r\n        </xhtml:p>\r\n      </svg:foreignObject>\r\n      <svg:text\r\n        #textEl\r\n        class=\"value-text\"\r\n        [attr.x]=\"textPadding[3]\"\r\n        [attr.y]=\"textPadding[0]\"\r\n        [style.fill]=\"textColor\"\r\n        text-anchor=\"start\"\r\n        alignment-baseline=\"hanging\"\r\n        [style.font-size.pt]=\"textFontSize\"\r\n      >\r\n        {{ value }}\r\n      </svg:text>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CardComponent implements OnChanges, OnDestroy {\r\n  @Input() color;\r\n  @Input() bandColor;\r\n  @Input() textColor;\r\n\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() label;\r\n  @Input() data;\r\n  @Input() medianSize: number;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\r\n\r\n  element: HTMLElement;\r\n  value: string = '';\r\n  transform: string;\r\n  formattedLabel: string;\r\n  cardWidth: number;\r\n  cardHeight: number;\r\n  textWidth: number;\r\n  textFontSize: number = 12;\r\n  textTransform: string = '';\r\n  initialized: boolean = false;\r\n  animationReq: any;\r\n\r\n  bandHeight: number = 10;\r\n  transformBand: string;\r\n  textPadding = [10, 20, 5, 20];\r\n  labelFontSize = 15;\r\n\r\n  bandPath: string;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n  }\r\n\r\n  update(): void {\r\n    this.zone.run(() => {\r\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\r\n\r\n      this.transform = `translate(${this.x} , ${this.y})`;\r\n\r\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\r\n      this.cardWidth = Math.max(0, this.width);\r\n      this.cardHeight = Math.max(0, this.height);\r\n\r\n      this.label = this.label ? this.label : this.data.name;\r\n\r\n      const cardData = {\r\n        label: this.label,\r\n        data: this.data,\r\n        value: this.data.value\r\n      };\r\n\r\n      this.formattedLabel = labelFormatting(cardData);\r\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\r\n\r\n      const value = hasValue ? valueFormatting(cardData) : '';\r\n\r\n      this.value = this.paddedValue(value);\r\n      this.setPadding();\r\n\r\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\r\n\r\n      setTimeout(() => {\r\n        this.scaleText();\r\n        this.value = value;\r\n        if (hasValue && !this.initialized) {\r\n          setTimeout(() => this.startCount(), 20);\r\n        }\r\n      }, 8);\r\n    });\r\n  }\r\n\r\n  paddedValue(value: string) {\r\n    if (this.medianSize && this.medianSize > value.length) {\r\n      value += '\\u2007'.repeat(this.medianSize - value.length);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  startCount(): void {\r\n    if (!this.initialized && this.animations) {\r\n      cancelAnimationFrame(this.animationReq);\r\n\r\n      const val = this.data.value;\r\n      const decs = decimalChecker(val);\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n\r\n      const callback = ({ value, finished }) => {\r\n        this.zone.run(() => {\r\n          value = finished ? val : value;\r\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\r\n          if (!finished) {\r\n            this.value = this.paddedValue(this.value);\r\n          }\r\n          this.cd.markForCheck();\r\n        });\r\n      };\r\n\r\n      this.animationReq = count(0, val, decs, 1, callback);\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  scaleText(): void {\r\n    this.zone.run(() => {\r\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\r\n      if (width === 0 || height === 0) {\r\n        return;\r\n      }\r\n\r\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\r\n      const availableWidth = this.cardWidth - 2 * textPadding;\r\n      const availableHeight = this.cardHeight / 3;\r\n\r\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\r\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\r\n      this.labelFontSize = Math.min(this.textFontSize, 15);\r\n\r\n      this.setPadding();\r\n      this.cd.markForCheck();\r\n    });\r\n  }\r\n\r\n  setPadding() {\r\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\r\n    const padding = this.cardHeight / 2;\r\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\r\n    this.textPadding[2] = padding - this.labelFontSize;\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit(this.data);\r\n  }\r\n}\r\n","import * as d3_color from 'd3-color';\r\n\r\n/**\r\n * Converts a hex to RGB\r\n *\r\n * @export\r\n */\r\nexport function hexToRgb(value: string): any {\r\n  // deprecated, use d3.color()\r\n  return d3_color.rgb(value);\r\n}\r\n\r\n/**\r\n * Accepts a color (string) and returns a inverted hex color (string)\r\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\r\n *\r\n * @export\r\n */\r\nexport function invertColor(value: string): string {\r\n  const color = d3_color.rgb(value);\r\n  const { r, g, b, opacity } = color;\r\n  if (opacity === 0) {\r\n    return color.toString();\r\n  }\r\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n  const depth = yiq >= 128 ? -0.8 : 0.8;\r\n\r\n  return shadeRGBColor(color, depth);\r\n}\r\n\r\n/**\r\n * Given a rgb, it will darken/lighten\r\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\r\n *\r\n * @export\r\n * @param \\{ r, g, b }\r\n */\r\nexport function shadeRGBColor({ r, g, b }, percent) {\r\n  const t = percent < 0 ? 0 : 255;\r\n  const p = percent < 0 ? percent * -1 : percent;\r\n\r\n  r = Math.round((t - r) * p) + r;\r\n  g = Math.round((t - g) * p) + g;\r\n  b = Math.round((t - b) * p) + b;\r\n\r\n  return `rgb(${r}, ${g}, ${b})`;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { invertColor } from '../utils/color-utils';\r\n\r\nexport interface CardModel {\r\n  x;\r\n  y;\r\n  width: number;\r\n  height: number;\r\n  color: string;\r\n  label: string;\r\n  data;\r\n  tooltipText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-card-series]',\r\n  template: `\r\n    <svg:rect\r\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\r\n      class=\"card-empty\"\r\n      [attr.x]=\"c.x\"\r\n      [attr.y]=\"c.y\"\r\n      [style.fill]=\"emptyColor\"\r\n      [attr.width]=\"c.width\"\r\n      [attr.height]=\"c.height\"\r\n      rx=\"3\"\r\n      ry=\"3\"\r\n    />\r\n    <svg:g\r\n      ngx-charts-card\r\n      *ngFor=\"let c of cards; trackBy: trackBy\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [color]=\"c.color\"\r\n      [bandColor]=\"c.bandColor\"\r\n      [textColor]=\"c.textColor\"\r\n      [data]=\"c.data\"\r\n      [label]=\"c.label\"\r\n      [medianSize]=\"medianSize\"\r\n      [valueFormatting]=\"valueFormatting\"\r\n      [labelFormatting]=\"labelFormatting\"\r\n      [animations]=\"animations\"\r\n      (select)=\"onClick($event)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CardSeriesComponent implements OnChanges {\r\n  @Input() data: any[];\r\n  @Input() slots: any[];\r\n  @Input() dims;\r\n  @Input() colors;\r\n  @Input() innerPadding = 15;\r\n\r\n  @Input() cardColor;\r\n  @Input() bandColor;\r\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\r\n  @Input() textColor;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  cards: CardModel[];\r\n  emptySlots: any[];\r\n  medianSize: number;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.data.length > 2) {\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n\r\n      const sortedLengths = this.data\r\n        .map(d => {\r\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\r\n          return hasValue\r\n            ? valueFormatting({\r\n                data: d.data,\r\n                label: d ? d.data.name : '',\r\n                value: d && d.data ? d.data.value : ''\r\n              }).length\r\n            : 0;\r\n        })\r\n        .sort((a, b) => b - a);\r\n      const idx = Math.ceil(this.data.length / 2);\r\n      this.medianSize = sortedLengths[idx];\r\n    }\r\n\r\n    const cards = this.getCards();\r\n    this.cards = cards.filter(d => d.data.value !== null);\r\n    this.emptySlots = cards.filter(d => d.data.value === null);\r\n  }\r\n\r\n  getCards(): any[] {\r\n    const yPadding =\r\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\r\n    const xPadding =\r\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\r\n\r\n    return this.data.map((d, index) => {\r\n      let label = d.data.name;\r\n      if (label && label.constructor.name === 'Date') {\r\n        label = label.toLocaleDateString();\r\n      } else {\r\n        label = label ? label.toLocaleString() : label;\r\n      }\r\n\r\n      const value = d.data.value;\r\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\r\n      const color = this.cardColor || valueColor || '#000';\r\n      return {\r\n        x: d.x,\r\n        y: d.y,\r\n        width: d.width - xPadding,\r\n        height: d.height - yPadding,\r\n        color,\r\n        bandColor: this.bandColor || valueColor,\r\n        textColor: this.textColor || invertColor(color),\r\n        label,\r\n        data: d.data,\r\n        tooltipText: `${label}: ${value}`\r\n      };\r\n    });\r\n  }\r\n\r\n  trackBy(index, card): string {\r\n    return card.label;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-number-card',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\r\n        <svg:g\r\n          ngx-charts-card-series\r\n          [colors]=\"colors\"\r\n          [cardColor]=\"cardColor\"\r\n          [bandColor]=\"bandColor\"\r\n          [textColor]=\"textColor\"\r\n          [emptyColor]=\"emptyColor\"\r\n          [data]=\"data\"\r\n          [dims]=\"dims\"\r\n          [innerPadding]=\"innerPadding\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [animations]=\"animations\"\r\n          (select)=\"onClick($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NumberCardComponent extends BaseChartComponent {\r\n  @Input() cardColor: string;\r\n  @Input() bandColor: string;\r\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\r\n  @Input() innerPadding = 15;\r\n  @Input() textColor: string;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() designatedTotal: number;\r\n\r\n  dims: ViewDimensions;\r\n  data: any[];\r\n  slots: any[];\r\n  colors: ColorHelper;\r\n  transform: string;\r\n  domain: any[];\r\n  margin = [10, 10, 10, 10];\r\n\r\n  backgroundCards: any[];\r\n\r\n  get clickable() {\r\n    return !!this.select.observers.length;\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.setColors();\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    const size = gridSize(this.dims, this.results.length, 150);\r\n    const N = size[0] * size[1];\r\n\r\n    const data = this.results.slice();\r\n\r\n    while (data.length < N) {\r\n      data.push({ value: null });\r\n    }\r\n\r\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { CardComponent } from './card.component';\r\nimport { CardSeriesComponent } from './card-series.component';\r\nimport { NumberCardComponent } from './number-card.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\r\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\r\n})\r\nexport class NumberCardModule {}\r\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { select } from 'd3-selection';\r\n\r\nimport { invertColor } from '../utils/color-utils';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { escapeLabel } from '../common/label.helper';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tree-map-cell]',\r\n  template: `\r\n    <svg:g>\r\n      <defs *ngIf=\"gradient\">\r\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n      </defs>\r\n      <svg:rect\r\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        [attr.x]=\"x\"\r\n        [attr.y]=\"y\"\r\n        [style.cursor]=\"'pointer'\"\r\n        class=\"cell\"\r\n        (click)=\"onClick()\"\r\n      />\r\n      <svg:foreignObject\r\n        *ngIf=\"width >= 70 && height >= 35\"\r\n        [attr.x]=\"x\"\r\n        [attr.y]=\"y\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        class=\"treemap-label\"\r\n        [style.pointer-events]=\"'none'\"\r\n      >\r\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\r\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\r\n          <xhtml:br />\r\n          <xhtml:span\r\n            *ngIf=\"animations\"\r\n            class=\"treemap-val\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"value\"\r\n            [valueFormatting]=\"valueFormatting\"\r\n          >\r\n          </xhtml:span>\r\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\r\n            {{ formattedValue }}\r\n          </xhtml:span>\r\n        </xhtml:p>\r\n      </svg:foreignObject>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapCellComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() fill;\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() label;\r\n  @Input() value;\r\n  @Input() valueType;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  gradientStops: any[];\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n\r\n  element: HTMLElement;\r\n  transform: string;\r\n  formattedLabel: string;\r\n  formattedValue: string;\r\n  initialized: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.update();\r\n\r\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\r\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\r\n\r\n    const cellData = {\r\n      data: this.data,\r\n      label: this.label,\r\n      value: this.value\r\n    };\r\n\r\n    this.formattedValue = this.valueFormatting(cellData.value);\r\n    this.formattedLabel = labelFormatting(cellData);\r\n\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n    this.gradientStops = this.getGradientStops();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.initialized) {\r\n      this.animateToCurrentForm();\r\n    } else {\r\n      if (this.animations) {\r\n        this.loadAnimation();\r\n      }\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\r\n\r\n    this.animateToCurrentForm();\r\n  }\r\n\r\n  getTextColor(): string {\r\n    return invertColor(this.fill);\r\n  }\r\n\r\n  animateToCurrentForm(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    if (this.animations) {\r\n      node\r\n        .transition()\r\n        .duration(750)\r\n        .attr('opacity', 1)\r\n        .attr('x', this.x)\r\n        .attr('y', this.y)\r\n        .attr('width', this.width)\r\n        .attr('height', this.height);\r\n    } else {\r\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\r\n    }\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  getGradientStops() {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: 0.3\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tree-map-cell-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-tree-map-cell\r\n      *ngFor=\"let c of cells; trackBy: trackBy\"\r\n      [data]=\"c.data\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [fill]=\"c.fill\"\r\n      [label]=\"c.label\"\r\n      [value]=\"c.value\"\r\n      [valueType]=\"c.valueType\"\r\n      [valueFormatting]=\"valueFormatting\"\r\n      [labelFormatting]=\"labelFormatting\"\r\n      [gradient]=\"gradient\"\r\n      [animations]=\"animations\"\r\n      (select)=\"onClick($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"c.data\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapCellSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() dims;\r\n  @Input() colors;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  cells: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.cells = this.getCells();\r\n  }\r\n\r\n  getCells(): any[] {\r\n    return this.data.children\r\n      .filter(d => {\r\n        return d.depth === 1;\r\n      })\r\n      .map((d, index) => {\r\n        const label = d.id;\r\n\r\n        return {\r\n          data: d.data,\r\n          x: d.x0,\r\n          y: d.y0,\r\n          width: d.x1 - d.x0,\r\n          height: d.y1 - d.y0,\r\n          fill: this.colors.getColor(label),\r\n          label,\r\n          value: d.value,\r\n          valueType: d.valueType\r\n        };\r\n      });\r\n  }\r\n\r\n  getTooltipText({ label, value }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { treemap, stratify } from 'd3-hierarchy';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-tree-map',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\r\n        <svg:g\r\n          ngx-charts-tree-map-cell-series\r\n          [colors]=\"colors\"\r\n          [data]=\"data\"\r\n          [dims]=\"dims\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          (select)=\"onClick($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['./tree-map.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapComponent extends BaseChartComponent {\r\n  @Input() results;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: any;\r\n  domain: any;\r\n  transform: any;\r\n  colors: ColorHelper;\r\n  treemap: any;\r\n  data: any;\r\n  margin = [10, 10, 10, 10];\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\r\n\r\n    const rootNode = {\r\n      name: 'root',\r\n      value: 0,\r\n      isRoot: true\r\n    };\r\n\r\n    const root = stratify<any>()\r\n      .id(d => {\r\n        let label = d.name;\r\n\r\n        if (label.constructor.name === 'Date') {\r\n          label = label.toLocaleDateString();\r\n        } else {\r\n          label = label.toLocaleString();\r\n        }\r\n        return label;\r\n      })\r\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\r\n      .sum(d => d.value);\r\n\r\n    this.data = this.treemap(root);\r\n\r\n    this.setColors();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { TreeMapCellComponent } from './tree-map-cell.component';\r\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\r\nimport { TreeMapComponent } from './tree-map.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\r\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\r\n})\r\nexport class TreeMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-linear-gauge',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\r\n      <svg:g class=\"linear-gauge chart\">\r\n        <svg:g\r\n          ngx-charts-bar\r\n          class=\"background-bar\"\r\n          [width]=\"dims.width\"\r\n          [height]=\"3\"\r\n          [x]=\"margin[3]\"\r\n          [y]=\"dims.height / 2 + margin[0] - 2\"\r\n          [data]=\"{}\"\r\n          [orientation]=\"'horizontal'\"\r\n          [roundEdges]=\"true\"\r\n          [animations]=\"animations\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-bar\r\n          [width]=\"valueScale(value)\"\r\n          [height]=\"3\"\r\n          [x]=\"margin[3]\"\r\n          [y]=\"dims.height / 2 + margin[0] - 2\"\r\n          [fill]=\"colors.getColor(units)\"\r\n          [data]=\"{}\"\r\n          [orientation]=\"'horizontal'\"\r\n          [roundEdges]=\"true\"\r\n          [animations]=\"animations\"\r\n        ></svg:g>\r\n\r\n        <svg:line\r\n          *ngIf=\"hasPreviousValue\"\r\n          [attr.transform]=\"transformLine\"\r\n          x1=\"0\"\r\n          y1=\"5\"\r\n          x2=\"0\"\r\n          y2=\"15\"\r\n          [attr.stroke]=\"colors.getColor(units)\"\r\n        />\r\n\r\n        <svg:line\r\n          *ngIf=\"hasPreviousValue\"\r\n          [attr.transform]=\"transformLine\"\r\n          x1=\"0\"\r\n          y1=\"-5\"\r\n          x2=\"0\"\r\n          y2=\"-15\"\r\n          [attr.stroke]=\"colors.getColor(units)\"\r\n        />\r\n\r\n        <svg:g [attr.transform]=\"transform\">\r\n          <svg:g [attr.transform]=\"valueTranslate\">\r\n            <svg:text\r\n              #valueTextEl\r\n              class=\"value\"\r\n              [style.textAnchor]=\"'middle'\"\r\n              [attr.transform]=\"valueTextTransform\"\r\n              alignment-baseline=\"after-edge\"\r\n            >\r\n              {{ displayValue }}\r\n            </svg:text>\r\n          </svg:g>\r\n\r\n          <svg:g [attr.transform]=\"unitsTranslate\">\r\n            <svg:text\r\n              #unitsTextEl\r\n              class=\"units\"\r\n              [style.textAnchor]=\"'middle'\"\r\n              [attr.transform]=\"unitsTextTransform\"\r\n              alignment-baseline=\"before-edge\"\r\n            >\r\n              {{ units }}\r\n            </svg:text>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() value: number = 0;\r\n  @Input() units: string;\r\n  @Input() previousValue;\r\n  @Input() valueFormatting: any;\r\n\r\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\r\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\r\n\r\n  dims: ViewDimensions;\r\n  valueDomain: any;\r\n  valueScale: any;\r\n\r\n  colors: ColorHelper;\r\n  transform: string;\r\n  margin: any[] = [10, 20, 10, 20];\r\n  transformLine: string;\r\n\r\n  valueResizeScale: number = 1;\r\n  unitsResizeScale: number = 1;\r\n  valueTextTransform: string = '';\r\n  valueTranslate: string = '';\r\n  unitsTextTransform: string = '';\r\n  unitsTranslate: string = '';\r\n  displayValue: string;\r\n  hasPreviousValue: boolean;\r\n\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => {\r\n      this.scaleText('value');\r\n      this.scaleText('units');\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.hasPreviousValue = this.previousValue !== undefined;\r\n    this.max = Math.max(this.max, this.value);\r\n    this.min = Math.min(this.min, this.value);\r\n    if (this.hasPreviousValue) {\r\n      this.max = Math.max(this.max, this.previousValue);\r\n      this.min = Math.min(this.min, this.previousValue);\r\n    }\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.valueDomain = this.getValueDomain();\r\n    this.valueScale = this.getValueScale();\r\n    this.displayValue = this.getDisplayValue();\r\n\r\n    this.setColors();\r\n\r\n    const xOffset = this.margin[3] + this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n\r\n    this.transform = `translate(${xOffset}, ${yOffset})`;\r\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\r\n    this.valueTranslate = `translate(0, -15)`;\r\n    this.unitsTranslate = `translate(0, 15)`;\r\n    setTimeout(() => this.scaleText('value'), 50);\r\n    setTimeout(() => this.scaleText('units'), 50);\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    return [this.min, this.max];\r\n  }\r\n\r\n  getValueScale(): any {\r\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\r\n  }\r\n\r\n  getDisplayValue(): string {\r\n    if (this.valueFormatting) {\r\n      return this.valueFormatting(this.value);\r\n    }\r\n    return this.value.toLocaleString();\r\n  }\r\n\r\n  scaleText(element, repeat: boolean = true): void {\r\n    let el;\r\n    let resizeScale;\r\n    if (element === 'value') {\r\n      el = this.valueTextEl;\r\n      resizeScale = this.valueResizeScale;\r\n    } else {\r\n      el = this.unitsTextEl;\r\n      resizeScale = this.unitsResizeScale;\r\n    }\r\n\r\n    const { width, height } = el.nativeElement.getBoundingClientRect();\r\n    if (width === 0 || height === 0) return;\r\n    const oldScale = resizeScale;\r\n    const availableWidth = this.dims.width;\r\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\r\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\r\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\r\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\r\n\r\n    if (resizeScale !== oldScale) {\r\n      if (element === 'value') {\r\n        this.valueResizeScale = resizeScale;\r\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\r\n      } else {\r\n        this.unitsResizeScale = resizeScale;\r\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\r\n      }\r\n      this.cd.markForCheck();\r\n      if (repeat) {\r\n        setTimeout(() => {\r\n          this.scaleText(element, false);\r\n        }, 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit({\r\n      name: 'Value',\r\n      value: this.value\r\n    });\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-gauge',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\r\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\r\n          <svg:g\r\n            ngx-charts-gauge-arc\r\n            [backgroundArc]=\"arc.backgroundArc\"\r\n            [valueArc]=\"arc.valueArc\"\r\n            [cornerRadius]=\"cornerRadius\"\r\n            [colors]=\"colors\"\r\n            [isActive]=\"isActive(arc.valueArc.data)\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [valueFormatting]=\"valueFormatting\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event)\"\r\n            (activate)=\"onActivate($event)\"\r\n            (deactivate)=\"onDeactivate($event)\"\r\n          ></svg:g>\r\n        </svg:g>\r\n\r\n        <svg:g\r\n          ngx-charts-gauge-axis\r\n          *ngIf=\"showAxis\"\r\n          [bigSegments]=\"bigSegments\"\r\n          [smallSegments]=\"smallSegments\"\r\n          [min]=\"min\"\r\n          [max]=\"max\"\r\n          [radius]=\"outerRadius\"\r\n          [angleSpan]=\"angleSpan\"\r\n          [valueScale]=\"valueScale\"\r\n          [startAngle]=\"startAngle\"\r\n          [tickFormatting]=\"axisTickFormatting\"\r\n        ></svg:g>\r\n\r\n        <svg:text\r\n          #textEl\r\n          *ngIf=\"showText\"\r\n          [style.textAnchor]=\"'middle'\"\r\n          [attr.transform]=\"textTransform\"\r\n          alignment-baseline=\"central\"\r\n        >\r\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\r\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\r\n        </svg:text>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() textValue: string;\r\n  @Input() units: string;\r\n  @Input() bigSegments: number = 10;\r\n  @Input() smallSegments: number = 5;\r\n  @Input() results: any[];\r\n  @Input() showAxis: boolean = true;\r\n  @Input() startAngle: number = -120;\r\n  @Input() angleSpan: number = 240;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() axisTickFormatting: any;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: (value: any) => string;\r\n  @Input() showText: boolean = true;\r\n\r\n  // Specify margins\r\n  @Input() margin: any[];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('textEl') textEl: ElementRef;\r\n\r\n  dims: ViewDimensions;\r\n  domain: any[];\r\n  valueDomain: any;\r\n  valueScale: any;\r\n\r\n  colors: ColorHelper;\r\n  transform: string;\r\n\r\n  outerRadius: number;\r\n  textRadius: number; // max available radius for the text\r\n  resizeScale: number = 1;\r\n  rotation: string = '';\r\n  textTransform: string = 'scale(1, 1)';\r\n  cornerRadius: number = 10;\r\n  arcs: any[];\r\n  displayValue: string;\r\n  legendOptions: any;\r\n\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => this.scaleText());\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showAxis) {\r\n      if (!this.margin) {\r\n        this.margin = [10, 20, 10, 20];\r\n      }\r\n    } else {\r\n      if (!this.margin) {\r\n        this.margin = [60, 100, 60, 100];\r\n      }\r\n    }\r\n\r\n    // make the starting angle positive\r\n    if (this.startAngle < 0) {\r\n      this.startAngle = (this.startAngle % 360) + 360;\r\n    }\r\n\r\n    this.angleSpan = Math.min(this.angleSpan, 360);\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showLegend: this.legend,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.domain = this.getDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n    this.valueScale = this.getValueScale();\r\n    this.displayValue = this.getDisplayValue();\r\n\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\r\n\r\n    this.arcs = this.getArcs();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    const xOffset = this.margin[3] + this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n\r\n    this.transform = `translate(${xOffset}, ${yOffset})`;\r\n    this.rotation = `rotate(${this.startAngle})`;\r\n    setTimeout(() => this.scaleText(), 50);\r\n  }\r\n\r\n  getArcs(): any[] {\r\n    const arcs = [];\r\n\r\n    const availableRadius = this.outerRadius * 0.7;\r\n\r\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\r\n    const arcWidth = radiusPerArc * 0.7;\r\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\r\n    this.cornerRadius = Math.floor(arcWidth / 2);\r\n\r\n    let i = 0;\r\n    for (const d of this.results) {\r\n      const outerRadius = this.outerRadius - i * radiusPerArc;\r\n      const innerRadius = outerRadius - arcWidth;\r\n\r\n      const backgroundArc = {\r\n        endAngle: (this.angleSpan * Math.PI) / 180,\r\n        innerRadius,\r\n        outerRadius,\r\n        data: {\r\n          value: this.max,\r\n          name: d.name\r\n        }\r\n      };\r\n\r\n      const valueArc = {\r\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\r\n        innerRadius,\r\n        outerRadius,\r\n        data: {\r\n          value: d.value,\r\n          name: d.name\r\n        }\r\n      };\r\n\r\n      const arc = {\r\n        backgroundArc,\r\n        valueArc\r\n      };\r\n\r\n      arcs.push(arc);\r\n      i++;\r\n    }\r\n\r\n    return arcs;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const values = this.results.map(d => d.value);\r\n    const dataMin = Math.min(...values);\r\n    const dataMax = Math.max(...values);\r\n\r\n    if (this.min !== undefined) {\r\n      this.min = Math.min(this.min, dataMin);\r\n    } else {\r\n      this.min = dataMin;\r\n    }\r\n\r\n    if (this.max !== undefined) {\r\n      this.max = Math.max(this.max, dataMax);\r\n    } else {\r\n      this.max = dataMax;\r\n    }\r\n\r\n    return [this.min, this.max];\r\n  }\r\n\r\n  getValueScale(): any {\r\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\r\n  }\r\n\r\n  getDisplayValue(): string {\r\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\r\n\r\n    if (this.textValue && 0 !== this.textValue.length) {\r\n      return this.textValue.toLocaleString();\r\n    }\r\n\r\n    if (this.valueFormatting) {\r\n      return this.valueFormatting(value);\r\n    }\r\n\r\n    return value.toLocaleString();\r\n  }\r\n\r\n  scaleText(repeat: boolean = true): void {\r\n    if (!this.showText) {\r\n      return;\r\n    }\r\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\r\n    const oldScale = this.resizeScale;\r\n\r\n    if (width === 0) {\r\n      this.resizeScale = 1;\r\n    } else {\r\n      const availableSpace = this.textRadius;\r\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\r\n    }\r\n\r\n    if (this.resizeScale !== oldScale) {\r\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\r\n      this.cd.markForCheck();\r\n      if (repeat) {\r\n        setTimeout(() => this.scaleText(false), 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getLegendOptions(): any {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      colors: this.colors,\r\n      domain: this.domain,\r\n      title: this.legendTitle,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.valueArc.data.name;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-gauge-arc]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-pie-arc\r\n      class=\"background-arc\"\r\n      [startAngle]=\"0\"\r\n      [endAngle]=\"backgroundArc.endAngle\"\r\n      [innerRadius]=\"backgroundArc.innerRadius\"\r\n      [outerRadius]=\"backgroundArc.outerRadius\"\r\n      [cornerRadius]=\"cornerRadius\"\r\n      [data]=\"backgroundArc.data\"\r\n      [animate]=\"false\"\r\n      [pointerEvents]=\"false\"\r\n    ></svg:g>\r\n    <svg:g\r\n      ngx-charts-pie-arc\r\n      [startAngle]=\"0\"\r\n      [endAngle]=\"valueArc.endAngle\"\r\n      [innerRadius]=\"valueArc.innerRadius\"\r\n      [outerRadius]=\"valueArc.outerRadius\"\r\n      [cornerRadius]=\"cornerRadius\"\r\n      [fill]=\"colors.getColor(valueArc.data.name)\"\r\n      [data]=\"valueArc.data\"\r\n      [animate]=\"animations\"\r\n      [isActive]=\"isActive\"\r\n      (select)=\"select.emit($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"valueArc.data\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeArcComponent {\r\n  @Input() backgroundArc: any;\r\n  @Input() valueArc: any;\r\n  @Input() cornerRadius: any;\r\n  @Input() colors: ColorHelper;\r\n  @Input() isActive: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: (value: any) => string;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  tooltipText(arc): string {\r\n    const label = formatLabel(arc.data.name);\r\n    let val;\r\n\r\n    if (this.valueFormatting) {\r\n      val = this.valueFormatting(arc.data.value);\r\n    } else {\r\n      val = formatLabel(arc.data.value);\r\n    }\r\n\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { line } from 'd3-shape';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-gauge-axis]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"rotate\">\r\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\r\n        <svg:path [attr.d]=\"tick.line\" />\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\r\n        <svg:text\r\n          [style.textAnchor]=\"tick.textAnchor\"\r\n          [attr.transform]=\"tick.textTransform\"\r\n          alignment-baseline=\"central\"\r\n        >\r\n          {{ tick.text }}\r\n        </svg:text>\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\r\n        <svg:path [attr.d]=\"tick.line\" />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeAxisComponent implements OnChanges {\r\n  @Input() bigSegments: any;\r\n  @Input() smallSegments: any;\r\n  @Input() min: any;\r\n  @Input() max: any;\r\n  @Input() angleSpan: number;\r\n  @Input() startAngle: number;\r\n  @Input() radius: any;\r\n  @Input() valueScale: any;\r\n  @Input() tickFormatting: any;\r\n\r\n  ticks: any;\r\n  rotationAngle: number;\r\n  rotate: string = '';\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.rotationAngle = -90 + this.startAngle;\r\n    this.rotate = `rotate(${this.rotationAngle})`;\r\n    this.ticks = this.getTicks();\r\n  }\r\n\r\n  getTicks(): any {\r\n    const bigTickSegment = this.angleSpan / this.bigSegments;\r\n    const smallTickSegment = bigTickSegment / this.smallSegments;\r\n    const tickLength = 20;\r\n    const ticks = {\r\n      big: [],\r\n      small: []\r\n    };\r\n\r\n    const startDistance = this.radius + 10;\r\n    const textDist = startDistance + tickLength + 10;\r\n\r\n    for (let i = 0; i <= this.bigSegments; i++) {\r\n      const angleDeg = i * bigTickSegment;\r\n      const angle = (angleDeg * Math.PI) / 180;\r\n\r\n      const textAnchor = this.getTextAnchor(angleDeg);\r\n\r\n      let skip = false;\r\n      if (i === 0 && this.angleSpan === 360) {\r\n        skip = true;\r\n      }\r\n\r\n      if (!skip) {\r\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\r\n        if (this.tickFormatting) {\r\n          text = this.tickFormatting(text);\r\n        }\r\n        ticks.big.push({\r\n          line: this.getTickPath(startDistance, tickLength, angle),\r\n          textAnchor,\r\n          text,\r\n          textTransform: `\r\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\r\n          `\r\n        });\r\n      }\r\n\r\n      if (i === this.bigSegments) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = 1; j <= this.smallSegments; j++) {\r\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\r\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\r\n\r\n        ticks.small.push({\r\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\r\n        });\r\n      }\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getTextAnchor(angle) {\r\n    // [0, 45] = 'middle';\r\n    // [46, 135] = 'start';\r\n    // [136, 225] = 'middle';\r\n    // [226, 315] = 'end';\r\n\r\n    angle = (this.startAngle + angle) % 360;\r\n    let textAnchor = 'middle';\r\n    if (angle > 45 && angle <= 135) {\r\n      textAnchor = 'start';\r\n    } else if (angle > 225 && angle <= 315) {\r\n      textAnchor = 'end';\r\n    }\r\n    return textAnchor;\r\n  }\r\n\r\n  getTickPath(startDistance, tickLength, angle): any {\r\n    const y1 = startDistance * Math.sin(angle);\r\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\r\n    const x1 = startDistance * Math.cos(angle);\r\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\r\n\r\n    const points = [\r\n      { x: x1, y: y1 },\r\n      { x: x2, y: y2 }\r\n    ];\r\n    const lineGenerator = line<any>()\r\n      .x(d => d.x)\r\n      .y(d => d.y);\r\n    return lineGenerator(points);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { LinearGaugeComponent } from './linear-gauge.component';\r\nimport { GaugeComponent } from './gauge.component';\r\nimport { GaugeArcComponent } from './gauge-arc.component';\r\nimport { GaugeAxisComponent } from './gauge-axis.component';\r\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\r\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\r\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\r\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\r\n})\r\nexport class GaugeModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from './common/chart-common.module';\r\nimport { AreaChartModule } from './area-chart/area-chart.module';\r\nimport { BarChartModule } from './bar-chart/bar-chart.module';\r\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\r\nimport { HeatMapModule } from './heat-map/heat-map.module';\r\nimport { LineChartModule } from './line-chart/line-chart.module';\r\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\r\nimport { NumberCardModule } from './number-card/number-card.module';\r\nimport { PieChartModule } from './pie-chart/pie-chart.module';\r\nimport { TreeMapModule } from './tree-map/tree-map.module';\r\nimport { GaugeModule } from './gauge/gauge.module';\r\nimport { ngxChartsPolyfills } from './polyfills';\r\n\r\n@NgModule({\r\n  exports: [\r\n    ChartCommonModule,\r\n    AreaChartModule,\r\n    BarChartModule,\r\n    BubbleChartModule,\r\n    HeatMapModule,\r\n    LineChartModule,\r\n    PolarChartModule,\r\n    NumberCardModule,\r\n    PieChartModule,\r\n    TreeMapModule,\r\n    GaugeModule\r\n  ]\r\n})\r\nexport class NgxChartsModule {\r\n  constructor() {\r\n    ngxChartsPolyfills();\r\n  }\r\n}\r\n","// The export is needed here to generate a valid polyfills.metadata.json file\r\nexport function ngxChartsPolyfills() {\r\n  // IE11 fix\r\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\r\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\r\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\r\n  }\r\n}\r\n","import { timeFormat } from 'd3-time-format';\r\n\r\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\r\n  return function (label: string): string {\r\n    if (label === 'No Value' || label === 'Other') {\r\n      return label;\r\n    }\r\n    if (fieldType === 'date' && groupByType === 'groupBy') {\r\n      const formatter = timeFormat('MM/DD/YYYY');\r\n      return formatter(<any>label);\r\n    }\r\n\r\n    return label.toString();\r\n  };\r\n}\r\n"]}